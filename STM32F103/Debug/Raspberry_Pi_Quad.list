
Raspberry_Pi_Quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08009b08  08009b08  00019b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e60  08009e60  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  08009e60  08009e60  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e60  08009e60  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000218  0800a07c  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800a07c  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001183c  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000224e  00000000  00000000  00031a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  00033cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  00034f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c12  00000000  00000000  00036098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd53  00000000  00000000  00038caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093de5  00000000  00000000  000469fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c18  00000000  00000000  000da860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	08009aec 	.word	0x08009aec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	08009aec 	.word	0x08009aec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f001 fb49 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f8ab 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 fcc5 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7a:	f000 fc75 	bl	8001468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b7e:	f000 f901 	bl	8000d84 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b82:	f000 f977 	bl	8000e74 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b86:	f000 f9a3 	bl	8000ed0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b8a:	f000 f9d9 	bl	8000f40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b8e:	f000 fa9b 	bl	80010c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b92:	f000 fb2f 	bl	80011f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b96:	f000 fbc5 	bl	8001324 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b9a:	f000 fc11 	bl	80013c0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b9e:	f000 fc39 	bl	8001414 <MX_USART3_UART_Init>
  }
  */


 /*-----UART BAŞLADI MESAJI İLE STM'İN HABERLEŞME PROTOKOLÜNÜN BAŞLADIĞININ BİLGİSİ.----*/
  while(HAL_UART_GetState(&huart1)!= HAL_UART_STATE_READY);
 8000ba2:	bf00      	nop
 8000ba4:	483f      	ldr	r0, [pc, #252]	; (8000ca4 <main+0x13c>)
 8000ba6:	f006 f918 	bl	8006dda <HAL_UART_GetState>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d1f9      	bne.n	8000ba4 <main+0x3c>
  if(HAL_UART_Transmit_IT(&huart1, (uint8_t *)Uart_start_command, strlen(Uart_start_command))!=HAL_OK)
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <main+0x140>)
 8000bb2:	681c      	ldr	r4, [r3, #0]
 8000bb4:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <main+0x140>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fac9 	bl	8000150 <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	4837      	ldr	r0, [pc, #220]	; (8000ca4 <main+0x13c>)
 8000bc8:	f005 ff66 	bl	8006a98 <HAL_UART_Transmit_IT>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <main+0x6e>
  {
	  Error_Handler();
 8000bd2:	f000 fe17 	bl	8001804 <Error_Handler>
  }

  HAL_Delay(100);
 8000bd6:	2064      	movs	r0, #100	; 0x64
 8000bd8:	f001 fb76 	bl	80022c8 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 4);
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4933      	ldr	r1, [pc, #204]	; (8000cac <main+0x144>)
 8000be0:	4833      	ldr	r0, [pc, #204]	; (8000cb0 <main+0x148>)
 8000be2:	f001 fc6b 	bl	80024bc <HAL_ADC_Start_DMA>

  /* Right Front Theta , Alpha  , Gamma				*/
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000be6:	2108      	movs	r1, #8
 8000be8:	4832      	ldr	r0, [pc, #200]	; (8000cb4 <main+0x14c>)
 8000bea:	f005 f85f 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000bee:	210c      	movs	r1, #12
 8000bf0:	4830      	ldr	r0, [pc, #192]	; (8000cb4 <main+0x14c>)
 8000bf2:	f005 f85b 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	482f      	ldr	r0, [pc, #188]	; (8000cb8 <main+0x150>)
 8000bfa:	f005 f857 	bl	8005cac <HAL_TIM_PWM_Start>

  /* Left Front Theta , Alpha  , Gamma				*/
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8000bfe:	210c      	movs	r1, #12
 8000c00:	482d      	ldr	r0, [pc, #180]	; (8000cb8 <main+0x150>)
 8000c02:	f005 f853 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000c06:	2100      	movs	r1, #0
 8000c08:	482c      	ldr	r0, [pc, #176]	; (8000cbc <main+0x154>)
 8000c0a:	f005 f84f 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000c0e:	2104      	movs	r1, #4
 8000c10:	482a      	ldr	r0, [pc, #168]	; (8000cbc <main+0x154>)
 8000c12:	f005 f84b 	bl	8005cac <HAL_TIM_PWM_Start>

  /* Right Back Theta , Alpha  , Gamma				*/
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000c16:	2108      	movs	r1, #8
 8000c18:	4828      	ldr	r0, [pc, #160]	; (8000cbc <main+0x154>)
 8000c1a:	f005 f847 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000c1e:	210c      	movs	r1, #12
 8000c20:	4826      	ldr	r0, [pc, #152]	; (8000cbc <main+0x154>)
 8000c22:	f005 f843 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000c26:	2100      	movs	r1, #0
 8000c28:	4822      	ldr	r0, [pc, #136]	; (8000cb4 <main+0x14c>)
 8000c2a:	f005 f83f 	bl	8005cac <HAL_TIM_PWM_Start>

  /* Left Back Theta , Alpha  , Gamma				*/
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4820      	ldr	r0, [pc, #128]	; (8000cb4 <main+0x14c>)
 8000c32:	f005 f83b 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000c36:	2100      	movs	r1, #0
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <main+0x150>)
 8000c3a:	f005 f837 	bl	8005cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000c3e:	2104      	movs	r1, #4
 8000c40:	481d      	ldr	r0, [pc, #116]	; (8000cb8 <main+0x150>)
 8000c42:	f005 f833 	bl	8005cac <HAL_TIM_PWM_Start>

  if(HAL_UART_Transmit_IT(&huart1, (uint8_t *)Uart_continue_command, strlen(Uart_continue_command))!=HAL_OK)
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <main+0x158>)
 8000c48:	681c      	ldr	r4, [r3, #0]
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <main+0x158>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fa7e 	bl	8000150 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <main+0x13c>)
 8000c5e:	f005 ff1b 	bl	8006a98 <HAL_UART_Transmit_IT>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <main+0x104>
  {
	  Error_Handler();
 8000c68:	f000 fdcc 	bl	8001804 <Error_Handler>
  }


  HAL_Delay(100);
 8000c6c:	2064      	movs	r0, #100	; 0x64
 8000c6e:	f001 fb2b 	bl	80022c8 <HAL_Delay>
   *
  */


/*------- ZAMAN KESMESİNİ BAŞLATMA -------*/
  HAL_TIM_Base_Start_IT(&htim4);
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <main+0x15c>)
 8000c74:	f004 ff70 	bl	8005b58 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	for(int i=0;i<12;i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	e00a      	b.n	8000c94 <main+0x12c>
	{
		Servo_go(i,servo_deneme_ofset[i]);
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <main+0x160>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c86:	4619      	mov	r1, r3
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 fd4b 	bl	8001724 <Servo_go>
	for(int i=0;i<12;i++)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3301      	adds	r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b0b      	cmp	r3, #11
 8000c98:	ddf1      	ble.n	8000c7e <main+0x116>
	}
	HAL_Delay(1000);
 8000c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9e:	f001 fb13 	bl	80022c8 <HAL_Delay>
	for(int i=0;i<12;i++)
 8000ca2:	e7e9      	b.n	8000c78 <main+0x110>
 8000ca4:	200005b0 	.word	0x200005b0
 8000ca8:	20000030 	.word	0x20000030
 8000cac:	20000634 	.word	0x20000634
 8000cb0:	20000568 	.word	0x20000568
 8000cb4:	200006d4 	.word	0x200006d4
 8000cb8:	20000504 	.word	0x20000504
 8000cbc:	20000648 	.word	0x20000648
 8000cc0:	20000034 	.word	0x20000034
 8000cc4:	200002f8 	.word	0x200002f8
 8000cc8:	20000000 	.word	0x20000000

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	2228      	movs	r2, #40	; 0x28
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f006 fa79 	bl	80071d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 f86e 	bl	8004e04 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d2e:	f000 fd69 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 fad8 	bl	8005304 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d5a:	f000 fd53 	bl	8001804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d66:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 fc66 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d76:	f000 fd45 	bl	8001804 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3750      	adds	r7, #80	; 0x50
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000d96:	4a36      	ldr	r2, [pc, #216]	; (8000e70 <MX_ADC1_Init+0xec>)
 8000d98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000db0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc2:	482a      	ldr	r0, [pc, #168]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000dc4:	f001 faa2 	bl	800230c <HAL_ADC_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000dce:	f000 fd19 	bl	8001804 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4822      	ldr	r0, [pc, #136]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000de4:	f001 fc64 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fd09 	bl	8001804 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000df2:	2304      	movs	r3, #4
 8000df4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481b      	ldr	r0, [pc, #108]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000e00:	f001 fc56 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e0a:	f000 fcfb 	bl	8001804 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e12:	2303      	movs	r3, #3
 8000e14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000e1c:	f001 fc48 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e26:	f000 fced 	bl	8001804 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000e38:	f001 fc3a 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000e42:	f000 fcdf 	bl	8001804 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e46:	2307      	movs	r3, #7
 8000e48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000e54:	f001 fc2c 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e5e:	f000 fcd1 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000568 	.word	0x20000568
 8000e70:	40012400 	.word	0x40012400

08000e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <MX_I2C1_Init+0x54>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_I2C1_Init+0x58>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000eb2:	f002 fad7 	bl	8003464 <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f000 fca2 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000408 	.word	0x20000408
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	000186a0 	.word	0x000186a0

08000ed0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <MX_SPI2_Init+0x6c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000f1e:	220a      	movs	r2, #10
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000f24:	f004 fc40 	bl	80057a8 <HAL_SPI_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000f2e:	f000 fc69 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200002a0 	.word	0x200002a0
 8000f3c:	40003800 	.word	0x40003800

08000f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b096      	sub	sp, #88	; 0x58
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 f92a 	bl	80071d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000f80:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <MX_TIM1_Init+0x184>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 8000f84:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000f86:	2217      	movs	r2, #23
 8000f88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000f90:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000f92:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000faa:	4845      	ldr	r0, [pc, #276]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000fac:	f004 fd85 	bl	8005aba <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fb6:	f000 fc25 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	483e      	ldr	r0, [pc, #248]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000fc8:	f005 f8d8 	bl	800617c <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fd2:	f000 fc17 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd6:	483a      	ldr	r0, [pc, #232]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000fd8:	f004 fe10 	bl	8005bfc <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fe2:	f000 fc0f 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4832      	ldr	r0, [pc, #200]	; (80010c0 <MX_TIM1_Init+0x180>)
 8000ff6:	f005 fc41 	bl	800687c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001000:	f000 fc00 	bl	8001804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	; 0x60
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <MX_TIM1_Init+0x180>)
 800102a:	f004 ffe9 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001034:	f000 fbe6 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	2204      	movs	r2, #4
 800103e:	4619      	mov	r1, r3
 8001040:	481f      	ldr	r0, [pc, #124]	; (80010c0 <MX_TIM1_Init+0x180>)
 8001042:	f004 ffdd 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800104c:	f000 fbda 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	2208      	movs	r2, #8
 8001056:	4619      	mov	r1, r3
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <MX_TIM1_Init+0x180>)
 800105a:	f004 ffd1 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001064:	f000 fbce 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	220c      	movs	r2, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4813      	ldr	r0, [pc, #76]	; (80010c0 <MX_TIM1_Init+0x180>)
 8001072:	f004 ffc5 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800107c:	f000 fbc2 	bl	8001804 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001098:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_TIM1_Init+0x180>)
 80010a4:	f005 fc48 	bl	8006938 <HAL_TIMEx_ConfigBreakDeadTime>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80010ae:	f000 fba9 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_TIM1_Init+0x180>)
 80010b4:	f000 fe00 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 80010b8:	bf00      	nop
 80010ba:	3758      	adds	r7, #88	; 0x58
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000648 	.word	0x20000648
 80010c4:	40012c00 	.word	0x40012c00

080010c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f8:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <MX_TIM2_Init+0x128>)
 80010fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8001100:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <MX_TIM2_Init+0x128>)
 8001102:	2217      	movs	r2, #23
 8001104:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <MX_TIM2_Init+0x128>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <MX_TIM2_Init+0x128>)
 800110e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001112:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <MX_TIM2_Init+0x128>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <MX_TIM2_Init+0x128>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001120:	4833      	ldr	r0, [pc, #204]	; (80011f0 <MX_TIM2_Init+0x128>)
 8001122:	f004 fcca 	bl	8005aba <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800112c:	f000 fb6a 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113a:	4619      	mov	r1, r3
 800113c:	482c      	ldr	r0, [pc, #176]	; (80011f0 <MX_TIM2_Init+0x128>)
 800113e:	f005 f81d 	bl	800617c <HAL_TIM_ConfigClockSource>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001148:	f000 fb5c 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800114c:	4828      	ldr	r0, [pc, #160]	; (80011f0 <MX_TIM2_Init+0x128>)
 800114e:	f004 fd55 	bl	8005bfc <HAL_TIM_PWM_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001158:	f000 fb54 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	4619      	mov	r1, r3
 800116a:	4821      	ldr	r0, [pc, #132]	; (80011f0 <MX_TIM2_Init+0x128>)
 800116c:	f005 fb86 	bl	800687c <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001176:	f000 fb45 	bl	8001804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117a:	2360      	movs	r3, #96	; 0x60
 800117c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <MX_TIM2_Init+0x128>)
 8001192:	f004 ff35 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800119c:	f000 fb32 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2204      	movs	r2, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_TIM2_Init+0x128>)
 80011a8:	f004 ff2a 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80011b2:	f000 fb27 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2208      	movs	r2, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM2_Init+0x128>)
 80011be:	f004 ff1f 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80011c8:	f000 fb1c 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	220c      	movs	r2, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM2_Init+0x128>)
 80011d4:	f004 ff14 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80011de:	f000 fb11 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM2_Init+0x128>)
 80011e4:	f000 fd68 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200006d4 	.word	0x200006d4

080011f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001224:	4b3d      	ldr	r3, [pc, #244]	; (800131c <MX_TIM3_Init+0x128>)
 8001226:	4a3e      	ldr	r2, [pc, #248]	; (8001320 <MX_TIM3_Init+0x12c>)
 8001228:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <MX_TIM3_Init+0x128>)
 800122c:	2217      	movs	r2, #23
 800122e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <MX_TIM3_Init+0x128>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <MX_TIM3_Init+0x128>)
 8001238:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800123c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <MX_TIM3_Init+0x128>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <MX_TIM3_Init+0x128>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124a:	4834      	ldr	r0, [pc, #208]	; (800131c <MX_TIM3_Init+0x128>)
 800124c:	f004 fc35 	bl	8005aba <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001256:	f000 fad5 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001264:	4619      	mov	r1, r3
 8001266:	482d      	ldr	r0, [pc, #180]	; (800131c <MX_TIM3_Init+0x128>)
 8001268:	f004 ff88 	bl	800617c <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001272:	f000 fac7 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001276:	4829      	ldr	r0, [pc, #164]	; (800131c <MX_TIM3_Init+0x128>)
 8001278:	f004 fcc0 	bl	8005bfc <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001282:	f000 fabf 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4619      	mov	r1, r3
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <MX_TIM3_Init+0x128>)
 8001296:	f005 faf1 	bl	800687c <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012a0:	f000 fab0 	bl	8001804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	; 0x60
 80012a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4818      	ldr	r0, [pc, #96]	; (800131c <MX_TIM3_Init+0x128>)
 80012bc:	f004 fea0 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012c6:	f000 fa9d 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2204      	movs	r2, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <MX_TIM3_Init+0x128>)
 80012d2:	f004 fe95 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012dc:	f000 fa92 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2208      	movs	r2, #8
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_TIM3_Init+0x128>)
 80012e8:	f004 fe8a 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80012f2:	f000 fa87 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	220c      	movs	r2, #12
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM3_Init+0x128>)
 80012fe:	f004 fe7f 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001308:	f000 fa7c 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM3_Init+0x128>)
 800130e:	f000 fcd3 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	; 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000504 	.word	0x20000504
 8001320:	40000400 	.word	0x40000400

08001324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM4_Init+0x94>)
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <MX_TIM4_Init+0x98>)
 8001344:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 359;
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_TIM4_Init+0x94>)
 8001348:	f240 1267 	movw	r2, #359	; 0x167
 800134c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_TIM4_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM4_Init+0x94>)
 8001356:	f241 3287 	movw	r2, #4999	; 0x1387
 800135a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_TIM4_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM4_Init+0x94>)
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_TIM4_Init+0x94>)
 800136a:	f004 fba6 	bl	8005aba <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 fa46 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM4_Init+0x94>)
 8001386:	f004 fef9 	bl	800617c <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 fa38 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM4_Init+0x94>)
 80013a2:	f005 fa6b 	bl	800687c <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 fa2a 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200002f8 	.word	0x200002f8
 80013bc:	40000800 	.word	0x40000800

080013c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_USART1_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013f8:	f005 fb01 	bl	80069fe <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 f9ff 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200005b0 	.word	0x200005b0
 8001410:	40013800 	.word	0x40013800

08001414 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART3_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART3_UART_Init+0x4c>)
 800144c:	f005 fad7 	bl	80069fe <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f9d5 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000384 	.word	0x20000384
 8001464:	40004800 	.word	0x40004800

08001468 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_DMA_Init+0x98>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <MX_DMA_Init+0x98>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_DMA_Init+0x98>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200b      	movs	r0, #11
 800148c:	f001 fbd1 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001490:	200b      	movs	r0, #11
 8001492:	f001 fbea 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	200c      	movs	r0, #12
 800149c:	f001 fbc9 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014a0:	200c      	movs	r0, #12
 80014a2:	f001 fbe2 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200d      	movs	r0, #13
 80014ac:	f001 fbc1 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014b0:	200d      	movs	r0, #13
 80014b2:	f001 fbda 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	200e      	movs	r0, #14
 80014bc:	f001 fbb9 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014c0:	200e      	movs	r0, #14
 80014c2:	f001 fbd2 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	200f      	movs	r0, #15
 80014cc:	f001 fbb1 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80014d0:	200f      	movs	r0, #15
 80014d2:	f001 fbca 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2010      	movs	r0, #16
 80014dc:	f001 fba9 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80014e0:	2010      	movs	r0, #16
 80014e2:	f001 fbc2 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2011      	movs	r0, #17
 80014ec:	f001 fba1 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014f0:	2011      	movs	r0, #17
 80014f2:	f001 fbba 	bl	8002c6a <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <MX_GPIO_Init+0xb8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <MX_GPIO_Init+0xb8>)
 800151e:	f043 0320 	orr.w	r3, r3, #32
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b25      	ldr	r3, [pc, #148]	; (80015bc <MX_GPIO_Init+0xb8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <MX_GPIO_Init+0xb8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <MX_GPIO_Init+0xb8>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_GPIO_Init+0xb8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_GPIO_Init+0xb8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <MX_GPIO_Init+0xb8>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_GPIO_Init+0xb8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_CSN_GPIO_Port, Pin_CSN_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001566:	4816      	ldr	r0, [pc, #88]	; (80015c0 <MX_GPIO_Init+0xbc>)
 8001568:	f001 ff64 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_CE_GPIO_Port, Pin_CE_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001572:	4814      	ldr	r0, [pc, #80]	; (80015c4 <MX_GPIO_Init+0xc0>)
 8001574:	f001 ff5e 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Pin_CSN_Pin */
  GPIO_InitStruct.Pin = Pin_CSN_Pin;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2302      	movs	r3, #2
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_CSN_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4619      	mov	r1, r3
 8001590:	480b      	ldr	r0, [pc, #44]	; (80015c0 <MX_GPIO_Init+0xbc>)
 8001592:	f001 fdf5 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_CE_Pin */
  GPIO_InitStruct.Pin = Pin_CE_Pin;
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_CE_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_GPIO_Init+0xc0>)
 80015b0:	f001 fde6 	bl	8003180 <HAL_GPIO_Init>

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010c00 	.word	0x40010c00
 80015c4:	40010800 	.word	0x40010800

080015c8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	/*
	 * Ten micro second timer interrupt  --> Data transmit time....
	 *
	 */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	  {
		 //GPS veri gönderimi
	  }
	 */

}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	/*		variable   rxBuffer1[64],rxBuffer3[64];					*/
	  if (huart->Instance == USART1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_UART_RxCpltCallback+0x2c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d107      	bne.n	800160e <HAL_UART_RxCpltCallback+0x22>
	  {
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer1, 64);
 80015fe:	2240      	movs	r2, #64	; 0x40
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <HAL_UART_RxCpltCallback+0x30>)
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <HAL_UART_RxCpltCallback+0x34>)
 8001604:	f005 fa8c 	bl	8006b20 <HAL_UART_Receive_IT>
		  receive_data_division(rxBuffer1);
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <HAL_UART_RxCpltCallback+0x30>)
 800160a:	f000 f80b 	bl	8001624 <receive_data_division>
		  *
		  */

	  }

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40013800 	.word	0x40013800
 800161c:	200007bc 	.word	0x200007bc
 8001620:	200005b0 	.word	0x200005b0

08001624 <receive_data_division>:
	HAL_UART_Transmit_IT(&huart1,(uint8_t *)str, strlen(str));

}

void receive_data_division(char *str)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	 * DATA EXAMPLE...
	 *
    char str[]="<1001#1002#1003#1004#1005#1006#1007#1008#1009#1010#1011#1012#r>";
    */
    char *ptr;
    if(str[0] == startMarker && str[strlen(str)-1]==endMarker)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	223c      	movs	r2, #60	; 0x3c
 8001632:	4293      	cmp	r3, r2
 8001634:	d16c      	bne.n	8001710 <receive_data_division+0xec>
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7fe fd8a 	bl	8000150 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	3b01      	subs	r3, #1
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	223e      	movs	r2, #62	; 0x3e
 8001648:	4293      	cmp	r3, r2
 800164a:	d161      	bne.n	8001710 <receive_data_division+0xec>
    {
        str[0]=' ';
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	701a      	strb	r2, [r3, #0]
        length = strlen(str);
        printf( " %d\n", length);
        printf( " %d\n", str[0]);
        */

        if(str[strlen(str)-2]==write)
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe fd7c 	bl	8000150 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	3b02      	subs	r3, #2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	226f      	movs	r2, #111	; 0x6f
 8001664:	4293      	cmp	r3, r2
 8001666:	d122      	bne.n	80016ae <receive_data_division+0x8a>
        {
/*            printf("MOTOR KOMUT İŞLEMİ\n");				*/
            int i=0;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
            ptr = strtok(str,&spaceMarker);
 800166c:	492a      	ldr	r1, [pc, #168]	; (8001718 <receive_data_division+0xf4>)
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f006 fe02 	bl	8008278 <strtok>
 8001674:	60f8      	str	r0, [r7, #12]
            pulse[i]=atoi(ptr);
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f005 fd72 	bl	8007160 <atoi>
 800167c:	4601      	mov	r1, r0
 800167e:	4a27      	ldr	r2, [pc, #156]	; (800171c <receive_data_division+0xf8>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
/*            printf( " %d\n", pulse[i]);					*/
            while(1)
            {
            i++;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
            ptr = strtok(NULL,&spaceMarker);
 800168c:	4922      	ldr	r1, [pc, #136]	; (8001718 <receive_data_division+0xf4>)
 800168e:	2000      	movs	r0, #0
 8001690:	f006 fdf2 	bl	8008278 <strtok>
 8001694:	60f8      	str	r0, [r7, #12]
            if(ptr==NULL) break;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d036      	beq.n	800170a <receive_data_division+0xe6>
            pulse[i]=atoi(ptr);
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f005 fd5f 	bl	8007160 <atoi>
 80016a2:	4601      	mov	r1, r0
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <receive_data_division+0xf8>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            i++;
 80016ac:	e7eb      	b.n	8001686 <receive_data_division+0x62>
/*            printf( " %d\n", pulse[i]);  					*/
            }
        }
        else if(str[strlen(str)-2]==read)
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7fe fd4e 	bl	8000150 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	3b02      	subs	r3, #2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2272      	movs	r2, #114	; 0x72
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d125      	bne.n	8001710 <receive_data_division+0xec>
        {
/*            printf("MOTOR OFSET İŞLEMİ\n");				*/
            int i=0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
            ptr = strtok(str,&spaceMarker);
 80016c8:	4913      	ldr	r1, [pc, #76]	; (8001718 <receive_data_division+0xf4>)
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f006 fdd4 	bl	8008278 <strtok>
 80016d0:	60f8      	str	r0, [r7, #12]
            ofset_pulse[i]=atoi(ptr);
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f005 fd44 	bl	8007160 <atoi>
 80016d8:	4601      	mov	r1, r0
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <receive_data_division+0xfc>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
/*            printf( " %d\n", ofset_pulse[i]);				*/
            while(1)
            {
            i++;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	3301      	adds	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
            ptr = strtok(NULL,&spaceMarker);
 80016e8:	490b      	ldr	r1, [pc, #44]	; (8001718 <receive_data_division+0xf4>)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f006 fdc4 	bl	8008278 <strtok>
 80016f0:	60f8      	str	r0, [r7, #12]
            if(ptr==NULL) break;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00a      	beq.n	800170e <receive_data_division+0xea>
            ofset_pulse[i]=atoi(ptr);
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f005 fd31 	bl	8007160 <atoi>
 80016fe:	4601      	mov	r1, r0
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <receive_data_division+0xfc>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            i++;
 8001708:	e7eb      	b.n	80016e2 <receive_data_division+0xbe>
            if(ptr==NULL) break;
 800170a:	bf00      	nop
 800170c:	e000      	b.n	8001710 <receive_data_division+0xec>
            if(ptr==NULL) break;
 800170e:	bf00      	nop
            }
        }
    }


}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	08009b42 	.word	0x08009b42
 800171c:	20000234 	.word	0x20000234
 8001720:	20000264 	.word	0x20000264

08001724 <Servo_go>:

void Servo_go(int servo,int pwm)
{		/*			RF SERVO Theta , Alpha , Gamma				*/
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
		 if(servo==0)		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,pwm);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d104      	bne.n	800173e <Servo_go+0x1a>
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <Servo_go+0xd4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
	else if(servo==8)		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
		/*			LB SERVO Theta , Alpha , Gamma				*/
	else if(servo==9)		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pwm);
	else if(servo==10)		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm);
	else if(servo==11)		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwm);
}
 800173c:	e056      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==1) 		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,pwm);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d104      	bne.n	800174e <Servo_go+0x2a>
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <Servo_go+0xd4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800174c:	e04e      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==2)		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d104      	bne.n	800175e <Servo_go+0x3a>
 8001754:	4b29      	ldr	r3, [pc, #164]	; (80017fc <Servo_go+0xd8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800175c:	e046      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==3)		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,pwm);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d104      	bne.n	800176e <Servo_go+0x4a>
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <Servo_go+0xd8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800176c:	e03e      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==4)		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwm);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d104      	bne.n	800177e <Servo_go+0x5a>
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <Servo_go+0xdc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800177c:	e036      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==5)		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pwm);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d104      	bne.n	800178e <Servo_go+0x6a>
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <Servo_go+0xdc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800178c:	e02e      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==6)		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pwm);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b06      	cmp	r3, #6
 8001792:	d104      	bne.n	800179e <Servo_go+0x7a>
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <Servo_go+0xdc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800179c:	e026      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==7)		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,pwm);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b07      	cmp	r3, #7
 80017a2:	d104      	bne.n	80017ae <Servo_go+0x8a>
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <Servo_go+0xdc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017ac:	e01e      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==8)		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d104      	bne.n	80017be <Servo_go+0x9a>
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <Servo_go+0xd4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017bc:	e016      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==9)		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pwm);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	d104      	bne.n	80017ce <Servo_go+0xaa>
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <Servo_go+0xd4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017cc:	e00e      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==10)		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0a      	cmp	r3, #10
 80017d2:	d104      	bne.n	80017de <Servo_go+0xba>
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <Servo_go+0xd8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017dc:	e006      	b.n	80017ec <Servo_go+0xc8>
	else if(servo==11)		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwm);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0b      	cmp	r3, #11
 80017e2:	d103      	bne.n	80017ec <Servo_go+0xc8>
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <Servo_go+0xd8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200006d4 	.word	0x200006d4
 80017fc:	20000504 	.word	0x20000504
 8001800:	20000648 	.word	0x20000648

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_MspInit+0x5c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_MspInit+0x5c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6193      	str	r3, [r2, #24]
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_MspInit+0x5c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_MspInit+0x5c>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_MspInit+0x5c>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_MspInit+0x5c>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_MspInit+0x60>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_MspInit+0x60>)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000

08001874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a28      	ldr	r2, [pc, #160]	; (8001930 <HAL_ADC_MspInit+0xbc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d149      	bne.n	8001928 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_ADC_MspInit+0xc0>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a26      	ldr	r2, [pc, #152]	; (8001934 <HAL_ADC_MspInit+0xc0>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_ADC_MspInit+0xc0>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_ADC_MspInit+0xc0>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_ADC_MspInit+0xc0>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_ADC_MspInit+0xc0>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = Pil_V__Pin|RF_FOOT_Pin|LF_FOOT_Pin|RB_FOOT_Pin 
 80018c4:	23f1      	movs	r3, #241	; 0xf1
 80018c6:	613b      	str	r3, [r7, #16]
                          |LB_FOOT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c8:	2303      	movs	r3, #3
 80018ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	4819      	ldr	r0, [pc, #100]	; (8001938 <HAL_ADC_MspInit+0xc4>)
 80018d4:	f001 fc54 	bl	8003180 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_ADC_MspInit+0xc8>)
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_ADC_MspInit+0xcc>)
 80018dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_ADC_MspInit+0xc8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_ADC_MspInit+0xc8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_ADC_MspInit+0xc8>)
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_ADC_MspInit+0xc8>)
 80018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_ADC_MspInit+0xc8>)
 80018fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_ADC_MspInit+0xc8>)
 8001902:	2220      	movs	r2, #32
 8001904:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_ADC_MspInit+0xc8>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <HAL_ADC_MspInit+0xc8>)
 800190e:	f001 f9c7 	bl	8002ca0 <HAL_DMA_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001918:	f7ff ff74 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_ADC_MspInit+0xc8>)
 8001920:	621a      	str	r2, [r3, #32]
 8001922:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_ADC_MspInit+0xc8>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40012400 	.word	0x40012400
 8001934:	40021000 	.word	0x40021000
 8001938:	40010800 	.word	0x40010800
 800193c:	200005f0 	.word	0x200005f0
 8001940:	40020008 	.word	0x40020008

08001944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a47      	ldr	r2, [pc, #284]	; (8001a7c <HAL_I2C_MspInit+0x138>)
 8001960:	4293      	cmp	r3, r2
 8001962:	f040 8087 	bne.w	8001a74 <HAL_I2C_MspInit+0x130>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_I2C_MspInit+0x13c>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	4a45      	ldr	r2, [pc, #276]	; (8001a80 <HAL_I2C_MspInit+0x13c>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6193      	str	r3, [r2, #24]
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <HAL_I2C_MspInit+0x13c>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 800197e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001984:	2312      	movs	r3, #18
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	483c      	ldr	r0, [pc, #240]	; (8001a84 <HAL_I2C_MspInit+0x140>)
 8001994:	f001 fbf4 	bl	8003180 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_I2C_MspInit+0x144>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <HAL_I2C_MspInit+0x144>)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_I2C_MspInit+0x13c>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <HAL_I2C_MspInit+0x13c>)
 80019ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019be:	61d3      	str	r3, [r2, #28]
 80019c0:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_I2C_MspInit+0x13c>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019ce:	4a30      	ldr	r2, [pc, #192]	; (8001a90 <HAL_I2C_MspInit+0x14c>)
 80019d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019f0:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019fc:	4823      	ldr	r0, [pc, #140]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 80019fe:	f001 f94f 	bl	8002ca0 <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 8001a08:	f7ff fefc 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 8001a10:	639a      	str	r2, [r3, #56]	; 0x38
 8001a12:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_I2C_MspInit+0x148>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_I2C_MspInit+0x154>)
 8001a1c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a20:	2210      	movs	r2, #16
 8001a22:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a4a:	f001 f929 	bl	8002ca0 <HAL_DMA_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 8001a54:	f7ff fed6 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_I2C_MspInit+0x150>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2101      	movs	r1, #1
 8001a68:	201f      	movs	r0, #31
 8001a6a:	f001 f8e2 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a6e:	201f      	movs	r0, #31
 8001a70:	f001 f8fb 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	20000690 	.word	0x20000690
 8001a90:	40020080 	.word	0x40020080
 8001a94:	200003c4 	.word	0x200003c4
 8001a98:	4002006c 	.word	0x4002006c

08001a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a49      	ldr	r2, [pc, #292]	; (8001bdc <HAL_SPI_MspInit+0x140>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	f040 808a 	bne.w	8001bd2 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_SPI_MspInit+0x144>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <HAL_SPI_MspInit+0x144>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b45      	ldr	r3, [pc, #276]	; (8001be0 <HAL_SPI_MspInit+0x144>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_SPI_MspInit+0x144>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a41      	ldr	r2, [pc, #260]	; (8001be0 <HAL_SPI_MspInit+0x144>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <HAL_SPI_MspInit+0x144>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001aee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4619      	mov	r1, r3
 8001b02:	4838      	ldr	r0, [pc, #224]	; (8001be4 <HAL_SPI_MspInit+0x148>)
 8001b04:	f001 fb3c 	bl	8003180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4831      	ldr	r0, [pc, #196]	; (8001be4 <HAL_SPI_MspInit+0x148>)
 8001b1e:	f001 fb2f 	bl	8003180 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b24:	4a31      	ldr	r2, [pc, #196]	; (8001bec <HAL_SPI_MspInit+0x150>)
 8001b26:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b40:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b48:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b56:	4824      	ldr	r0, [pc, #144]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b58:	f001 f8a2 	bl	8002ca0 <HAL_DMA_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001b62:	f7ff fe4f 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b6c:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_SPI_MspInit+0x14c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001b74:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_SPI_MspInit+0x158>)
 8001b76:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b90:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b98:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ba6:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001ba8:	f001 f87a 	bl	8002ca0 <HAL_DMA_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_SPI_MspInit+0x11a>
    {
      Error_Handler();
 8001bb2:	f7ff fe27 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001bba:	649a      	str	r2, [r3, #72]	; 0x48
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_SPI_MspInit+0x154>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	2024      	movs	r0, #36	; 0x24
 8001bc8:	f001 f833 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bcc:	2024      	movs	r0, #36	; 0x24
 8001bce:	f001 f84c 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40003800 	.word	0x40003800
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	2000045c 	.word	0x2000045c
 8001bec:	40020044 	.word	0x40020044
 8001bf0:	20000778 	.word	0x20000778
 8001bf4:	40020058 	.word	0x40020058

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10c      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a27      	ldr	r2, [pc, #156]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c22:	e03c      	b.n	8001c9e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
}
 8001c46:	e02a      	b.n	8001c9e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_TIM_Base_MspInit+0xb8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10c      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	e018      	b.n	8001c9e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d113      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	201e      	movs	r0, #30
 8001c94:	f000 ffcd 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c98:	201e      	movs	r0, #30
 8001c9a:	f000 ffe6 	bl	8002c6a <HAL_NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40012c00 	.word	0x40012c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	; 0x30
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_TIM_MspPostInit+0x14c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d119      	bne.n	8001d0c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = LF_L2_Pin|LF_L3_Pin|RB_L1_Pin|RB_L2_Pin;
 8001cf0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	4619      	mov	r1, r3
 8001d04:	4841      	ldr	r0, [pc, #260]	; (8001e0c <HAL_TIM_MspPostInit+0x154>)
 8001d06:	f001 fa3b 	bl	8003180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d0a:	e077      	b.n	8001dfc <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d14:	d143      	bne.n	8001d9e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	4a3b      	ldr	r2, [pc, #236]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6193      	str	r3, [r2, #24]
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6193      	str	r3, [r2, #24]
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RF_L1_Pin|RF_L2_Pin|RB_L3_Pin;
 8001d46:	f248 030c 	movw	r3, #32780	; 0x800c
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2302      	movs	r3, #2
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	482c      	ldr	r0, [pc, #176]	; (8001e0c <HAL_TIM_MspPostInit+0x154>)
 8001d5c:	f001 fa10 	bl	8003180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LB_L1_Pin;
 8001d60:	2308      	movs	r3, #8
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LB_L1_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	4619      	mov	r1, r3
 8001d72:	4827      	ldr	r0, [pc, #156]	; (8001e10 <HAL_TIM_MspPostInit+0x158>)
 8001d74:	f001 fa04 	bl	8003180 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_TIM_MspPostInit+0x15c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_TIM_MspPostInit+0x15c>)
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	6053      	str	r3, [r2, #4]
}
 8001d9c:	e02e      	b.n	8001dfc <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_TIM_MspPostInit+0x160>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d129      	bne.n	8001dfc <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_TIM_MspPostInit+0x150>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RF_L3_Pin|LF_L1_Pin|LB_L2_Pin|LB_L3_Pin;
 8001dc0:	2333      	movs	r3, #51	; 0x33
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480f      	ldr	r0, [pc, #60]	; (8001e10 <HAL_TIM_MspPostInit+0x158>)
 8001dd4:	f001 f9d4 	bl	8003180 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_TIM_MspPostInit+0x15c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_TIM_MspPostInit+0x15c>)
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	6053      	str	r3, [r2, #4]
}
 8001dfc:	bf00      	nop
 8001dfe:	3730      	adds	r7, #48	; 0x30
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40012c00 	.word	0x40012c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40000400 	.word	0x40000400

08001e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a6d      	ldr	r2, [pc, #436]	; (8001fec <HAL_UART_MspInit+0x1d0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d146      	bne.n	8001eca <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a6b      	ldr	r2, [pc, #428]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	6193      	str	r3, [r2, #24]
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = Raspberry_TX_Pin;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(Raspberry_TX_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	485d      	ldr	r0, [pc, #372]	; (8001ff4 <HAL_UART_MspInit+0x1d8>)
 8001e80:	f001 f97e 	bl	8003180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Raspberry_RX_Pin;
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Raspberry_RX_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	4857      	ldr	r0, [pc, #348]	; (8001ff4 <HAL_UART_MspInit+0x1d8>)
 8001e98:	f001 f972 	bl	8003180 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_UART_MspInit+0x1dc>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb2:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <HAL_UART_MspInit+0x1dc>)
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2025      	movs	r0, #37	; 0x25
 8001ebe:	f000 feb8 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ec2:	2025      	movs	r0, #37	; 0x25
 8001ec4:	f000 fed1 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ec8:	e08b      	b.n	8001fe2 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_UART_MspInit+0x1e0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	f040 8086 	bne.w	8001fe2 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a45      	ldr	r2, [pc, #276]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_UART_MspInit+0x1d4>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4836      	ldr	r0, [pc, #216]	; (8001ff4 <HAL_UART_MspInit+0x1d8>)
 8001f1c:	f001 f930 	bl	8003180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	4619      	mov	r1, r3
 8001f34:	482f      	ldr	r0, [pc, #188]	; (8001ff4 <HAL_UART_MspInit+0x1d8>)
 8001f36:	f001 f923 	bl	8003180 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f3c:	4a31      	ldr	r2, [pc, #196]	; (8002004 <HAL_UART_MspInit+0x1e8>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f6a:	4825      	ldr	r0, [pc, #148]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f6c:	f000 fe98 	bl	8002ca0 <HAL_DMA_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8001f76:	f7ff fc45 	bl	8001804 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f80:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_UART_MspInit+0x1e4>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_UART_MspInit+0x1f0>)
 8001f8a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001f8e:	2210      	movs	r2, #16
 8001f90:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001fb6:	4814      	ldr	r0, [pc, #80]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001fb8:	f000 fe72 	bl	8002ca0 <HAL_DMA_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8001fc2:	f7ff fc1f 	bl	8001804 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HAL_UART_MspInit+0x1ec>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	2027      	movs	r0, #39	; 0x27
 8001fd8:	f000 fe2b 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fdc:	2027      	movs	r0, #39	; 0x27
 8001fde:	f000 fe44 	bl	8002c6a <HAL_NVIC_EnableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3730      	adds	r7, #48	; 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010c00 	.word	0x40010c00
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40004800 	.word	0x40004800
 8002000:	20000340 	.word	0x20000340
 8002004:	40020030 	.word	0x40020030
 8002008:	200004c0 	.word	0x200004c0
 800200c:	4002001c 	.word	0x4002001c

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <HardFault_Handler+0x4>

08002022 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <MemManage_Handler+0x4>

08002028 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <BusFault_Handler+0x4>

0800202e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <UsageFault_Handler+0x4>

08002034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f000 f918 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA1_Channel1_IRQHandler+0x10>)
 800206a:	f000 ff49 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200005f0 	.word	0x200005f0

08002078 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA1_Channel2_IRQHandler+0x10>)
 800207e:	f000 ff3f 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200004c0 	.word	0x200004c0

0800208c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA1_Channel3_IRQHandler+0x10>)
 8002092:	f000 ff35 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000340 	.word	0x20000340

080020a0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <DMA1_Channel4_IRQHandler+0x10>)
 80020a6:	f000 ff2b 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000045c 	.word	0x2000045c

080020b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA1_Channel5_IRQHandler+0x10>)
 80020ba:	f000 ff21 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000778 	.word	0x20000778

080020c8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA1_Channel6_IRQHandler+0x10>)
 80020ce:	f000 ff17 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200003c4 	.word	0x200003c4

080020dc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <DMA1_Channel7_IRQHandler+0x10>)
 80020e2:	f000 ff0d 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000690 	.word	0x20000690

080020f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <TIM4_IRQHandler+0x10>)
 80020f6:	f003 fe7b 	bl	8005df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200002f8 	.word	0x200002f8

08002104 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <I2C1_EV_IRQHandler+0x10>)
 800210a:	f001 fae3 	bl	80036d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000408 	.word	0x20000408

08002118 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <SPI2_IRQHandler+0x10>)
 800211e:	f003 fbc7 	bl	80058b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200002a0 	.word	0x200002a0

0800212c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <USART1_IRQHandler+0x10>)
 8002132:	f004 fd49 	bl	8006bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200005b0 	.word	0x200005b0

08002140 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <USART3_IRQHandler+0x10>)
 8002146:	f004 fd3f 	bl	8006bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000384 	.word	0x20000384

08002154 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <_sbrk+0x50>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <_sbrk+0x16>
		heap_end = &end;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <_sbrk+0x50>)
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <_sbrk+0x54>)
 8002168:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <_sbrk+0x50>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <_sbrk+0x50>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	466a      	mov	r2, sp
 800217a:	4293      	cmp	r3, r2
 800217c:	d907      	bls.n	800218e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800217e:	f004 fff3 	bl	8007168 <__errno>
 8002182:	4602      	mov	r2, r0
 8002184:	230c      	movs	r3, #12
 8002186:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	e006      	b.n	800219c <_sbrk+0x48>
	}

	heap_end += incr;
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <_sbrk+0x50>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <_sbrk+0x50>)
 8002198:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000294 	.word	0x20000294
 80021a8:	20000808 	.word	0x20000808

080021ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021ba:	e003      	b.n	80021c4 <LoopCopyDataInit>

080021bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021c2:	3104      	adds	r1, #4

080021c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021c4:	480a      	ldr	r0, [pc, #40]	; (80021f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021cc:	d3f6      	bcc.n	80021bc <CopyDataInit>
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021d0:	e002      	b.n	80021d8 <LoopFillZerobss>

080021d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021d4:	f842 3b04 	str.w	r3, [r2], #4

080021d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021dc:	d3f9      	bcc.n	80021d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021de:	f7ff ffe5 	bl	80021ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e2:	f004 ffc7 	bl	8007174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021e6:	f7fe fcbf 	bl	8000b68 <main>
  bx lr
 80021ea:	4770      	bx	lr
  ldr r3, =_sidata
 80021ec:	08009e68 	.word	0x08009e68
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021f4:	20000214 	.word	0x20000214
  ldr r2, =_sbss
 80021f8:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 80021fc:	20000804 	.word	0x20000804

08002200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC1_2_IRQHandler>
	...

08002204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_Init+0x28>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x28>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 fd01 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	2000      	movs	r0, #0
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff faf6 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fd19 	bl	8002c86 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 fce1 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000038 	.word	0x20000038
 8002288:	20000040 	.word	0x20000040
 800228c:	2000003c 	.word	0x2000003c

08002290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_IncTick+0x1c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_IncTick+0x20>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_IncTick+0x20>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000040 	.word	0x20000040
 80022b0:	200007fc 	.word	0x200007fc

080022b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <HAL_GetTick+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	200007fc 	.word	0x200007fc

080022c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff fff0 	bl	80022b4 <HAL_GetTick>
 80022d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d005      	beq.n	80022ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_Delay+0x40>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ee:	bf00      	nop
 80022f0:	f7ff ffe0 	bl	80022b4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8f7      	bhi.n	80022f0 <HAL_Delay+0x28>
  {
  }
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000040 	.word	0x20000040

0800230c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0be      	b.n	80024ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fa92 	bl	8001874 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 faf7 	bl	8002944 <ADC_ConversionStop_Disable>
 8002356:	4603      	mov	r3, r0
 8002358:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 8099 	bne.w	800249a <HAL_ADC_Init+0x18e>
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8095 	bne.w	800249a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002378:	f023 0302 	bic.w	r3, r3, #2
 800237c:	f043 0202 	orr.w	r2, r3, #2
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800238c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7b1b      	ldrb	r3, [r3, #12]
 8002392:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002394:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	4313      	orrs	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a4:	d003      	beq.n	80023ae <HAL_ADC_Init+0xa2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_ADC_Init+0xa8>
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	e000      	b.n	80023b6 <HAL_ADC_Init+0xaa>
 80023b4:	2300      	movs	r3, #0
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7d1b      	ldrb	r3, [r3, #20]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d119      	bne.n	80023f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7b1b      	ldrb	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	035a      	lsls	r2, r3, #13
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	e00b      	b.n	80023f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_ADC_Init+0x1a8>)
 8002414:	4013      	ands	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	430b      	orrs	r3, r1
 800241e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002428:	d003      	beq.n	8002432 <HAL_ADC_Init+0x126>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d104      	bne.n	800243c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	3b01      	subs	r3, #1
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	430a      	orrs	r2, r1
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_ADC_Init+0x1ac>)
 8002458:	4013      	ands	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d10b      	bne.n	8002478 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002476:	e018      	b.n	80024aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f023 0312 	bic.w	r3, r3, #18
 8002480:	f043 0210 	orr.w	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002498:	e007      	b.n	80024aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	ffe1f7fd 	.word	0xffe1f7fd
 80024b8:	ff1f0efe 	.word	0xff1f0efe

080024bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a64      	ldr	r2, [pc, #400]	; (8002664 <HAL_ADC_Start_DMA+0x1a8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_Start_DMA+0x24>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a63      	ldr	r2, [pc, #396]	; (8002668 <HAL_ADC_Start_DMA+0x1ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d106      	bne.n	80024ee <HAL_ADC_Start_DMA+0x32>
 80024e0:	4b60      	ldr	r3, [pc, #384]	; (8002664 <HAL_ADC_Start_DMA+0x1a8>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 80b3 	bne.w	8002654 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_Start_DMA+0x40>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e0ae      	b.n	800265a <HAL_ADC_Start_DMA+0x19e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9cb 	bl	80028a0 <ADC_Enable>
 800250a:	4603      	mov	r3, r0
 800250c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 809a 	bne.w	800264a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4e      	ldr	r2, [pc, #312]	; (8002668 <HAL_ADC_Start_DMA+0x1ac>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d105      	bne.n	8002540 <HAL_ADC_Start_DMA+0x84>
 8002534:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_ADC_Start_DMA+0x1a8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d115      	bne.n	800256c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	2b00      	cmp	r3, #0
 8002558:	d026      	beq.n	80025a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002562:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800256a:	e01d      	b.n	80025a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a39      	ldr	r2, [pc, #228]	; (8002664 <HAL_ADC_Start_DMA+0x1a8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_ADC_Start_DMA+0xd0>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a38      	ldr	r2, [pc, #224]	; (8002668 <HAL_ADC_Start_DMA+0x1ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d10d      	bne.n	80025a8 <HAL_ADC_Start_DMA+0xec>
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_ADC_Start_DMA+0x1a8>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	f023 0206 	bic.w	r2, r3, #6
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
 80025c0:	e002      	b.n	80025c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <HAL_ADC_Start_DMA+0x1b0>)
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <HAL_ADC_Start_DMA+0x1b4>)
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <HAL_ADC_Start_DMA+0x1b8>)
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0202 	mvn.w	r2, #2
 80025f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a18      	ldr	r0, [r3, #32]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	334c      	adds	r3, #76	; 0x4c
 800260c:	4619      	mov	r1, r3
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f000 fb9f 	bl	8002d54 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002620:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002624:	d108      	bne.n	8002638 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002634:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002636:	e00f      	b.n	8002658 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002646:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002648:	e006      	b.n	8002658 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002652:	e001      	b.n	8002658 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002658:	7dfb      	ldrb	r3, [r7, #23]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40012400 	.word	0x40012400
 8002668:	40012800 	.word	0x40012800
 800266c:	080029b9 	.word	0x080029b9
 8002670:	08002a35 	.word	0x08002a35
 8002674:	08002a51 	.word	0x08002a51

08002678 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x20>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0dc      	b.n	800288a <HAL_ADC_ConfigChannel+0x1da>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b06      	cmp	r3, #6
 80026de:	d81c      	bhi.n	800271a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b05      	subs	r3, #5
 80026f2:	221f      	movs	r2, #31
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4019      	ands	r1, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	3b05      	subs	r3, #5
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	635a      	str	r2, [r3, #52]	; 0x34
 8002718:	e03c      	b.n	8002794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d81c      	bhi.n	800275c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b23      	subs	r3, #35	; 0x23
 8002734:	221f      	movs	r2, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	4019      	ands	r1, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	3b23      	subs	r3, #35	; 0x23
 800274e:	fa00 f203 	lsl.w	r2, r0, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
 800275a:	e01b      	b.n	8002794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b41      	subs	r3, #65	; 0x41
 800276e:	221f      	movs	r2, #31
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	4019      	ands	r1, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b41      	subs	r3, #65	; 0x41
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b09      	cmp	r3, #9
 800279a:	d91c      	bls.n	80027d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68d9      	ldr	r1, [r3, #12]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	2207      	movs	r2, #7
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4019      	ands	r1, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6898      	ldr	r0, [r3, #8]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	3b1e      	subs	r3, #30
 80027c8:	fa00 f203 	lsl.w	r2, r0, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	e019      	b.n	800280a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	2207      	movs	r2, #7
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	4019      	ands	r1, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6898      	ldr	r0, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b10      	cmp	r3, #16
 8002810:	d003      	beq.n	800281a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002816:	2b11      	cmp	r3, #17
 8002818:	d132      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_ADC_ConfigChannel+0x1e4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d125      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d126      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002840:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b10      	cmp	r3, #16
 8002848:	d11a      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_ADC_ConfigChannel+0x1e8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_ADC_ConfigChannel+0x1ec>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9a      	lsrs	r2, r3, #18
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002860:	e002      	b.n	8002868 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3b01      	subs	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f9      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x1b2>
 800286e:	e007      	b.n	8002880 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40012400 	.word	0x40012400
 8002898:	20000038 	.word	0x20000038
 800289c:	431bde83 	.word	0x431bde83

080028a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d039      	beq.n	8002932 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <ADC_Enable+0x9c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <ADC_Enable+0xa0>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	0c9b      	lsrs	r3, r3, #18
 80028da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028dc:	e002      	b.n	80028e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f9      	bne.n	80028de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ea:	f7ff fce3 	bl	80022b4 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028f0:	e018      	b.n	8002924 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f2:	f7ff fcdf 	bl	80022b4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d911      	bls.n	8002924 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e007      	b.n	8002934 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d1df      	bne.n	80028f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000038 	.word	0x20000038
 8002940:	431bde83 	.word	0x431bde83

08002944 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d127      	bne.n	80029ae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800296e:	f7ff fca1 	bl	80022b4 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002974:	e014      	b.n	80029a0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002976:	f7ff fc9d 	bl	80022b4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d90d      	bls.n	80029a0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e007      	b.n	80029b0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d0e3      	beq.n	8002976 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d127      	bne.n	8002a22 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029ec:	d115      	bne.n	8002a1a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d111      	bne.n	8002a1a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7ff fe2c 	bl	8002678 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a20:	e004      	b.n	8002a2c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7ff fe21 	bl	800268a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f043 0204 	orr.w	r2, r3, #4
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff fe10 	bl	800269c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <__NVIC_EnableIRQ+0x34>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff90 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff2d 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff42 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff90 	bl	8002b74 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5f 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff35 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e043      	b.n	8002d3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <HAL_DMA_Init+0xa8>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <HAL_DMA_Init+0xac>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	009a      	lsls	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <HAL_DMA_Init+0xb0>)
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	bffdfff8 	.word	0xbffdfff8
 8002d4c:	cccccccd 	.word	0xcccccccd
 8002d50:	40020000 	.word	0x40020000

08002d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA_Start_IT+0x20>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e04a      	b.n	8002e0a <HAL_DMA_Start_IT+0xb6>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d13a      	bne.n	8002dfc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f9ba 	bl	8003124 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 020e 	orr.w	r2, r2, #14
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e00f      	b.n	8002dea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0204 	bic.w	r2, r2, #4
 8002dd8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 020a 	orr.w	r2, r2, #10
 8002de8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e005      	b.n	8002e08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d005      	beq.n	8002e36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e051      	b.n	8002eda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020e 	bic.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <HAL_DMA_Abort_IT+0xd0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d029      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xa0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a20      	ldr	r2, [pc, #128]	; (8002ee8 <HAL_DMA_Abort_IT+0xd4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x9c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <HAL_DMA_Abort_IT+0xd8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01a      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x96>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_DMA_Abort_IT+0xdc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0x90>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <HAL_DMA_Abort_IT+0xe0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00a      	beq.n	8002e9e <HAL_DMA_Abort_IT+0x8a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_DMA_Abort_IT+0xe4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d102      	bne.n	8002e98 <HAL_DMA_Abort_IT+0x84>
 8002e92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e96:	e00e      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e9c:	e00b      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea2:	e008      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea8:	e005      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eae:	e002      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4a11      	ldr	r2, [pc, #68]	; (8002efc <HAL_DMA_Abort_IT+0xe8>)
 8002eb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    } 
  }
  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40020008 	.word	0x40020008
 8002ee8:	4002001c 	.word	0x4002001c
 8002eec:	40020030 	.word	0x40020030
 8002ef0:	40020044 	.word	0x40020044
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	4002006c 	.word	0x4002006c
 8002efc:	40020000 	.word	0x40020000

08002f00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d04f      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0xc8>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04a      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0204 	bic.w	r2, r2, #4
 8002f4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a66      	ldr	r2, [pc, #408]	; (80030f0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d029      	beq.n	8002fae <HAL_DMA_IRQHandler+0xae>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <HAL_DMA_IRQHandler+0xaa>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_DMA_IRQHandler+0x1f8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01a      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0xa4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a62      	ldr	r2, [pc, #392]	; (80030fc <HAL_DMA_IRQHandler+0x1fc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d012      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x9e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a60      	ldr	r2, [pc, #384]	; (8003100 <HAL_DMA_IRQHandler+0x200>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x98>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5f      	ldr	r2, [pc, #380]	; (8003104 <HAL_DMA_IRQHandler+0x204>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x92>
 8002f8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f90:	e00e      	b.n	8002fb0 <HAL_DMA_IRQHandler+0xb0>
 8002f92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f96:	e00b      	b.n	8002fb0 <HAL_DMA_IRQHandler+0xb0>
 8002f98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f9c:	e008      	b.n	8002fb0 <HAL_DMA_IRQHandler+0xb0>
 8002f9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fa2:	e005      	b.n	8002fb0 <HAL_DMA_IRQHandler+0xb0>
 8002fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa8:	e002      	b.n	8002fb0 <HAL_DMA_IRQHandler+0xb0>
 8002faa:	2340      	movs	r3, #64	; 0x40
 8002fac:	e000      	b.n	8002fb0 <HAL_DMA_IRQHandler+0xb0>
 8002fae:	2304      	movs	r3, #4
 8002fb0:	4a55      	ldr	r2, [pc, #340]	; (8003108 <HAL_DMA_IRQHandler+0x208>)
 8002fb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8094 	beq.w	80030e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fc6:	e08e      	b.n	80030e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2202      	movs	r2, #2
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d056      	beq.n	8003086 <HAL_DMA_IRQHandler+0x186>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d051      	beq.n	8003086 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 020a 	bic.w	r2, r2, #10
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a38      	ldr	r2, [pc, #224]	; (80030f0 <HAL_DMA_IRQHandler+0x1f0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d029      	beq.n	8003066 <HAL_DMA_IRQHandler+0x166>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a37      	ldr	r2, [pc, #220]	; (80030f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <HAL_DMA_IRQHandler+0x162>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <HAL_DMA_IRQHandler+0x1f8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01a      	beq.n	800305c <HAL_DMA_IRQHandler+0x15c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a34      	ldr	r2, [pc, #208]	; (80030fc <HAL_DMA_IRQHandler+0x1fc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d012      	beq.n	8003056 <HAL_DMA_IRQHandler+0x156>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a32      	ldr	r2, [pc, #200]	; (8003100 <HAL_DMA_IRQHandler+0x200>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00a      	beq.n	8003050 <HAL_DMA_IRQHandler+0x150>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a31      	ldr	r2, [pc, #196]	; (8003104 <HAL_DMA_IRQHandler+0x204>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d102      	bne.n	800304a <HAL_DMA_IRQHandler+0x14a>
 8003044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003048:	e00e      	b.n	8003068 <HAL_DMA_IRQHandler+0x168>
 800304a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304e:	e00b      	b.n	8003068 <HAL_DMA_IRQHandler+0x168>
 8003050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003054:	e008      	b.n	8003068 <HAL_DMA_IRQHandler+0x168>
 8003056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305a:	e005      	b.n	8003068 <HAL_DMA_IRQHandler+0x168>
 800305c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003060:	e002      	b.n	8003068 <HAL_DMA_IRQHandler+0x168>
 8003062:	2320      	movs	r3, #32
 8003064:	e000      	b.n	8003068 <HAL_DMA_IRQHandler+0x168>
 8003066:	2302      	movs	r3, #2
 8003068:	4a27      	ldr	r2, [pc, #156]	; (8003108 <HAL_DMA_IRQHandler+0x208>)
 800306a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d034      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003084:	e02f      	b.n	80030e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2208      	movs	r2, #8
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d028      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x1e8>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 020e 	bic.w	r2, r2, #14
 80030ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
    }
  }
  return;
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
}
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40020008 	.word	0x40020008
 80030f4:	4002001c 	.word	0x4002001c
 80030f8:	40020030 	.word	0x40020030
 80030fc:	40020044 	.word	0x40020044
 8003100:	40020058 	.word	0x40020058
 8003104:	4002006c 	.word	0x4002006c
 8003108:	40020000 	.word	0x40020000

0800310c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b10      	cmp	r3, #16
 8003150:	d108      	bne.n	8003164 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003162:	e007      	b.n	8003174 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	60da      	str	r2, [r3, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
	...

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b08b      	sub	sp, #44	; 0x2c
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003192:	e127      	b.n	80033e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003194:	2201      	movs	r2, #1
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	f040 8116 	bne.w	80033de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b12      	cmp	r3, #18
 80031b8:	d034      	beq.n	8003224 <HAL_GPIO_Init+0xa4>
 80031ba:	2b12      	cmp	r3, #18
 80031bc:	d80d      	bhi.n	80031da <HAL_GPIO_Init+0x5a>
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_Init+0x9a>
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d804      	bhi.n	80031d0 <HAL_GPIO_Init+0x50>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d031      	beq.n	800322e <HAL_GPIO_Init+0xae>
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d01c      	beq.n	8003208 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ce:	e048      	b.n	8003262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d043      	beq.n	800325c <HAL_GPIO_Init+0xdc>
 80031d4:	2b11      	cmp	r3, #17
 80031d6:	d01b      	beq.n	8003210 <HAL_GPIO_Init+0x90>
          break;
 80031d8:	e043      	b.n	8003262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031da:	4a89      	ldr	r2, [pc, #548]	; (8003400 <HAL_GPIO_Init+0x280>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d026      	beq.n	800322e <HAL_GPIO_Init+0xae>
 80031e0:	4a87      	ldr	r2, [pc, #540]	; (8003400 <HAL_GPIO_Init+0x280>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d806      	bhi.n	80031f4 <HAL_GPIO_Init+0x74>
 80031e6:	4a87      	ldr	r2, [pc, #540]	; (8003404 <HAL_GPIO_Init+0x284>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d020      	beq.n	800322e <HAL_GPIO_Init+0xae>
 80031ec:	4a86      	ldr	r2, [pc, #536]	; (8003408 <HAL_GPIO_Init+0x288>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01d      	beq.n	800322e <HAL_GPIO_Init+0xae>
          break;
 80031f2:	e036      	b.n	8003262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031f4:	4a85      	ldr	r2, [pc, #532]	; (800340c <HAL_GPIO_Init+0x28c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0xae>
 80031fa:	4a85      	ldr	r2, [pc, #532]	; (8003410 <HAL_GPIO_Init+0x290>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d016      	beq.n	800322e <HAL_GPIO_Init+0xae>
 8003200:	4a84      	ldr	r2, [pc, #528]	; (8003414 <HAL_GPIO_Init+0x294>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0xae>
          break;
 8003206:	e02c      	b.n	8003262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	623b      	str	r3, [r7, #32]
          break;
 800320e:	e028      	b.n	8003262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	3304      	adds	r3, #4
 8003216:	623b      	str	r3, [r7, #32]
          break;
 8003218:	e023      	b.n	8003262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	3308      	adds	r3, #8
 8003220:	623b      	str	r3, [r7, #32]
          break;
 8003222:	e01e      	b.n	8003262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	330c      	adds	r3, #12
 800322a:	623b      	str	r3, [r7, #32]
          break;
 800322c:	e019      	b.n	8003262 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003236:	2304      	movs	r3, #4
 8003238:	623b      	str	r3, [r7, #32]
          break;
 800323a:	e012      	b.n	8003262 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d105      	bne.n	8003250 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003244:	2308      	movs	r3, #8
 8003246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	611a      	str	r2, [r3, #16]
          break;
 800324e:	e008      	b.n	8003262 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003250:	2308      	movs	r3, #8
 8003252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	615a      	str	r2, [r3, #20]
          break;
 800325a:	e002      	b.n	8003262 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800325c:	2300      	movs	r3, #0
 800325e:	623b      	str	r3, [r7, #32]
          break;
 8003260:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2bff      	cmp	r3, #255	; 0xff
 8003266:	d801      	bhi.n	800326c <HAL_GPIO_Init+0xec>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	e001      	b.n	8003270 <HAL_GPIO_Init+0xf0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2bff      	cmp	r3, #255	; 0xff
 8003276:	d802      	bhi.n	800327e <HAL_GPIO_Init+0xfe>
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	e002      	b.n	8003284 <HAL_GPIO_Init+0x104>
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3b08      	subs	r3, #8
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	210f      	movs	r1, #15
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	401a      	ands	r2, r3
 8003296:	6a39      	ldr	r1, [r7, #32]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	431a      	orrs	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8096 	beq.w	80033de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032b2:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_GPIO_Init+0x298>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_GPIO_Init+0x298>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6193      	str	r3, [r2, #24]
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_GPIO_Init+0x298>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032ca:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_GPIO_Init+0x29c>)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3302      	adds	r3, #2
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	220f      	movs	r2, #15
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	; (8003420 <HAL_GPIO_Init+0x2a0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x19e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_GPIO_Init+0x2a4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x19a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_GPIO_Init+0x2a8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x196>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <HAL_GPIO_Init+0x2ac>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x192>
 800330e:	2303      	movs	r3, #3
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x1a0>
 8003312:	2304      	movs	r3, #4
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x1a0>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x1a0>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x1a0>
 800331e:	2300      	movs	r3, #0
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003330:	493a      	ldr	r1, [pc, #232]	; (800341c <HAL_GPIO_Init+0x29c>)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4938      	ldr	r1, [pc, #224]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
 8003356:	e006      	b.n	8003366 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003358:	4b35      	ldr	r3, [pc, #212]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	43db      	mvns	r3, r3
 8003360:	4933      	ldr	r1, [pc, #204]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 8003362:	4013      	ands	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003372:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	492e      	ldr	r1, [pc, #184]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
 800337e:	e006      	b.n	800338e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003380:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	43db      	mvns	r3, r3
 8003388:	4929      	ldr	r1, [pc, #164]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 800338a:	4013      	ands	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800339a:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	4924      	ldr	r1, [pc, #144]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
 80033a6:	e006      	b.n	80033b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033a8:	4b21      	ldr	r3, [pc, #132]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	491f      	ldr	r1, [pc, #124]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d006      	beq.n	80033d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	491a      	ldr	r1, [pc, #104]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60cb      	str	r3, [r1, #12]
 80033ce:	e006      	b.n	80033de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	4915      	ldr	r1, [pc, #84]	; (8003430 <HAL_GPIO_Init+0x2b0>)
 80033da:	4013      	ands	r3, r2
 80033dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	3301      	adds	r3, #1
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f aed0 	bne.w	8003194 <HAL_GPIO_Init+0x14>
  }
}
 80033f4:	bf00      	nop
 80033f6:	372c      	adds	r7, #44	; 0x2c
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	10210000 	.word	0x10210000
 8003404:	10110000 	.word	0x10110000
 8003408:	10120000 	.word	0x10120000
 800340c:	10310000 	.word	0x10310000
 8003410:	10320000 	.word	0x10320000
 8003414:	10220000 	.word	0x10220000
 8003418:	40021000 	.word	0x40021000
 800341c:	40010000 	.word	0x40010000
 8003420:	40010800 	.word	0x40010800
 8003424:	40010c00 	.word	0x40010c00
 8003428:	40011000 	.word	0x40011000
 800342c:	40011400 	.word	0x40011400
 8003430:	40010400 	.word	0x40010400

08003434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003444:	787b      	ldrb	r3, [r7, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003450:	e003      	b.n	800345a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003452:	887b      	ldrh	r3, [r7, #2]
 8003454:	041a      	lsls	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e11f      	b.n	80036b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fa5a 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034c8:	f002 f872 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a7b      	ldr	r2, [pc, #492]	; (80036c0 <HAL_I2C_Init+0x25c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d807      	bhi.n	80034e8 <HAL_I2C_Init+0x84>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a7a      	ldr	r2, [pc, #488]	; (80036c4 <HAL_I2C_Init+0x260>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	bf94      	ite	ls
 80034e0:	2301      	movls	r3, #1
 80034e2:	2300      	movhi	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e006      	b.n	80034f6 <HAL_I2C_Init+0x92>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <HAL_I2C_Init+0x264>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bf94      	ite	ls
 80034f0:	2301      	movls	r3, #1
 80034f2:	2300      	movhi	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0db      	b.n	80036b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a72      	ldr	r2, [pc, #456]	; (80036cc <HAL_I2C_Init+0x268>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a64      	ldr	r2, [pc, #400]	; (80036c0 <HAL_I2C_Init+0x25c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d802      	bhi.n	8003538 <HAL_I2C_Init+0xd4>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3301      	adds	r3, #1
 8003536:	e009      	b.n	800354c <HAL_I2C_Init+0xe8>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	4a63      	ldr	r2, [pc, #396]	; (80036d0 <HAL_I2C_Init+0x26c>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	3301      	adds	r3, #1
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800355e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4956      	ldr	r1, [pc, #344]	; (80036c0 <HAL_I2C_Init+0x25c>)
 8003568:	428b      	cmp	r3, r1
 800356a:	d80d      	bhi.n	8003588 <HAL_I2C_Init+0x124>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e59      	subs	r1, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fbb1 f3f3 	udiv	r3, r1, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	2b04      	cmp	r3, #4
 8003582:	bf38      	it	cc
 8003584:	2304      	movcc	r3, #4
 8003586:	e04f      	b.n	8003628 <HAL_I2C_Init+0x1c4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d111      	bne.n	80035b4 <HAL_I2C_Init+0x150>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e58      	subs	r0, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	440b      	add	r3, r1
 800359e:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e012      	b.n	80035da <HAL_I2C_Init+0x176>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e58      	subs	r0, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	0099      	lsls	r1, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Init+0x17e>
 80035de:	2301      	movs	r3, #1
 80035e0:	e022      	b.n	8003628 <HAL_I2C_Init+0x1c4>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10e      	bne.n	8003608 <HAL_I2C_Init+0x1a4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e58      	subs	r0, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	440b      	add	r3, r1
 80035f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	e00f      	b.n	8003628 <HAL_I2C_Init+0x1c4>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1e58      	subs	r0, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	0099      	lsls	r1, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	fbb0 f3f3 	udiv	r3, r0, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	6809      	ldr	r1, [r1, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6911      	ldr	r1, [r2, #16]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68d2      	ldr	r2, [r2, #12]
 8003662:	4311      	orrs	r1, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	430b      	orrs	r3, r1
 800366a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	000186a0 	.word	0x000186a0
 80036c4:	001e847f 	.word	0x001e847f
 80036c8:	003d08ff 	.word	0x003d08ff
 80036cc:	431bde83 	.word	0x431bde83
 80036d0:	10624dd3 	.word	0x10624dd3

080036d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b10      	cmp	r3, #16
 8003702:	d003      	beq.n	800370c <HAL_I2C_EV_IRQHandler+0x38>
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	f040 80bd 	bne.w	8003886 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10d      	bne.n	8003742 <HAL_I2C_EV_IRQHandler+0x6e>
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800372c:	d003      	beq.n	8003736 <HAL_I2C_EV_IRQHandler+0x62>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003734:	d101      	bne.n	800373a <HAL_I2C_EV_IRQHandler+0x66>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x68>
 800373a:	2300      	movs	r3, #0
 800373c:	2b01      	cmp	r3, #1
 800373e:	f000 812e 	beq.w	800399e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0x92>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	0a5b      	lsrs	r3, r3, #9
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f001 fb39 	bl	8004dd0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fcb1 	bl	80040c6 <I2C_Master_SB>
 8003764:	e08e      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	08db      	lsrs	r3, r3, #3
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0xb2>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	0a5b      	lsrs	r3, r3, #9
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fd26 	bl	80041d0 <I2C_Master_ADD10>
 8003784:	e07e      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	0a5b      	lsrs	r3, r3, #9
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fd3f 	bl	8004222 <I2C_Master_ADDR>
 80037a4:	e06e      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d037      	beq.n	8003822 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c0:	f000 80ef 	beq.w	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	09db      	lsrs	r3, r3, #7
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00f      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f93e 	bl	8003a6a <I2C_MasterTransmit_TXE>
 80037ee:	e049      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80d2 	beq.w	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	0a5b      	lsrs	r3, r3, #9
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80cb 	beq.w	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b10      	cmp	r3, #16
 8003810:	d103      	bne.n	800381a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9c5 	bl	8003ba2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003818:	e0c3      	b.n	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa29 	bl	8003c72 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003820:	e0bf      	b.n	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003830:	f000 80b7 	beq.w	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x18c>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0a9b      	lsrs	r3, r3, #10
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x18c>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa99 	bl	8003d90 <I2C_MasterReceive_RXNE>
 800385e:	e011      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 809a 	beq.w	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	0a5b      	lsrs	r3, r3, #9
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8093 	beq.w	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fb38 	bl	8003ef2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003882:	e08e      	b.n	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003884:	e08d      	b.n	80039a2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e007      	b.n	80038a8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_I2C_EV_IRQHandler+0x206>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	0a5b      	lsrs	r3, r3, #9
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00c      	beq.n	80038da <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fefc 	bl	80046d0 <I2C_Slave_ADDR>
 80038d8:	e066      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_I2C_EV_IRQHandler+0x226>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	0a5b      	lsrs	r3, r3, #9
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 ff30 	bl	8004758 <I2C_Slave_STOPF>
 80038f8:	e056      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038fa:	7bbb      	ldrb	r3, [r7, #14]
 80038fc:	2b21      	cmp	r3, #33	; 0x21
 80038fe:	d002      	beq.n	8003906 <HAL_I2C_EV_IRQHandler+0x232>
 8003900:	7bbb      	ldrb	r3, [r7, #14]
 8003902:	2b29      	cmp	r3, #41	; 0x29
 8003904:	d125      	bne.n	8003952 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	09db      	lsrs	r3, r3, #7
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00f      	beq.n	8003932 <HAL_I2C_EV_IRQHandler+0x25e>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	0a9b      	lsrs	r3, r3, #10
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_I2C_EV_IRQHandler+0x25e>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fe14 	bl	8004558 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003930:	e039      	b.n	80039a6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d033      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	0a5b      	lsrs	r3, r3, #9
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d02d      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fe41 	bl	80045d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003950:	e029      	b.n	80039a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x2aa>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	0a9b      	lsrs	r3, r3, #10
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x2aa>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fe4b 	bl	8004612 <I2C_SlaveReceive_RXNE>
 800397c:	e014      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	0a5b      	lsrs	r3, r3, #9
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fe79 	bl	800468e <I2C_SlaveReceive_BTF>
 800399c:	e004      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
 8003a02:	4613      	mov	r3, r2
 8003a04:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a80:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d150      	bne.n	8003b32 <I2C_MasterTransmit_TXE+0xc8>
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b21      	cmp	r3, #33	; 0x21
 8003a94:	d14d      	bne.n	8003b32 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d01d      	beq.n	8003ad8 <I2C_MasterTransmit_TXE+0x6e>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d01a      	beq.n	8003ad8 <I2C_MasterTransmit_TXE+0x6e>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa8:	d016      	beq.n	8003ad8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ab8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2211      	movs	r2, #17
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff6c 	bl	80039ae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ad6:	e060      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ae6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d107      	bne.n	8003b22 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ff81 	bl	8003a22 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b20:	e03b      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ff3f 	bl	80039ae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b30:	e033      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b21      	cmp	r3, #33	; 0x21
 8003b36:	d005      	beq.n	8003b44 <I2C_MasterTransmit_TXE+0xda>
 8003b38:	7bbb      	ldrb	r3, [r7, #14]
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d12d      	bne.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b22      	cmp	r3, #34	; 0x22
 8003b42:	d12a      	bne.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b5e:	e01c      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d103      	bne.n	8003b74 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f880 	bl	8003c72 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b72:	e012      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b98:	e7ff      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b21      	cmp	r3, #33	; 0x21
 8003bba:	d156      	bne.n	8003c6a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bea:	e03e      	b.n	8003c6a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d01d      	beq.n	8003c2e <I2C_MasterTransmit_BTF+0x8c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d01a      	beq.n	8003c2e <I2C_MasterTransmit_BTF+0x8c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bfe:	d016      	beq.n	8003c2e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c0e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2211      	movs	r2, #17
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fec1 	bl	80039ae <HAL_I2C_MasterTxCpltCallback>
}
 8003c2c:	e01d      	b.n	8003c6a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c3c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff fea2 	bl	80039ae <HAL_I2C_MasterTxCpltCallback>
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11d      	bne.n	8003cc6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10b      	bne.n	8003caa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ca8:	e06e      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	121b      	asrs	r3, r3, #8
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cc4:	e060      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10b      	bne.n	8003ce6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ce4:	e050      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d14c      	bne.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b22      	cmp	r3, #34	; 0x22
 8003cf2:	d108      	bne.n	8003d06 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	e040      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b21      	cmp	r3, #33	; 0x21
 8003d14:	d112      	bne.n	8003d3c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d3a:	e025      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d120      	bne.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b21      	cmp	r3, #33	; 0x21
 8003d4a:	d11d      	bne.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fe4d 	bl	8003a22 <HAL_I2C_MemTxCpltCallback>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b22      	cmp	r3, #34	; 0x22
 8003da2:	f040 80a2 	bne.w	8003eea <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d921      	bls.n	8003df8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	f040 8082 	bne.w	8003eea <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003df6:	e078      	b.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d074      	beq.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d002      	beq.n	8003e0c <I2C_MasterReceive_RXNE+0x7c>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d16e      	bne.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 ffad 	bl	8004d6c <I2C_WaitOnSTOPRequestThroughIT>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d142      	bne.n	8003e9e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e26:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e36:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d10a      	bne.n	8003e88 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fdd7 	bl	8003a34 <HAL_I2C_MemRxCpltCallback>
}
 8003e86:	e030      	b.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2212      	movs	r2, #18
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fd92 	bl	80039c0 <HAL_I2C_MasterRxCpltCallback>
}
 8003e9c:	e025      	b.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fdae 	bl	8003a46 <HAL_I2C_ErrorCallback>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d11b      	bne.n	8003f42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f40:	e0bd      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d129      	bne.n	8003fa0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d00a      	beq.n	8003f78 <I2C_MasterReceive_BTF+0x86>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d007      	beq.n	8003f78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f9e:	e08e      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d176      	bne.n	8004098 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d002      	beq.n	8003fb6 <I2C_MasterReceive_BTF+0xc4>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d108      	bne.n	8003fc8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e019      	b.n	8003ffc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d002      	beq.n	8003fd4 <I2C_MasterReceive_BTF+0xe2>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d108      	bne.n	8003fe6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e00a      	b.n	8003ffc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d007      	beq.n	8003ffc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004056:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d10a      	bne.n	8004082 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fcda 	bl	8003a34 <HAL_I2C_MemRxCpltCallback>
}
 8004080:	e01d      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2212      	movs	r2, #18
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fc95 	bl	80039c0 <HAL_I2C_MasterRxCpltCallback>
}
 8004096:	e012      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d117      	bne.n	800410a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040f4:	e067      	b.n	80041c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	611a      	str	r2, [r3, #16]
}
 8004108:	e05d      	b.n	80041c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004112:	d133      	bne.n	800417c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b21      	cmp	r3, #33	; 0x21
 800411e:	d109      	bne.n	8004134 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004130:	611a      	str	r2, [r3, #16]
 8004132:	e008      	b.n	8004146 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <I2C_Master_SB+0x92>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d032      	beq.n	80041c6 <I2C_Master_SB+0x100>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02d      	beq.n	80041c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004178:	605a      	str	r2, [r3, #4]
}
 800417a:	e024      	b.n	80041c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10e      	bne.n	80041a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	b29b      	uxth	r3, r3
 800418a:	11db      	asrs	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f063 030f 	orn	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]
}
 80041a0:	e011      	b.n	80041c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10d      	bne.n	80041c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	11db      	asrs	r3, r3, #7
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f003 0306 	and.w	r3, r3, #6
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f063 030e 	orn	r3, r3, #14
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <I2C_Master_ADD10+0x24>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <I2C_Master_ADD10+0x38>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004216:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004222:	b480      	push	{r7}
 8004224:	b091      	sub	sp, #68	; 0x44
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004230:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b22      	cmp	r3, #34	; 0x22
 800424a:	f040 8174 	bne.w	8004536 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <I2C_Master_ADDR+0x54>
 8004256:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d10b      	bne.n	8004276 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425e:	2300      	movs	r3, #0
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	633b      	str	r3, [r7, #48]	; 0x30
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	e16b      	b.n	800454e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11d      	bne.n	80042ba <I2C_Master_ADDR+0x98>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004286:	d118      	bne.n	80042ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004288:	2300      	movs	r3, #0
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	651a      	str	r2, [r3, #80]	; 0x50
 80042b8:	e149      	b.n	800454e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d113      	bne.n	80042ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c4:	2300      	movs	r3, #0
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e120      	b.n	800452e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f040 808a 	bne.w	800440c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042fe:	d137      	bne.n	8004370 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431e:	d113      	bne.n	8004348 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	e0f2      	b.n	800452e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004348:	2300      	movs	r3, #0
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	623b      	str	r3, [r7, #32]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e0de      	b.n	800452e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	2b08      	cmp	r3, #8
 8004374:	d02e      	beq.n	80043d4 <I2C_Master_ADDR+0x1b2>
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	2b20      	cmp	r3, #32
 800437a:	d02b      	beq.n	80043d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	2b12      	cmp	r3, #18
 8004380:	d102      	bne.n	8004388 <I2C_Master_ADDR+0x166>
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	2b01      	cmp	r3, #1
 8004386:	d125      	bne.n	80043d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	2b04      	cmp	r3, #4
 800438c:	d00e      	beq.n	80043ac <I2C_Master_ADDR+0x18a>
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	2b02      	cmp	r3, #2
 8004392:	d00b      	beq.n	80043ac <I2C_Master_ADDR+0x18a>
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	2b10      	cmp	r3, #16
 8004398:	d008      	beq.n	80043ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e007      	b.n	80043bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	e0ac      	b.n	800452e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	e090      	b.n	800452e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d158      	bne.n	80044c8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	2b04      	cmp	r3, #4
 800441a:	d021      	beq.n	8004460 <I2C_Master_ADDR+0x23e>
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	2b02      	cmp	r3, #2
 8004420:	d01e      	beq.n	8004460 <I2C_Master_ADDR+0x23e>
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	2b10      	cmp	r3, #16
 8004426:	d01b      	beq.n	8004460 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004436:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e012      	b.n	8004486 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800446e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004494:	d14b      	bne.n	800452e <I2C_Master_ADDR+0x30c>
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800449c:	d00b      	beq.n	80044b6 <I2C_Master_ADDR+0x294>
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d008      	beq.n	80044b6 <I2C_Master_ADDR+0x294>
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d005      	beq.n	80044b6 <I2C_Master_ADDR+0x294>
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d002      	beq.n	80044b6 <I2C_Master_ADDR+0x294>
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d13b      	bne.n	800452e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	e032      	b.n	800452e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e6:	d117      	bne.n	8004518 <I2C_Master_ADDR+0x2f6>
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044ee:	d00b      	beq.n	8004508 <I2C_Master_ADDR+0x2e6>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d008      	beq.n	8004508 <I2C_Master_ADDR+0x2e6>
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d005      	beq.n	8004508 <I2C_Master_ADDR+0x2e6>
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d002      	beq.n	8004508 <I2C_Master_ADDR+0x2e6>
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	2b20      	cmp	r3, #32
 8004506:	d107      	bne.n	8004518 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004516:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004534:	e00b      	b.n	800454e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
}
 800454c:	e7ff      	b.n	800454e <I2C_Master_ADDR+0x32c>
 800454e:	bf00      	nop
 8004550:	3744      	adds	r7, #68	; 0x44
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004566:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d02b      	beq.n	80045ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d114      	bne.n	80045ca <I2C_SlaveTransmit_TXE+0x72>
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b29      	cmp	r3, #41	; 0x29
 80045a4:	d111      	bne.n	80045ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2221      	movs	r2, #33	; 0x21
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2228      	movs	r2, #40	; 0x28
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fa04 	bl	80039d2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d011      	beq.n	8004608 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02c      	beq.n	8004686 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d114      	bne.n	8004686 <I2C_SlaveReceive_RXNE+0x74>
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b2a      	cmp	r3, #42	; 0x2a
 8004660:	d111      	bne.n	8004686 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004670:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2222      	movs	r2, #34	; 0x22
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2228      	movs	r2, #40	; 0x28
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff f9af 	bl	80039e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d012      	beq.n	80046c6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046ea:	2b28      	cmp	r3, #40	; 0x28
 80046ec:	d127      	bne.n	800473e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	09db      	lsrs	r3, r3, #7
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	81bb      	strh	r3, [r7, #12]
 8004720:	e002      	b.n	8004728 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004730:	89ba      	ldrh	r2, [r7, #12]
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff f95d 	bl	80039f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800473c:	e008      	b.n	8004750 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f06f 0202 	mvn.w	r2, #2
 8004746:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004776:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b4:	d172      	bne.n	800489c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	d002      	beq.n	80047c2 <I2C_Slave_STOPF+0x6a>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b2a      	cmp	r3, #42	; 0x2a
 80047c0:	d135      	bne.n	800482e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fc86 	bl	800310c <HAL_DMA_GetState>
 8004800:	4603      	mov	r3, r0
 8004802:	2b01      	cmp	r3, #1
 8004804:	d049      	beq.n	800489a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	4a69      	ldr	r2, [pc, #420]	; (80049b0 <I2C_Slave_STOPF+0x258>)
 800480c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fafe 	bl	8002e14 <HAL_DMA_Abort_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03d      	beq.n	800489a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004828:	4610      	mov	r0, r2
 800482a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800482c:	e035      	b.n	800489a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	b29a      	uxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004860:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe fc50 	bl	800310c <HAL_DMA_GetState>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d014      	beq.n	800489c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	4a4e      	ldr	r2, [pc, #312]	; (80049b0 <I2C_Slave_STOPF+0x258>)
 8004878:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fac8 	bl	8002e14 <HAL_DMA_Abort_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004894:	4610      	mov	r0, r2
 8004896:	4798      	blx	r3
 8004898:	e000      	b.n	800489c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800489a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03e      	beq.n	8004924 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d112      	bne.n	80048da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d112      	bne.n	800490e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f043 0204 	orr.w	r2, r3, #4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f843 	bl	80049b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004932:	e039      	b.n	80049a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b2a      	cmp	r3, #42	; 0x2a
 8004938:	d109      	bne.n	800494e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2228      	movs	r2, #40	; 0x28
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff f84b 	bl	80039e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b28      	cmp	r3, #40	; 0x28
 8004958:	d111      	bne.n	800497e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <I2C_Slave_STOPF+0x25c>)
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff f84a 	bl	8003a10 <HAL_I2C_ListenCpltCallback>
}
 800497c:	e014      	b.n	80049a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	2b22      	cmp	r3, #34	; 0x22
 8004984:	d002      	beq.n	800498c <I2C_Slave_STOPF+0x234>
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b22      	cmp	r3, #34	; 0x22
 800498a:	d10d      	bne.n	80049a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff f81e 	bl	80039e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	08004c1d 	.word	0x08004c1d
 80049b4:	ffff0000 	.word	0xffff0000

080049b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049d0:	7bbb      	ldrb	r3, [r7, #14]
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d002      	beq.n	80049dc <I2C_ITError+0x24>
 80049d6:	7bbb      	ldrb	r3, [r7, #14]
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d10a      	bne.n	80049f2 <I2C_ITError+0x3a>
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b22      	cmp	r3, #34	; 0x22
 80049e0:	d107      	bne.n	80049f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f8:	2b28      	cmp	r3, #40	; 0x28
 80049fa:	d107      	bne.n	8004a0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2228      	movs	r2, #40	; 0x28
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a0a:	e015      	b.n	8004a38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d00a      	beq.n	8004a32 <I2C_ITError+0x7a>
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b60      	cmp	r3, #96	; 0x60
 8004a20:	d007      	beq.n	8004a32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a46:	d161      	bne.n	8004b0c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d020      	beq.n	8004aa6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	4a6a      	ldr	r2, [pc, #424]	; (8004c14 <I2C_ITError+0x25c>)
 8004a6a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe f9cf 	bl	8002e14 <HAL_DMA_Abort_IT>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8089 	beq.w	8004b90 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4798      	blx	r3
 8004aa4:	e074      	b.n	8004b90 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	4a5a      	ldr	r2, [pc, #360]	; (8004c14 <I2C_ITError+0x25c>)
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe f9ae 	bl	8002e14 <HAL_DMA_Abort_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d068      	beq.n	8004b90 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d10b      	bne.n	8004ae4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b06:	4610      	mov	r0, r2
 8004b08:	4798      	blx	r3
 8004b0a:	e041      	b.n	8004b90 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d125      	bne.n	8004b64 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d10b      	bne.n	8004b4c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fe ff7b 	bl	8003a58 <HAL_I2C_AbortCpltCallback>
 8004b62:	e015      	b.n	8004b90 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d10b      	bne.n	8004b8a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fe ff5b 	bl	8003a46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10e      	bne.n	8004bbe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d113      	bne.n	8004c0a <I2C_ITError+0x252>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b28      	cmp	r3, #40	; 0x28
 8004be6:	d110      	bne.n	8004c0a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <I2C_ITError+0x260>)
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7fe ff03 	bl	8003a10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	08004c1d 	.word	0x08004c1d
 8004c18:	ffff0000 	.word	0xffff0000

08004c1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c36:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <I2C_DMAAbort+0x148>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	08db      	lsrs	r3, r3, #3
 8004c3c:	4a4a      	ldr	r2, [pc, #296]	; (8004d68 <I2C_DMAAbort+0x14c>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0a1a      	lsrs	r2, r3, #8
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	00da      	lsls	r2, r3, #3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c62:	e00a      	b.n	8004c7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c78:	d0ea      	beq.n	8004c50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	2200      	movs	r2, #0
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	2200      	movs	r2, #0
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	2200      	movs	r2, #0
 8004cce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b60      	cmp	r3, #96	; 0x60
 8004cea:	d10e      	bne.n	8004d0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7fe fea8 	bl	8003a58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d08:	e027      	b.n	8004d5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d10:	2b28      	cmp	r3, #40	; 0x28
 8004d12:	d117      	bne.n	8004d44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2228      	movs	r2, #40	; 0x28
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d42:	e007      	b.n	8004d54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d54:	6978      	ldr	r0, [r7, #20]
 8004d56:	f7fe fe76 	bl	8003a46 <HAL_I2C_ErrorCallback>
}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000038 	.word	0x20000038
 8004d68:	14f8b589 	.word	0x14f8b589

08004d6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	0a1a      	lsrs	r2, r3, #8
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e008      	b.n	8004dbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d0e9      	beq.n	8004d8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000038 	.word	0x20000038
 8004dcc:	14f8b589 	.word	0x14f8b589

08004dd0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004de0:	d103      	bne.n	8004dea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004de8:	e007      	b.n	8004dfa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004df2:	d102      	bne.n	8004dfa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2208      	movs	r2, #8
 8004df8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e26c      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8087 	beq.w	8004f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e24:	4b92      	ldr	r3, [pc, #584]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 030c 	and.w	r3, r3, #12
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d00c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e30:	4b8f      	ldr	r3, [pc, #572]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 030c 	and.w	r3, r3, #12
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d112      	bne.n	8004e62 <HAL_RCC_OscConfig+0x5e>
 8004e3c:	4b8c      	ldr	r3, [pc, #560]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d10b      	bne.n	8004e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4a:	4b89      	ldr	r3, [pc, #548]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d06c      	beq.n	8004f30 <HAL_RCC_OscConfig+0x12c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d168      	bne.n	8004f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e246      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCC_OscConfig+0x76>
 8004e6c:	4b80      	ldr	r3, [pc, #512]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a7f      	ldr	r2, [pc, #508]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e02e      	b.n	8004ed8 <HAL_RCC_OscConfig+0xd4>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x98>
 8004e82:	4b7b      	ldr	r3, [pc, #492]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a7a      	ldr	r2, [pc, #488]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	4b78      	ldr	r3, [pc, #480]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a77      	ldr	r2, [pc, #476]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e01d      	b.n	8004ed8 <HAL_RCC_OscConfig+0xd4>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xbc>
 8004ea6:	4b72      	ldr	r3, [pc, #456]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a71      	ldr	r2, [pc, #452]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4b6f      	ldr	r3, [pc, #444]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a6e      	ldr	r2, [pc, #440]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCC_OscConfig+0xd4>
 8004ec0:	4b6b      	ldr	r3, [pc, #428]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6a      	ldr	r2, [pc, #424]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	4b68      	ldr	r3, [pc, #416]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a67      	ldr	r2, [pc, #412]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d013      	beq.n	8004f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fd f9e8 	bl	80022b4 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ee8:	f7fd f9e4 	bl	80022b4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e1fa      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xe4>
 8004f06:	e014      	b.n	8004f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fd f9d4 	bl	80022b4 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f10:	f7fd f9d0 	bl	80022b4 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	; 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e1e6      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	4b53      	ldr	r3, [pc, #332]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x10c>
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d063      	beq.n	8005006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f3e:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f4a:	4b49      	ldr	r3, [pc, #292]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d11c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x18c>
 8004f56:	4b46      	ldr	r3, [pc, #280]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d116      	bne.n	8004f90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f62:	4b43      	ldr	r3, [pc, #268]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_RCC_OscConfig+0x176>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e1ba      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7a:	4b3d      	ldr	r3, [pc, #244]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4939      	ldr	r1, [pc, #228]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8e:	e03a      	b.n	8005006 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f98:	4b36      	ldr	r3, [pc, #216]	; (8005074 <HAL_RCC_OscConfig+0x270>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fd f989 	bl	80022b4 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa6:	f7fd f985 	bl	80022b4 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e19b      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4927      	ldr	r1, [pc, #156]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	600b      	str	r3, [r1, #0]
 8004fd8:	e015      	b.n	8005006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <HAL_RCC_OscConfig+0x270>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fd f968 	bl	80022b4 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe8:	f7fd f964 	bl	80022b4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e17a      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d03a      	beq.n	8005088 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d019      	beq.n	800504e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <HAL_RCC_OscConfig+0x274>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005020:	f7fd f948 	bl	80022b4 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005028:	f7fd f944 	bl	80022b4 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e15a      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <HAL_RCC_OscConfig+0x26c>)
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005046:	2001      	movs	r0, #1
 8005048:	f000 fada 	bl	8005600 <RCC_Delay>
 800504c:	e01c      	b.n	8005088 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <HAL_RCC_OscConfig+0x274>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005054:	f7fd f92e 	bl	80022b4 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505a:	e00f      	b.n	800507c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800505c:	f7fd f92a 	bl	80022b4 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d908      	bls.n	800507c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e140      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	42420000 	.word	0x42420000
 8005078:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507c:	4b9e      	ldr	r3, [pc, #632]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e9      	bne.n	800505c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80a6 	beq.w	80051e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509a:	4b97      	ldr	r3, [pc, #604]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	4b94      	ldr	r3, [pc, #592]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4a93      	ldr	r2, [pc, #588]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	61d3      	str	r3, [r2, #28]
 80050b2:	4b91      	ldr	r3, [pc, #580]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b8e      	ldr	r3, [pc, #568]	; (80052fc <HAL_RCC_OscConfig+0x4f8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d118      	bne.n	8005100 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ce:	4b8b      	ldr	r3, [pc, #556]	; (80052fc <HAL_RCC_OscConfig+0x4f8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a8a      	ldr	r2, [pc, #552]	; (80052fc <HAL_RCC_OscConfig+0x4f8>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050da:	f7fd f8eb 	bl	80022b4 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7fd f8e7 	bl	80022b4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b64      	cmp	r3, #100	; 0x64
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e0fd      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	4b81      	ldr	r3, [pc, #516]	; (80052fc <HAL_RCC_OscConfig+0x4f8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d106      	bne.n	8005116 <HAL_RCC_OscConfig+0x312>
 8005108:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6213      	str	r3, [r2, #32]
 8005114:	e02d      	b.n	8005172 <HAL_RCC_OscConfig+0x36e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0x334>
 800511e:	4b76      	ldr	r3, [pc, #472]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	4a75      	ldr	r2, [pc, #468]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	6213      	str	r3, [r2, #32]
 800512a:	4b73      	ldr	r3, [pc, #460]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4a72      	ldr	r2, [pc, #456]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005130:	f023 0304 	bic.w	r3, r3, #4
 8005134:	6213      	str	r3, [r2, #32]
 8005136:	e01c      	b.n	8005172 <HAL_RCC_OscConfig+0x36e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b05      	cmp	r3, #5
 800513e:	d10c      	bne.n	800515a <HAL_RCC_OscConfig+0x356>
 8005140:	4b6d      	ldr	r3, [pc, #436]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	4a6c      	ldr	r2, [pc, #432]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005146:	f043 0304 	orr.w	r3, r3, #4
 800514a:	6213      	str	r3, [r2, #32]
 800514c:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	4a69      	ldr	r2, [pc, #420]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6213      	str	r3, [r2, #32]
 8005158:	e00b      	b.n	8005172 <HAL_RCC_OscConfig+0x36e>
 800515a:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	4a66      	ldr	r2, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	6213      	str	r3, [r2, #32]
 8005166:	4b64      	ldr	r3, [pc, #400]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	4a63      	ldr	r2, [pc, #396]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d015      	beq.n	80051a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517a:	f7fd f89b 	bl	80022b4 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005180:	e00a      	b.n	8005198 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005182:	f7fd f897 	bl	80022b4 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e0ab      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005198:	4b57      	ldr	r3, [pc, #348]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ee      	beq.n	8005182 <HAL_RCC_OscConfig+0x37e>
 80051a4:	e014      	b.n	80051d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a6:	f7fd f885 	bl	80022b4 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ac:	e00a      	b.n	80051c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fd f881 	bl	80022b4 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e095      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c4:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1ee      	bne.n	80051ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4b48      	ldr	r3, [pc, #288]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4a47      	ldr	r2, [pc, #284]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8081 	beq.w	80052ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ec:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d061      	beq.n	80052bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d146      	bne.n	800528e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005200:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005206:	f7fd f855 	bl	80022b4 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520e:	f7fd f851 	bl	80022b4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e067      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005220:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005234:	d108      	bne.n	8005248 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005236:	4b30      	ldr	r3, [pc, #192]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	492d      	ldr	r1, [pc, #180]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a19      	ldr	r1, [r3, #32]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	430b      	orrs	r3, r1
 800525a:	4927      	ldr	r1, [pc, #156]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fd f825 	bl	80022b4 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526e:	f7fd f821 	bl	80022b4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e037      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005280:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x46a>
 800528c:	e02f      	b.n	80052ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528e:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <HAL_RCC_OscConfig+0x4fc>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005294:	f7fd f80e 	bl	80022b4 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529c:	f7fd f80a 	bl	80022b4 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e020      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x498>
 80052ba:	e018      	b.n	80052ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e013      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCC_OscConfig+0x4f4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d106      	bne.n	80052ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40007000 	.word	0x40007000
 8005300:	42420060 	.word	0x42420060

08005304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0d0      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d910      	bls.n	8005348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b67      	ldr	r3, [pc, #412]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 0207 	bic.w	r2, r3, #7
 800532e:	4965      	ldr	r1, [pc, #404]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b63      	ldr	r3, [pc, #396]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0b8      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d020      	beq.n	8005396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005360:	4b59      	ldr	r3, [pc, #356]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a58      	ldr	r2, [pc, #352]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800536a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005378:	4b53      	ldr	r3, [pc, #332]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005384:	4b50      	ldr	r3, [pc, #320]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	494d      	ldr	r1, [pc, #308]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d040      	beq.n	8005424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053aa:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d115      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e07f      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e073      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d2:	4b3d      	ldr	r3, [pc, #244]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e06b      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e2:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f023 0203 	bic.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4936      	ldr	r1, [pc, #216]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f4:	f7fc ff5e 	bl	80022b4 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fc ff5a 	bl	80022b4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e053      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	4b2d      	ldr	r3, [pc, #180]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 020c 	and.w	r2, r3, #12
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d1eb      	bne.n	80053fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d210      	bcs.n	8005454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f023 0207 	bic.w	r2, r3, #7
 800543a:	4922      	ldr	r1, [pc, #136]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4313      	orrs	r3, r2
 8005440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e032      	b.n	80054ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4916      	ldr	r1, [pc, #88]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800547e:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	490e      	ldr	r1, [pc, #56]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800548e:	4313      	orrs	r3, r2
 8005490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005492:	f000 f821 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8005496:	4601      	mov	r1, r0
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	5cd3      	ldrb	r3, [r2, r3]
 80054a6:	fa21 f303 	lsr.w	r3, r1, r3
 80054aa:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <HAL_RCC_ClockConfig+0x1cc>)
 80054ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_ClockConfig+0x1d0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fc febc 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40022000 	.word	0x40022000
 80054c8:	40021000 	.word	0x40021000
 80054cc:	08009b44 	.word	0x08009b44
 80054d0:	20000038 	.word	0x20000038
 80054d4:	2000003c 	.word	0x2000003c

080054d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	b490      	push	{r4, r7}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80054de:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_RCC_GetSysClockFreq+0xb0>)
 80054e0:	1d3c      	adds	r4, r7, #4
 80054e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <HAL_RCC_GetSysClockFreq+0xb4>)
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005502:	4b23      	ldr	r3, [pc, #140]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d002      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x40>
 8005512:	2b08      	cmp	r3, #8
 8005514:	d003      	beq.n	800551e <HAL_RCC_GetSysClockFreq+0x46>
 8005516:	e02d      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005518:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <HAL_RCC_GetSysClockFreq+0xbc>)
 800551a:	623b      	str	r3, [r7, #32]
      break;
 800551c:	e02d      	b.n	800557a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	0c9b      	lsrs	r3, r3, #18
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800552a:	4413      	add	r3, r2
 800552c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005530:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d013      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800553c:	4b14      	ldr	r3, [pc, #80]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	0c5b      	lsrs	r3, r3, #17
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800554a:	4413      	add	r3, r2
 800554c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005550:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005556:	fb02 f203 	mul.w	r2, r2, r3
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
 8005562:	e004      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	623b      	str	r3, [r7, #32]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b07      	ldr	r3, [pc, #28]	; (8005594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005576:	623b      	str	r3, [r7, #32]
      break;
 8005578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557a:	6a3b      	ldr	r3, [r7, #32]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	; 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bc90      	pop	{r4, r7}
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	08009b30 	.word	0x08009b30
 800558c:	08009b40 	.word	0x08009b40
 8005590:	40021000 	.word	0x40021000
 8005594:	007a1200 	.word	0x007a1200
 8005598:	003d0900 	.word	0x003d0900

0800559c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a0:	4b02      	ldr	r3, [pc, #8]	; (80055ac <HAL_RCC_GetHCLKFreq+0x10>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	20000038 	.word	0x20000038

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055b4:	f7ff fff2 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055b8:	4601      	mov	r1, r0
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4a03      	ldr	r2, [pc, #12]	; (80055d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c6:	5cd3      	ldrb	r3, [r2, r3]
 80055c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	08009b54 	.word	0x08009b54

080055d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055dc:	f7ff ffde 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055e0:	4601      	mov	r1, r0
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	0adb      	lsrs	r3, r3, #11
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4a03      	ldr	r2, [pc, #12]	; (80055fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021000 	.word	0x40021000
 80055fc:	08009b54 	.word	0x08009b54

08005600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <RCC_Delay+0x34>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <RCC_Delay+0x38>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	0a5b      	lsrs	r3, r3, #9
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800561c:	bf00      	nop
  }
  while (Delay --);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1e5a      	subs	r2, r3, #1
 8005622:	60fa      	str	r2, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f9      	bne.n	800561c <RCC_Delay+0x1c>
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000038 	.word	0x20000038
 8005638:	10624dd3 	.word	0x10624dd3

0800563c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d07d      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005658:	2300      	movs	r3, #0
 800565a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565c:	4b4f      	ldr	r3, [pc, #316]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10d      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005668:	4b4c      	ldr	r3, [pc, #304]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4a4b      	ldr	r2, [pc, #300]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	61d3      	str	r3, [r2, #28]
 8005674:	4b49      	ldr	r3, [pc, #292]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d118      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005690:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a42      	ldr	r2, [pc, #264]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569c:	f7fc fe0a 	bl	80022b4 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a2:	e008      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a4:	f7fc fe06 	bl	80022b4 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e06d      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056c2:	4b36      	ldr	r3, [pc, #216]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d02e      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d027      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056e0:	4b2e      	ldr	r3, [pc, #184]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ea:	4b2e      	ldr	r3, [pc, #184]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056f0:	4b2c      	ldr	r3, [pc, #176]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056f6:	4a29      	ldr	r2, [pc, #164]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d014      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005706:	f7fc fdd5 	bl	80022b4 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570c:	e00a      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fc fdd1 	bl	80022b4 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e036      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	4b1d      	ldr	r3, [pc, #116]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ee      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005730:	4b1a      	ldr	r3, [pc, #104]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4917      	ldr	r1, [pc, #92]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	4313      	orrs	r3, r2
 8005740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d105      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005760:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	490b      	ldr	r1, [pc, #44]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576e:	4313      	orrs	r3, r2
 8005770:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4904      	ldr	r1, [pc, #16]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	40007000 	.word	0x40007000
 80057a4:	42420440 	.word	0x42420440

080057a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e076      	b.n	80058a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ca:	d009      	beq.n	80057e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	61da      	str	r2, [r3, #28]
 80057d2:	e005      	b.n	80057e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc f94e 	bl	8001a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005816:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	ea42 0103 	orr.w	r1, r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	0c1a      	lsrs	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f002 0204 	and.w	r2, r2, #4
 8005886:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005896:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	099b      	lsrs	r3, r3, #6
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10f      	bne.n	80058f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
    return;
 80058f2:	e0bf      	b.n	8005a74 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_SPI_IRQHandler+0x66>
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
    return;
 8005914:	e0ae      	b.n	8005a74 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_SPI_IRQHandler+0x80>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	099b      	lsrs	r3, r3, #6
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80a2 	beq.w	8005a74 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 809b 	beq.w	8005a74 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	099b      	lsrs	r3, r3, #6
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d023      	beq.n	8005992 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b03      	cmp	r3, #3
 8005954:	d011      	beq.n	800597a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	f043 0204 	orr.w	r2, r3, #4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	e00b      	b.n	8005992 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800597a:	2300      	movs	r3, #0
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	693b      	ldr	r3, [r7, #16]
        return;
 8005990:	e070      	b.n	8005a74 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d014      	beq.n	80059c8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d050      	beq.n	8005a72 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <HAL_SPI_IRQHandler+0x14c>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d034      	beq.n	8005a66 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0203 	bic.w	r2, r2, #3
 8005a0a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d011      	beq.n	8005a38 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a18:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <HAL_SPI_IRQHandler+0x1cc>)
 8005a1a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fd f9f7 	bl	8002e14 <HAL_DMA_Abort_IT>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d016      	beq.n	8005a6e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <HAL_SPI_IRQHandler+0x1cc>)
 8005a46:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fd f9e1 	bl	8002e14 <HAL_DMA_Abort_IT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005a64:	e003      	b.n	8005a6e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f80a 	bl	8005a80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a6c:	e000      	b.n	8005a70 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005a6e:	bf00      	nop
    return;
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
  }
}
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	08005a93 	.word	0x08005a93

08005a80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff ffe7 	bl	8005a80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e041      	b.n	8005b50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d106      	bne.n	8005ae6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7fc f889 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f000 fc1b 	bl	8006334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d001      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e03a      	b.n	8005be6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <HAL_TIM_Base_Start_IT+0x98>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x58>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9a:	d009      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x58>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x58>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d111      	bne.n	8005bd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d010      	beq.n	8005be4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	e007      	b.n	8005be4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800

08005bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e041      	b.n	8005c92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f839 	bl	8005c9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f000 fb7a 	bl	8006334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_TIM_PWM_Start+0x24>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	e022      	b.n	8005d16 <HAL_TIM_PWM_Start+0x6a>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d109      	bne.n	8005cea <HAL_TIM_PWM_Start+0x3e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	bf14      	ite	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	2300      	moveq	r3, #0
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	e015      	b.n	8005d16 <HAL_TIM_PWM_Start+0x6a>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d109      	bne.n	8005d04 <HAL_TIM_PWM_Start+0x58>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	bf14      	ite	ne
 8005cfc:	2301      	movne	r3, #1
 8005cfe:	2300      	moveq	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	e008      	b.n	8005d16 <HAL_TIM_PWM_Start+0x6a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	bf14      	ite	ne
 8005d10:	2301      	movne	r3, #1
 8005d12:	2300      	moveq	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e05e      	b.n	8005ddc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_PWM_Start+0x82>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d2c:	e013      	b.n	8005d56 <HAL_TIM_PWM_Start+0xaa>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_PWM_Start+0x92>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d3c:	e00b      	b.n	8005d56 <HAL_TIM_PWM_Start+0xaa>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d104      	bne.n	8005d4e <HAL_TIM_PWM_Start+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d4c:	e003      	b.n	8005d56 <HAL_TIM_PWM_Start+0xaa>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fd68 	bl	8006834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <HAL_TIM_PWM_Start+0x138>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d107      	bne.n	8005d7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <HAL_TIM_PWM_Start+0x138>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_TIM_PWM_Start+0xfa>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d009      	beq.n	8005da6 <HAL_TIM_PWM_Start+0xfa>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a14      	ldr	r2, [pc, #80]	; (8005de8 <HAL_TIM_PWM_Start+0x13c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIM_PWM_Start+0xfa>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a12      	ldr	r2, [pc, #72]	; (8005dec <HAL_TIM_PWM_Start+0x140>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d111      	bne.n	8005dca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d010      	beq.n	8005dda <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc8:	e007      	b.n	8005dda <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800

08005df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0202 	mvn.w	r2, #2
 8005e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa62 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa55 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fa64 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0204 	mvn.w	r2, #4
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa38 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa2b 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa3a 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0208 	mvn.w	r2, #8
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa0e 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa01 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fa10 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0210 	mvn.w	r2, #16
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f9e4 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f9d7 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f9e6 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10e      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d107      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0201 	mvn.w	r2, #1
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fb fb2a 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d10e      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8c:	2b80      	cmp	r3, #128	; 0x80
 8005f8e:	d107      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fd26 	bl	80069ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d107      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f9aa 	bl	8006320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d107      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0220 	mvn.w	r2, #32
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fcf1 	bl	80069da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006016:	2302      	movs	r3, #2
 8006018:	e0ac      	b.n	8006174 <HAL_TIM_PWM_ConfigChannel+0x174>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b0c      	cmp	r3, #12
 8006026:	f200 809f 	bhi.w	8006168 <HAL_TIM_PWM_ConfigChannel+0x168>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006065 	.word	0x08006065
 8006034:	08006169 	.word	0x08006169
 8006038:	08006169 	.word	0x08006169
 800603c:	08006169 	.word	0x08006169
 8006040:	080060a5 	.word	0x080060a5
 8006044:	08006169 	.word	0x08006169
 8006048:	08006169 	.word	0x08006169
 800604c:	08006169 	.word	0x08006169
 8006050:	080060e7 	.word	0x080060e7
 8006054:	08006169 	.word	0x08006169
 8006058:	08006169 	.word	0x08006169
 800605c:	08006169 	.word	0x08006169
 8006060:	08006127 	.word	0x08006127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f9c4 	bl	80063f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0208 	orr.w	r2, r2, #8
 800607e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0204 	bic.w	r2, r2, #4
 800608e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6999      	ldr	r1, [r3, #24]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	619a      	str	r2, [r3, #24]
      break;
 80060a2:	e062      	b.n	800616a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fa0a 	bl	80064c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6999      	ldr	r1, [r3, #24]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	619a      	str	r2, [r3, #24]
      break;
 80060e4:	e041      	b.n	800616a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fa53 	bl	8006598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0208 	orr.w	r2, r2, #8
 8006100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0204 	bic.w	r2, r2, #4
 8006110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69d9      	ldr	r1, [r3, #28]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	61da      	str	r2, [r3, #28]
      break;
 8006124:	e021      	b.n	800616a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fa9d 	bl	800666c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69d9      	ldr	r1, [r3, #28]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	021a      	lsls	r2, r3, #8
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	61da      	str	r2, [r3, #28]
      break;
 8006166:	e000      	b.n	800616a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006168:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIM_ConfigClockSource+0x18>
 8006190:	2302      	movs	r3, #2
 8006192:	e0a6      	b.n	80062e2 <HAL_TIM_ConfigClockSource+0x166>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d067      	beq.n	800629c <HAL_TIM_ConfigClockSource+0x120>
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d80b      	bhi.n	80061e8 <HAL_TIM_ConfigClockSource+0x6c>
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d073      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x140>
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d802      	bhi.n	80061de <HAL_TIM_ConfigClockSource+0x62>
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d06f      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061dc:	e078      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d06c      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x140>
 80061e2:	2b30      	cmp	r3, #48	; 0x30
 80061e4:	d06a      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061e6:	e073      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061e8:	2b70      	cmp	r3, #112	; 0x70
 80061ea:	d00d      	beq.n	8006208 <HAL_TIM_ConfigClockSource+0x8c>
 80061ec:	2b70      	cmp	r3, #112	; 0x70
 80061ee:	d804      	bhi.n	80061fa <HAL_TIM_ConfigClockSource+0x7e>
 80061f0:	2b50      	cmp	r3, #80	; 0x50
 80061f2:	d033      	beq.n	800625c <HAL_TIM_ConfigClockSource+0xe0>
 80061f4:	2b60      	cmp	r3, #96	; 0x60
 80061f6:	d041      	beq.n	800627c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80061f8:	e06a      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fe:	d066      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x152>
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006204:	d017      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006206:	e063      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6899      	ldr	r1, [r3, #8]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f000 faed 	bl	80067f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800622a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	609a      	str	r2, [r3, #8]
      break;
 8006234:	e04c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6899      	ldr	r1, [r3, #8]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f000 fad6 	bl	80067f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006258:	609a      	str	r2, [r3, #8]
      break;
 800625a:	e039      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	461a      	mov	r2, r3
 800626a:	f000 fa4d 	bl	8006708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2150      	movs	r1, #80	; 0x50
 8006274:	4618      	mov	r0, r3
 8006276:	f000 faa4 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 800627a:	e029      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	461a      	mov	r2, r3
 800628a:	f000 fa6b 	bl	8006764 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2160      	movs	r1, #96	; 0x60
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fa94 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 800629a:	e019      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	461a      	mov	r2, r3
 80062aa:	f000 fa2d 	bl	8006708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2140      	movs	r1, #64	; 0x40
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fa84 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 80062ba:	e009      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 fa7b 	bl	80067c2 <TIM_ITRx_SetConfig>
        break;
 80062cc:	e000      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr

0800630e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
	...

08006334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a29      	ldr	r2, [pc, #164]	; (80063ec <TIM_Base_SetConfig+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <TIM_Base_SetConfig+0x30>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006352:	d007      	beq.n	8006364 <TIM_Base_SetConfig+0x30>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a26      	ldr	r2, [pc, #152]	; (80063f0 <TIM_Base_SetConfig+0xbc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0x30>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a25      	ldr	r2, [pc, #148]	; (80063f4 <TIM_Base_SetConfig+0xc0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d108      	bne.n	8006376 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <TIM_Base_SetConfig+0xb8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_Base_SetConfig+0x62>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006384:	d007      	beq.n	8006396 <TIM_Base_SetConfig+0x62>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a19      	ldr	r2, [pc, #100]	; (80063f0 <TIM_Base_SetConfig+0xbc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0x62>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <TIM_Base_SetConfig+0xc0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a07      	ldr	r2, [pc, #28]	; (80063ec <TIM_Base_SetConfig+0xb8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d103      	bne.n	80063dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	615a      	str	r2, [r3, #20]
}
 80063e2:	bf00      	nop
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800

080063f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0201 	bic.w	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 0302 	bic.w	r3, r3, #2
 8006440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <TIM_OC1_SetConfig+0xc8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d10c      	bne.n	800646e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 0308 	bic.w	r3, r3, #8
 800645a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0304 	bic.w	r3, r3, #4
 800646c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a13      	ldr	r2, [pc, #76]	; (80064c0 <TIM_OC1_SetConfig+0xc8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d111      	bne.n	800649a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800647c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	621a      	str	r2, [r3, #32]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00

080064c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0210 	bic.w	r2, r3, #16
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0320 	bic.w	r3, r3, #32
 800650e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <TIM_OC2_SetConfig+0xd0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d10d      	bne.n	8006540 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a14      	ldr	r2, [pc, #80]	; (8006594 <TIM_OC2_SetConfig+0xd0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d113      	bne.n	8006570 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800654e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00

08006598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <TIM_OC3_SetConfig+0xd0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d10d      	bne.n	8006612 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a14      	ldr	r2, [pc, #80]	; (8006668 <TIM_OC3_SetConfig+0xd0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d113      	bne.n	8006642 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00

0800666c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	031b      	lsls	r3, r3, #12
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <TIM_OC4_SetConfig+0x98>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d109      	bne.n	80066e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	019b      	lsls	r3, r3, #6
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	40012c00 	.word	0x40012c00

08006708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f023 030a 	bic.w	r3, r3, #10
 8006744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f023 0210 	bic.w	r2, r3, #16
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800678e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	031b      	lsls	r3, r3, #12
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	621a      	str	r2, [r3, #32]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	f043 0307 	orr.w	r3, r3, #7
 80067e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	609a      	str	r2, [r3, #8]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b087      	sub	sp, #28
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006810:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	021a      	lsls	r2, r3, #8
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	431a      	orrs	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	4313      	orrs	r3, r2
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	609a      	str	r2, [r3, #8]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2201      	movs	r2, #1
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006890:	2302      	movs	r3, #2
 8006892:	e046      	b.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a16      	ldr	r2, [pc, #88]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e0:	d009      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a12      	ldr	r2, [pc, #72]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a10      	ldr	r2, [pc, #64]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d10c      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800

08006938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006950:	2302      	movs	r3, #2
 8006952:	e03d      	b.n	80069d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e03f      	b.n	8006a90 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fb f9f9 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2224      	movs	r2, #36	; 0x24
 8006a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fafe 	bl	8007044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d130      	bne.n	8006b14 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_UART_Transmit_IT+0x26>
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e029      	b.n	8006b16 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Transmit_IT+0x38>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e022      	b.n	8006b16 <HAL_UART_Transmit_IT+0x7e>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2221      	movs	r2, #33	; 0x21
 8006af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b0e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e000      	b.n	8006b16 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006b14:	2302      	movs	r3, #2
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d140      	bne.n	8006bbc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_UART_Receive_IT+0x26>
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e039      	b.n	8006bbe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_UART_Receive_IT+0x38>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e032      	b.n	8006bbe <HAL_UART_Receive_IT+0x9e>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	88fa      	ldrh	r2, [r7, #6]
 8006b6a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2222      	movs	r2, #34	; 0x22
 8006b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b96:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695a      	ldr	r2, [r3, #20]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0220 	orr.w	r2, r2, #32
 8006bb6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10d      	bne.n	8006c1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <HAL_UART_IRQHandler+0x52>
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f996 	bl	8006f44 <UART_Receive_IT>
      return;
 8006c18:	e0d1      	b.n	8006dbe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80b0 	beq.w	8006d82 <HAL_UART_IRQHandler+0x1ba>
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <HAL_UART_IRQHandler+0x70>
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a5 	beq.w	8006d82 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_UART_IRQHandler+0x90>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	f043 0201 	orr.w	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <HAL_UART_IRQHandler+0xb0>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c70:	f043 0202 	orr.w	r2, r3, #2
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <HAL_UART_IRQHandler+0xd0>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c90:	f043 0204 	orr.w	r2, r3, #4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00f      	beq.n	8006cc2 <HAL_UART_IRQHandler+0xfa>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <HAL_UART_IRQHandler+0xee>
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cba:	f043 0208 	orr.w	r2, r3, #8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d078      	beq.n	8006dbc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x11c>
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f930 	bl	8006f44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bf14      	ite	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2300      	moveq	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <HAL_UART_IRQHandler+0x144>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d031      	beq.n	8006d70 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f881 	bl	8006e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d023      	beq.n	8006d68 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695a      	ldr	r2, [r3, #20]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d013      	beq.n	8006d60 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3c:	4a21      	ldr	r2, [pc, #132]	; (8006dc4 <HAL_UART_IRQHandler+0x1fc>)
 8006d3e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fc f865 	bl	8002e14 <HAL_DMA_Abort_IT>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d016      	beq.n	8006d7e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5e:	e00e      	b.n	8006d7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f831 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d66:	e00a      	b.n	8006d7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f82d 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	e006      	b.n	8006d7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f829 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006d7c:	e01e      	b.n	8006dbc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7e:	bf00      	nop
    return;
 8006d80:	e01c      	b.n	8006dbc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d008      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1d6>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f86d 	bl	8006e76 <UART_Transmit_IT>
    return;
 8006d9c:	e00f      	b.n	8006dbe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <HAL_UART_IRQHandler+0x1f6>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8ae 	bl	8006f14 <UART_EndTransmit_IT>
    return;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <HAL_UART_IRQHandler+0x1f6>
    return;
 8006dbc:	bf00      	nop
  }
}
 8006dbe:	3720      	adds	r7, #32
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	08006e4f 	.word	0x08006e4f

08006dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b2db      	uxtb	r3, r3
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff ffad 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b21      	cmp	r3, #33	; 0x21
 8006e88:	d13e      	bne.n	8006f08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e92:	d114      	bne.n	8006ebe <UART_Transmit_IT+0x48>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d110      	bne.n	8006ebe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	1c9a      	adds	r2, r3, #2
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]
 8006ebc:	e008      	b.n	8006ed0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	1c59      	adds	r1, r3, #1
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6211      	str	r1, [r2, #32]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4619      	mov	r1, r3
 8006ede:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10f      	bne.n	8006f04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ef2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fa fb50 	bl	80015da <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b22      	cmp	r3, #34	; 0x22
 8006f56:	d170      	bne.n	800703a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d117      	bne.n	8006f92 <UART_Receive_IT+0x4e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d113      	bne.n	8006f92 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f90:	e026      	b.n	8006fe0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa4:	d007      	beq.n	8006fb6 <UART_Receive_IT+0x72>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <UART_Receive_IT+0x80>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e008      	b.n	8006fd6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4619      	mov	r1, r3
 8006fee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d120      	bne.n	8007036 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0220 	bic.w	r2, r2, #32
 8007002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fa fadd 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e002      	b.n	800703c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	e000      	b.n	800703c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800703a:	2302      	movs	r3, #2
  }
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800707e:	f023 030c 	bic.w	r3, r3, #12
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	430b      	orrs	r3, r1
 800708a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2c      	ldr	r2, [pc, #176]	; (8007158 <UART_SetConfig+0x114>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d103      	bne.n	80070b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80070ac:	f7fe fa94 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	e002      	b.n	80070ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80070b4:	f7fe fa7c 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 80070b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009a      	lsls	r2, r3, #2
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d0:	4a22      	ldr	r2, [pc, #136]	; (800715c <UART_SetConfig+0x118>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	0119      	lsls	r1, r3, #4
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009a      	lsls	r2, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80070f0:	4b1a      	ldr	r3, [pc, #104]	; (800715c <UART_SetConfig+0x118>)
 80070f2:	fba3 0302 	umull	r0, r3, r3, r2
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	2064      	movs	r0, #100	; 0x64
 80070fa:	fb00 f303 	mul.w	r3, r0, r3
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	3332      	adds	r3, #50	; 0x32
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <UART_SetConfig+0x118>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007110:	4419      	add	r1, r3
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009a      	lsls	r2, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	fbb2 f2f3 	udiv	r2, r2, r3
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <UART_SetConfig+0x118>)
 800712a:	fba3 0302 	umull	r0, r3, r3, r2
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	2064      	movs	r0, #100	; 0x64
 8007132:	fb00 f303 	mul.w	r3, r0, r3
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	3332      	adds	r3, #50	; 0x32
 800713c:	4a07      	ldr	r2, [pc, #28]	; (800715c <UART_SetConfig+0x118>)
 800713e:	fba2 2303 	umull	r2, r3, r2, r3
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	f003 020f 	and.w	r2, r3, #15
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	440a      	add	r2, r1
 800714e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40013800 	.word	0x40013800
 800715c:	51eb851f 	.word	0x51eb851f

08007160 <atoi>:
 8007160:	220a      	movs	r2, #10
 8007162:	2100      	movs	r1, #0
 8007164:	f001 b96a 	b.w	800843c <strtol>

08007168 <__errno>:
 8007168:	4b01      	ldr	r3, [pc, #4]	; (8007170 <__errno+0x8>)
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000044 	.word	0x20000044

08007174 <__libc_init_array>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	2500      	movs	r5, #0
 8007178:	4e0c      	ldr	r6, [pc, #48]	; (80071ac <__libc_init_array+0x38>)
 800717a:	4c0d      	ldr	r4, [pc, #52]	; (80071b0 <__libc_init_array+0x3c>)
 800717c:	1ba4      	subs	r4, r4, r6
 800717e:	10a4      	asrs	r4, r4, #2
 8007180:	42a5      	cmp	r5, r4
 8007182:	d109      	bne.n	8007198 <__libc_init_array+0x24>
 8007184:	f002 fcb2 	bl	8009aec <_init>
 8007188:	2500      	movs	r5, #0
 800718a:	4e0a      	ldr	r6, [pc, #40]	; (80071b4 <__libc_init_array+0x40>)
 800718c:	4c0a      	ldr	r4, [pc, #40]	; (80071b8 <__libc_init_array+0x44>)
 800718e:	1ba4      	subs	r4, r4, r6
 8007190:	10a4      	asrs	r4, r4, #2
 8007192:	42a5      	cmp	r5, r4
 8007194:	d105      	bne.n	80071a2 <__libc_init_array+0x2e>
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800719c:	4798      	blx	r3
 800719e:	3501      	adds	r5, #1
 80071a0:	e7ee      	b.n	8007180 <__libc_init_array+0xc>
 80071a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071a6:	4798      	blx	r3
 80071a8:	3501      	adds	r5, #1
 80071aa:	e7f2      	b.n	8007192 <__libc_init_array+0x1e>
 80071ac:	08009e60 	.word	0x08009e60
 80071b0:	08009e60 	.word	0x08009e60
 80071b4:	08009e60 	.word	0x08009e60
 80071b8:	08009e64 	.word	0x08009e64

080071bc <memcpy>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	1e43      	subs	r3, r0, #1
 80071c0:	440a      	add	r2, r1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	d100      	bne.n	80071c8 <memcpy+0xc>
 80071c6:	bd10      	pop	{r4, pc}
 80071c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d0:	e7f7      	b.n	80071c2 <memcpy+0x6>

080071d2 <memset>:
 80071d2:	4603      	mov	r3, r0
 80071d4:	4402      	add	r2, r0
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d100      	bne.n	80071dc <memset+0xa>
 80071da:	4770      	bx	lr
 80071dc:	f803 1b01 	strb.w	r1, [r3], #1
 80071e0:	e7f9      	b.n	80071d6 <memset+0x4>
	...

080071e4 <_scanf_float>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	469a      	mov	sl, r3
 80071ea:	688b      	ldr	r3, [r1, #8]
 80071ec:	4616      	mov	r6, r2
 80071ee:	1e5a      	subs	r2, r3, #1
 80071f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80071f4:	bf88      	it	hi
 80071f6:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80071fa:	b087      	sub	sp, #28
 80071fc:	bf85      	ittet	hi
 80071fe:	189b      	addhi	r3, r3, r2
 8007200:	9301      	strhi	r3, [sp, #4]
 8007202:	2300      	movls	r3, #0
 8007204:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007208:	4688      	mov	r8, r1
 800720a:	f04f 0b00 	mov.w	fp, #0
 800720e:	bf8c      	ite	hi
 8007210:	608b      	strhi	r3, [r1, #8]
 8007212:	9301      	strls	r3, [sp, #4]
 8007214:	680b      	ldr	r3, [r1, #0]
 8007216:	4607      	mov	r7, r0
 8007218:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800721c:	f848 3b1c 	str.w	r3, [r8], #28
 8007220:	460c      	mov	r4, r1
 8007222:	4645      	mov	r5, r8
 8007224:	465a      	mov	r2, fp
 8007226:	46d9      	mov	r9, fp
 8007228:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800722c:	f8cd b008 	str.w	fp, [sp, #8]
 8007230:	68a1      	ldr	r1, [r4, #8]
 8007232:	b181      	cbz	r1, 8007256 <_scanf_float+0x72>
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b49      	cmp	r3, #73	; 0x49
 800723a:	d071      	beq.n	8007320 <_scanf_float+0x13c>
 800723c:	d84d      	bhi.n	80072da <_scanf_float+0xf6>
 800723e:	2b39      	cmp	r3, #57	; 0x39
 8007240:	d840      	bhi.n	80072c4 <_scanf_float+0xe0>
 8007242:	2b31      	cmp	r3, #49	; 0x31
 8007244:	f080 8088 	bcs.w	8007358 <_scanf_float+0x174>
 8007248:	2b2d      	cmp	r3, #45	; 0x2d
 800724a:	f000 8090 	beq.w	800736e <_scanf_float+0x18a>
 800724e:	d815      	bhi.n	800727c <_scanf_float+0x98>
 8007250:	2b2b      	cmp	r3, #43	; 0x2b
 8007252:	f000 808c 	beq.w	800736e <_scanf_float+0x18a>
 8007256:	f1b9 0f00 	cmp.w	r9, #0
 800725a:	d003      	beq.n	8007264 <_scanf_float+0x80>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	3a01      	subs	r2, #1
 8007266:	2a01      	cmp	r2, #1
 8007268:	f200 80ea 	bhi.w	8007440 <_scanf_float+0x25c>
 800726c:	4545      	cmp	r5, r8
 800726e:	f200 80dc 	bhi.w	800742a <_scanf_float+0x246>
 8007272:	2601      	movs	r6, #1
 8007274:	4630      	mov	r0, r6
 8007276:	b007      	add	sp, #28
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	2b2e      	cmp	r3, #46	; 0x2e
 800727e:	f000 809f 	beq.w	80073c0 <_scanf_float+0x1dc>
 8007282:	2b30      	cmp	r3, #48	; 0x30
 8007284:	d1e7      	bne.n	8007256 <_scanf_float+0x72>
 8007286:	6820      	ldr	r0, [r4, #0]
 8007288:	f410 7f80 	tst.w	r0, #256	; 0x100
 800728c:	d064      	beq.n	8007358 <_scanf_float+0x174>
 800728e:	9b01      	ldr	r3, [sp, #4]
 8007290:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007294:	6020      	str	r0, [r4, #0]
 8007296:	f109 0901 	add.w	r9, r9, #1
 800729a:	b11b      	cbz	r3, 80072a4 <_scanf_float+0xc0>
 800729c:	3b01      	subs	r3, #1
 800729e:	3101      	adds	r1, #1
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	60a1      	str	r1, [r4, #8]
 80072a4:	68a3      	ldr	r3, [r4, #8]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	60a3      	str	r3, [r4, #8]
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	3301      	adds	r3, #1
 80072ae:	6123      	str	r3, [r4, #16]
 80072b0:	6873      	ldr	r3, [r6, #4]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	6073      	str	r3, [r6, #4]
 80072b8:	f340 80ac 	ble.w	8007414 <_scanf_float+0x230>
 80072bc:	6833      	ldr	r3, [r6, #0]
 80072be:	3301      	adds	r3, #1
 80072c0:	6033      	str	r3, [r6, #0]
 80072c2:	e7b5      	b.n	8007230 <_scanf_float+0x4c>
 80072c4:	2b45      	cmp	r3, #69	; 0x45
 80072c6:	f000 8085 	beq.w	80073d4 <_scanf_float+0x1f0>
 80072ca:	2b46      	cmp	r3, #70	; 0x46
 80072cc:	d06a      	beq.n	80073a4 <_scanf_float+0x1c0>
 80072ce:	2b41      	cmp	r3, #65	; 0x41
 80072d0:	d1c1      	bne.n	8007256 <_scanf_float+0x72>
 80072d2:	2a01      	cmp	r2, #1
 80072d4:	d1bf      	bne.n	8007256 <_scanf_float+0x72>
 80072d6:	2202      	movs	r2, #2
 80072d8:	e046      	b.n	8007368 <_scanf_float+0x184>
 80072da:	2b65      	cmp	r3, #101	; 0x65
 80072dc:	d07a      	beq.n	80073d4 <_scanf_float+0x1f0>
 80072de:	d818      	bhi.n	8007312 <_scanf_float+0x12e>
 80072e0:	2b54      	cmp	r3, #84	; 0x54
 80072e2:	d066      	beq.n	80073b2 <_scanf_float+0x1ce>
 80072e4:	d811      	bhi.n	800730a <_scanf_float+0x126>
 80072e6:	2b4e      	cmp	r3, #78	; 0x4e
 80072e8:	d1b5      	bne.n	8007256 <_scanf_float+0x72>
 80072ea:	2a00      	cmp	r2, #0
 80072ec:	d146      	bne.n	800737c <_scanf_float+0x198>
 80072ee:	f1b9 0f00 	cmp.w	r9, #0
 80072f2:	d145      	bne.n	8007380 <_scanf_float+0x19c>
 80072f4:	6821      	ldr	r1, [r4, #0]
 80072f6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80072fa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80072fe:	d13f      	bne.n	8007380 <_scanf_float+0x19c>
 8007300:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007304:	6021      	str	r1, [r4, #0]
 8007306:	2201      	movs	r2, #1
 8007308:	e02e      	b.n	8007368 <_scanf_float+0x184>
 800730a:	2b59      	cmp	r3, #89	; 0x59
 800730c:	d01e      	beq.n	800734c <_scanf_float+0x168>
 800730e:	2b61      	cmp	r3, #97	; 0x61
 8007310:	e7de      	b.n	80072d0 <_scanf_float+0xec>
 8007312:	2b6e      	cmp	r3, #110	; 0x6e
 8007314:	d0e9      	beq.n	80072ea <_scanf_float+0x106>
 8007316:	d815      	bhi.n	8007344 <_scanf_float+0x160>
 8007318:	2b66      	cmp	r3, #102	; 0x66
 800731a:	d043      	beq.n	80073a4 <_scanf_float+0x1c0>
 800731c:	2b69      	cmp	r3, #105	; 0x69
 800731e:	d19a      	bne.n	8007256 <_scanf_float+0x72>
 8007320:	f1bb 0f00 	cmp.w	fp, #0
 8007324:	d138      	bne.n	8007398 <_scanf_float+0x1b4>
 8007326:	f1b9 0f00 	cmp.w	r9, #0
 800732a:	d197      	bne.n	800725c <_scanf_float+0x78>
 800732c:	6821      	ldr	r1, [r4, #0]
 800732e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007332:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007336:	d195      	bne.n	8007264 <_scanf_float+0x80>
 8007338:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800733c:	6021      	str	r1, [r4, #0]
 800733e:	f04f 0b01 	mov.w	fp, #1
 8007342:	e011      	b.n	8007368 <_scanf_float+0x184>
 8007344:	2b74      	cmp	r3, #116	; 0x74
 8007346:	d034      	beq.n	80073b2 <_scanf_float+0x1ce>
 8007348:	2b79      	cmp	r3, #121	; 0x79
 800734a:	d184      	bne.n	8007256 <_scanf_float+0x72>
 800734c:	f1bb 0f07 	cmp.w	fp, #7
 8007350:	d181      	bne.n	8007256 <_scanf_float+0x72>
 8007352:	f04f 0b08 	mov.w	fp, #8
 8007356:	e007      	b.n	8007368 <_scanf_float+0x184>
 8007358:	eb12 0f0b 	cmn.w	r2, fp
 800735c:	f47f af7b 	bne.w	8007256 <_scanf_float+0x72>
 8007360:	6821      	ldr	r1, [r4, #0]
 8007362:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007366:	6021      	str	r1, [r4, #0]
 8007368:	702b      	strb	r3, [r5, #0]
 800736a:	3501      	adds	r5, #1
 800736c:	e79a      	b.n	80072a4 <_scanf_float+0xc0>
 800736e:	6821      	ldr	r1, [r4, #0]
 8007370:	0608      	lsls	r0, r1, #24
 8007372:	f57f af70 	bpl.w	8007256 <_scanf_float+0x72>
 8007376:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800737a:	e7f4      	b.n	8007366 <_scanf_float+0x182>
 800737c:	2a02      	cmp	r2, #2
 800737e:	d047      	beq.n	8007410 <_scanf_float+0x22c>
 8007380:	f1bb 0f01 	cmp.w	fp, #1
 8007384:	d003      	beq.n	800738e <_scanf_float+0x1aa>
 8007386:	f1bb 0f04 	cmp.w	fp, #4
 800738a:	f47f af64 	bne.w	8007256 <_scanf_float+0x72>
 800738e:	f10b 0b01 	add.w	fp, fp, #1
 8007392:	fa5f fb8b 	uxtb.w	fp, fp
 8007396:	e7e7      	b.n	8007368 <_scanf_float+0x184>
 8007398:	f1bb 0f03 	cmp.w	fp, #3
 800739c:	d0f7      	beq.n	800738e <_scanf_float+0x1aa>
 800739e:	f1bb 0f05 	cmp.w	fp, #5
 80073a2:	e7f2      	b.n	800738a <_scanf_float+0x1a6>
 80073a4:	f1bb 0f02 	cmp.w	fp, #2
 80073a8:	f47f af55 	bne.w	8007256 <_scanf_float+0x72>
 80073ac:	f04f 0b03 	mov.w	fp, #3
 80073b0:	e7da      	b.n	8007368 <_scanf_float+0x184>
 80073b2:	f1bb 0f06 	cmp.w	fp, #6
 80073b6:	f47f af4e 	bne.w	8007256 <_scanf_float+0x72>
 80073ba:	f04f 0b07 	mov.w	fp, #7
 80073be:	e7d3      	b.n	8007368 <_scanf_float+0x184>
 80073c0:	6821      	ldr	r1, [r4, #0]
 80073c2:	0588      	lsls	r0, r1, #22
 80073c4:	f57f af47 	bpl.w	8007256 <_scanf_float+0x72>
 80073c8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80073cc:	6021      	str	r1, [r4, #0]
 80073ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80073d2:	e7c9      	b.n	8007368 <_scanf_float+0x184>
 80073d4:	6821      	ldr	r1, [r4, #0]
 80073d6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80073da:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80073de:	d006      	beq.n	80073ee <_scanf_float+0x20a>
 80073e0:	0548      	lsls	r0, r1, #21
 80073e2:	f57f af38 	bpl.w	8007256 <_scanf_float+0x72>
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	f43f af3b 	beq.w	8007264 <_scanf_float+0x80>
 80073ee:	0588      	lsls	r0, r1, #22
 80073f0:	bf58      	it	pl
 80073f2:	9802      	ldrpl	r0, [sp, #8]
 80073f4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80073f8:	bf58      	it	pl
 80073fa:	eba9 0000 	subpl.w	r0, r9, r0
 80073fe:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007402:	bf58      	it	pl
 8007404:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007408:	6021      	str	r1, [r4, #0]
 800740a:	f04f 0900 	mov.w	r9, #0
 800740e:	e7ab      	b.n	8007368 <_scanf_float+0x184>
 8007410:	2203      	movs	r2, #3
 8007412:	e7a9      	b.n	8007368 <_scanf_float+0x184>
 8007414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007418:	4631      	mov	r1, r6
 800741a:	4638      	mov	r0, r7
 800741c:	9205      	str	r2, [sp, #20]
 800741e:	4798      	blx	r3
 8007420:	9a05      	ldr	r2, [sp, #20]
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f af04 	beq.w	8007230 <_scanf_float+0x4c>
 8007428:	e715      	b.n	8007256 <_scanf_float+0x72>
 800742a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800742e:	4632      	mov	r2, r6
 8007430:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007434:	4638      	mov	r0, r7
 8007436:	4798      	blx	r3
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	3b01      	subs	r3, #1
 800743c:	6123      	str	r3, [r4, #16]
 800743e:	e715      	b.n	800726c <_scanf_float+0x88>
 8007440:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007444:	2b06      	cmp	r3, #6
 8007446:	d80a      	bhi.n	800745e <_scanf_float+0x27a>
 8007448:	f1bb 0f02 	cmp.w	fp, #2
 800744c:	d967      	bls.n	800751e <_scanf_float+0x33a>
 800744e:	f1ab 0b03 	sub.w	fp, fp, #3
 8007452:	fa5f fb8b 	uxtb.w	fp, fp
 8007456:	eba5 0b0b 	sub.w	fp, r5, fp
 800745a:	455d      	cmp	r5, fp
 800745c:	d14a      	bne.n	80074f4 <_scanf_float+0x310>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	05da      	lsls	r2, r3, #23
 8007462:	d51f      	bpl.n	80074a4 <_scanf_float+0x2c0>
 8007464:	055b      	lsls	r3, r3, #21
 8007466:	d467      	bmi.n	8007538 <_scanf_float+0x354>
 8007468:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	2965      	cmp	r1, #101	; 0x65
 8007470:	f103 33ff 	add.w	r3, r3, #4294967295
 8007474:	f105 3bff 	add.w	fp, r5, #4294967295
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	d00d      	beq.n	8007498 <_scanf_float+0x2b4>
 800747c:	2945      	cmp	r1, #69	; 0x45
 800747e:	d00b      	beq.n	8007498 <_scanf_float+0x2b4>
 8007480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007484:	4632      	mov	r2, r6
 8007486:	4638      	mov	r0, r7
 8007488:	4798      	blx	r3
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007490:	3b01      	subs	r3, #1
 8007492:	f1a5 0b02 	sub.w	fp, r5, #2
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800749c:	4632      	mov	r2, r6
 800749e:	4638      	mov	r0, r7
 80074a0:	4798      	blx	r3
 80074a2:	465d      	mov	r5, fp
 80074a4:	6826      	ldr	r6, [r4, #0]
 80074a6:	f016 0610 	ands.w	r6, r6, #16
 80074aa:	d176      	bne.n	800759a <_scanf_float+0x3b6>
 80074ac:	702e      	strb	r6, [r5, #0]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d141      	bne.n	800753e <_scanf_float+0x35a>
 80074ba:	9b02      	ldr	r3, [sp, #8]
 80074bc:	eba9 0303 	sub.w	r3, r9, r3
 80074c0:	425a      	negs	r2, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d148      	bne.n	8007558 <_scanf_float+0x374>
 80074c6:	4641      	mov	r1, r8
 80074c8:	2200      	movs	r2, #0
 80074ca:	4638      	mov	r0, r7
 80074cc:	f000 fec4 	bl	8008258 <_strtod_r>
 80074d0:	6825      	ldr	r5, [r4, #0]
 80074d2:	4680      	mov	r8, r0
 80074d4:	f015 0f02 	tst.w	r5, #2
 80074d8:	4689      	mov	r9, r1
 80074da:	f8da 3000 	ldr.w	r3, [sl]
 80074de:	d046      	beq.n	800756e <_scanf_float+0x38a>
 80074e0:	1d1a      	adds	r2, r3, #4
 80074e2:	f8ca 2000 	str.w	r2, [sl]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	e9c3 8900 	strd	r8, r9, [r3]
 80074ec:	68e3      	ldr	r3, [r4, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60e3      	str	r3, [r4, #12]
 80074f2:	e6bf      	b.n	8007274 <_scanf_float+0x90>
 80074f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074f8:	4632      	mov	r2, r6
 80074fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80074fe:	4638      	mov	r0, r7
 8007500:	4798      	blx	r3
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	3b01      	subs	r3, #1
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	e7a7      	b.n	800745a <_scanf_float+0x276>
 800750a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800750e:	4632      	mov	r2, r6
 8007510:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007514:	4638      	mov	r0, r7
 8007516:	4798      	blx	r3
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	3b01      	subs	r3, #1
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	4545      	cmp	r5, r8
 8007520:	d8f3      	bhi.n	800750a <_scanf_float+0x326>
 8007522:	e6a6      	b.n	8007272 <_scanf_float+0x8e>
 8007524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007528:	4632      	mov	r2, r6
 800752a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800752e:	4638      	mov	r0, r7
 8007530:	4798      	blx	r3
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	3b01      	subs	r3, #1
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	4545      	cmp	r5, r8
 800753a:	d8f3      	bhi.n	8007524 <_scanf_float+0x340>
 800753c:	e699      	b.n	8007272 <_scanf_float+0x8e>
 800753e:	9b03      	ldr	r3, [sp, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0c0      	beq.n	80074c6 <_scanf_float+0x2e2>
 8007544:	9904      	ldr	r1, [sp, #16]
 8007546:	230a      	movs	r3, #10
 8007548:	4632      	mov	r2, r6
 800754a:	3101      	adds	r1, #1
 800754c:	4638      	mov	r0, r7
 800754e:	f000 ff63 	bl	8008418 <_strtol_r>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	9d04      	ldr	r5, [sp, #16]
 8007556:	1ac2      	subs	r2, r0, r3
 8007558:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800755c:	429d      	cmp	r5, r3
 800755e:	bf28      	it	cs
 8007560:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007564:	490e      	ldr	r1, [pc, #56]	; (80075a0 <_scanf_float+0x3bc>)
 8007566:	4628      	mov	r0, r5
 8007568:	f000 f820 	bl	80075ac <siprintf>
 800756c:	e7ab      	b.n	80074c6 <_scanf_float+0x2e2>
 800756e:	1d1f      	adds	r7, r3, #4
 8007570:	f015 0504 	ands.w	r5, r5, #4
 8007574:	f8ca 7000 	str.w	r7, [sl]
 8007578:	d1b5      	bne.n	80074e6 <_scanf_float+0x302>
 800757a:	681f      	ldr	r7, [r3, #0]
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	f7f9 fa44 	bl	8000a0c <__aeabi_dcmpun>
 8007584:	b120      	cbz	r0, 8007590 <_scanf_float+0x3ac>
 8007586:	4628      	mov	r0, r5
 8007588:	f000 f80c 	bl	80075a4 <nanf>
 800758c:	6038      	str	r0, [r7, #0]
 800758e:	e7ad      	b.n	80074ec <_scanf_float+0x308>
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	f7f9 fa98 	bl	8000ac8 <__aeabi_d2f>
 8007598:	e7f8      	b.n	800758c <_scanf_float+0x3a8>
 800759a:	2600      	movs	r6, #0
 800759c:	e66a      	b.n	8007274 <_scanf_float+0x90>
 800759e:	bf00      	nop
 80075a0:	08009b5c 	.word	0x08009b5c

080075a4 <nanf>:
 80075a4:	4800      	ldr	r0, [pc, #0]	; (80075a8 <nanf+0x4>)
 80075a6:	4770      	bx	lr
 80075a8:	7fc00000 	.word	0x7fc00000

080075ac <siprintf>:
 80075ac:	b40e      	push	{r1, r2, r3}
 80075ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075b2:	b500      	push	{lr}
 80075b4:	b09c      	sub	sp, #112	; 0x70
 80075b6:	ab1d      	add	r3, sp, #116	; 0x74
 80075b8:	9002      	str	r0, [sp, #8]
 80075ba:	9006      	str	r0, [sp, #24]
 80075bc:	9107      	str	r1, [sp, #28]
 80075be:	9104      	str	r1, [sp, #16]
 80075c0:	4808      	ldr	r0, [pc, #32]	; (80075e4 <siprintf+0x38>)
 80075c2:	4909      	ldr	r1, [pc, #36]	; (80075e8 <siprintf+0x3c>)
 80075c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c8:	9105      	str	r1, [sp, #20]
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	a902      	add	r1, sp, #8
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	f001 ff98 	bl	8009504 <_svfiprintf_r>
 80075d4:	2200      	movs	r2, #0
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	b01c      	add	sp, #112	; 0x70
 80075dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e0:	b003      	add	sp, #12
 80075e2:	4770      	bx	lr
 80075e4:	20000044 	.word	0x20000044
 80075e8:	ffff0208 	.word	0xffff0208

080075ec <strncmp>:
 80075ec:	b510      	push	{r4, lr}
 80075ee:	b16a      	cbz	r2, 800760c <strncmp+0x20>
 80075f0:	3901      	subs	r1, #1
 80075f2:	1884      	adds	r4, r0, r2
 80075f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d103      	bne.n	8007608 <strncmp+0x1c>
 8007600:	42a0      	cmp	r0, r4
 8007602:	d001      	beq.n	8007608 <strncmp+0x1c>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f5      	bne.n	80075f4 <strncmp+0x8>
 8007608:	1a98      	subs	r0, r3, r2
 800760a:	bd10      	pop	{r4, pc}
 800760c:	4610      	mov	r0, r2
 800760e:	e7fc      	b.n	800760a <strncmp+0x1e>

08007610 <sulp>:
 8007610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	460f      	mov	r7, r1
 8007616:	4690      	mov	r8, r2
 8007618:	f001 fd38 	bl	800908c <__ulp>
 800761c:	4604      	mov	r4, r0
 800761e:	460d      	mov	r5, r1
 8007620:	f1b8 0f00 	cmp.w	r8, #0
 8007624:	d011      	beq.n	800764a <sulp+0x3a>
 8007626:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800762a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd0b      	ble.n	800764a <sulp+0x3a>
 8007632:	2400      	movs	r4, #0
 8007634:	051b      	lsls	r3, r3, #20
 8007636:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800763a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800763e:	4622      	mov	r2, r4
 8007640:	462b      	mov	r3, r5
 8007642:	f7f8 ff49 	bl	80004d8 <__aeabi_dmul>
 8007646:	4604      	mov	r4, r0
 8007648:	460d      	mov	r5, r1
 800764a:	4620      	mov	r0, r4
 800764c:	4629      	mov	r1, r5
 800764e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007652:	0000      	movs	r0, r0
 8007654:	0000      	movs	r0, r0
	...

08007658 <_strtod_l>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	461f      	mov	r7, r3
 800765e:	2300      	movs	r3, #0
 8007660:	b0a1      	sub	sp, #132	; 0x84
 8007662:	4683      	mov	fp, r0
 8007664:	4638      	mov	r0, r7
 8007666:	460e      	mov	r6, r1
 8007668:	9217      	str	r2, [sp, #92]	; 0x5c
 800766a:	931c      	str	r3, [sp, #112]	; 0x70
 800766c:	f001 fa27 	bl	8008abe <__localeconv_l>
 8007670:	4680      	mov	r8, r0
 8007672:	6800      	ldr	r0, [r0, #0]
 8007674:	f7f8 fd6c 	bl	8000150 <strlen>
 8007678:	f04f 0900 	mov.w	r9, #0
 800767c:	4604      	mov	r4, r0
 800767e:	f04f 0a00 	mov.w	sl, #0
 8007682:	961b      	str	r6, [sp, #108]	; 0x6c
 8007684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007686:	781a      	ldrb	r2, [r3, #0]
 8007688:	2a0d      	cmp	r2, #13
 800768a:	d832      	bhi.n	80076f2 <_strtod_l+0x9a>
 800768c:	2a09      	cmp	r2, #9
 800768e:	d236      	bcs.n	80076fe <_strtod_l+0xa6>
 8007690:	2a00      	cmp	r2, #0
 8007692:	d03e      	beq.n	8007712 <_strtod_l+0xba>
 8007694:	2300      	movs	r3, #0
 8007696:	930d      	str	r3, [sp, #52]	; 0x34
 8007698:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800769a:	782b      	ldrb	r3, [r5, #0]
 800769c:	2b30      	cmp	r3, #48	; 0x30
 800769e:	f040 80ac 	bne.w	80077fa <_strtod_l+0x1a2>
 80076a2:	786b      	ldrb	r3, [r5, #1]
 80076a4:	2b58      	cmp	r3, #88	; 0x58
 80076a6:	d001      	beq.n	80076ac <_strtod_l+0x54>
 80076a8:	2b78      	cmp	r3, #120	; 0x78
 80076aa:	d167      	bne.n	800777c <_strtod_l+0x124>
 80076ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ae:	9702      	str	r7, [sp, #8]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	ab1c      	add	r3, sp, #112	; 0x70
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	4a89      	ldr	r2, [pc, #548]	; (80078dc <_strtod_l+0x284>)
 80076b8:	ab1d      	add	r3, sp, #116	; 0x74
 80076ba:	a91b      	add	r1, sp, #108	; 0x6c
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 ff23 	bl	8008508 <__gethex>
 80076c2:	f010 0407 	ands.w	r4, r0, #7
 80076c6:	4606      	mov	r6, r0
 80076c8:	d005      	beq.n	80076d6 <_strtod_l+0x7e>
 80076ca:	2c06      	cmp	r4, #6
 80076cc:	d12b      	bne.n	8007726 <_strtod_l+0xce>
 80076ce:	2300      	movs	r3, #0
 80076d0:	3501      	adds	r5, #1
 80076d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80076d4:	930d      	str	r3, [sp, #52]	; 0x34
 80076d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f040 85a6 	bne.w	800822a <_strtod_l+0xbd2>
 80076de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e0:	b1e3      	cbz	r3, 800771c <_strtod_l+0xc4>
 80076e2:	464a      	mov	r2, r9
 80076e4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80076e8:	4610      	mov	r0, r2
 80076ea:	4619      	mov	r1, r3
 80076ec:	b021      	add	sp, #132	; 0x84
 80076ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f2:	2a2b      	cmp	r2, #43	; 0x2b
 80076f4:	d015      	beq.n	8007722 <_strtod_l+0xca>
 80076f6:	2a2d      	cmp	r2, #45	; 0x2d
 80076f8:	d004      	beq.n	8007704 <_strtod_l+0xac>
 80076fa:	2a20      	cmp	r2, #32
 80076fc:	d1ca      	bne.n	8007694 <_strtod_l+0x3c>
 80076fe:	3301      	adds	r3, #1
 8007700:	931b      	str	r3, [sp, #108]	; 0x6c
 8007702:	e7bf      	b.n	8007684 <_strtod_l+0x2c>
 8007704:	2201      	movs	r2, #1
 8007706:	920d      	str	r2, [sp, #52]	; 0x34
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	921b      	str	r2, [sp, #108]	; 0x6c
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1c2      	bne.n	8007698 <_strtod_l+0x40>
 8007712:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007714:	961b      	str	r6, [sp, #108]	; 0x6c
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 8585 	bne.w	8008226 <_strtod_l+0xbce>
 800771c:	464a      	mov	r2, r9
 800771e:	4653      	mov	r3, sl
 8007720:	e7e2      	b.n	80076e8 <_strtod_l+0x90>
 8007722:	2200      	movs	r2, #0
 8007724:	e7ef      	b.n	8007706 <_strtod_l+0xae>
 8007726:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007728:	b13a      	cbz	r2, 800773a <_strtod_l+0xe2>
 800772a:	2135      	movs	r1, #53	; 0x35
 800772c:	a81e      	add	r0, sp, #120	; 0x78
 800772e:	f001 fda0 	bl	8009272 <__copybits>
 8007732:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007734:	4658      	mov	r0, fp
 8007736:	f001 fa13 	bl	8008b60 <_Bfree>
 800773a:	3c01      	subs	r4, #1
 800773c:	2c04      	cmp	r4, #4
 800773e:	d806      	bhi.n	800774e <_strtod_l+0xf6>
 8007740:	e8df f004 	tbb	[pc, r4]
 8007744:	1714030a 	.word	0x1714030a
 8007748:	0a          	.byte	0x0a
 8007749:	00          	.byte	0x00
 800774a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800774e:	0731      	lsls	r1, r6, #28
 8007750:	d5c1      	bpl.n	80076d6 <_strtod_l+0x7e>
 8007752:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8007756:	e7be      	b.n	80076d6 <_strtod_l+0x7e>
 8007758:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800775a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800775e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007766:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800776a:	e7f0      	b.n	800774e <_strtod_l+0xf6>
 800776c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80078e0 <_strtod_l+0x288>
 8007770:	e7ed      	b.n	800774e <_strtod_l+0xf6>
 8007772:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007776:	f04f 39ff 	mov.w	r9, #4294967295
 800777a:	e7e8      	b.n	800774e <_strtod_l+0xf6>
 800777c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	921b      	str	r2, [sp, #108]	; 0x6c
 8007782:	785b      	ldrb	r3, [r3, #1]
 8007784:	2b30      	cmp	r3, #48	; 0x30
 8007786:	d0f9      	beq.n	800777c <_strtod_l+0x124>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d0a4      	beq.n	80076d6 <_strtod_l+0x7e>
 800778c:	2301      	movs	r3, #1
 800778e:	2500      	movs	r5, #0
 8007790:	220a      	movs	r2, #10
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007796:	9506      	str	r5, [sp, #24]
 8007798:	9308      	str	r3, [sp, #32]
 800779a:	9504      	str	r5, [sp, #16]
 800779c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800779e:	7807      	ldrb	r7, [r0, #0]
 80077a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80077a4:	b2d9      	uxtb	r1, r3
 80077a6:	2909      	cmp	r1, #9
 80077a8:	d929      	bls.n	80077fe <_strtod_l+0x1a6>
 80077aa:	4622      	mov	r2, r4
 80077ac:	f8d8 1000 	ldr.w	r1, [r8]
 80077b0:	f7ff ff1c 	bl	80075ec <strncmp>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d031      	beq.n	800781c <_strtod_l+0x1c4>
 80077b8:	2000      	movs	r0, #0
 80077ba:	463b      	mov	r3, r7
 80077bc:	4602      	mov	r2, r0
 80077be:	9c04      	ldr	r4, [sp, #16]
 80077c0:	9005      	str	r0, [sp, #20]
 80077c2:	2b65      	cmp	r3, #101	; 0x65
 80077c4:	d001      	beq.n	80077ca <_strtod_l+0x172>
 80077c6:	2b45      	cmp	r3, #69	; 0x45
 80077c8:	d114      	bne.n	80077f4 <_strtod_l+0x19c>
 80077ca:	b924      	cbnz	r4, 80077d6 <_strtod_l+0x17e>
 80077cc:	b910      	cbnz	r0, 80077d4 <_strtod_l+0x17c>
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d09e      	beq.n	8007712 <_strtod_l+0xba>
 80077d4:	2400      	movs	r4, #0
 80077d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80077d8:	1c73      	adds	r3, r6, #1
 80077da:	931b      	str	r3, [sp, #108]	; 0x6c
 80077dc:	7873      	ldrb	r3, [r6, #1]
 80077de:	2b2b      	cmp	r3, #43	; 0x2b
 80077e0:	d078      	beq.n	80078d4 <_strtod_l+0x27c>
 80077e2:	2b2d      	cmp	r3, #45	; 0x2d
 80077e4:	d070      	beq.n	80078c8 <_strtod_l+0x270>
 80077e6:	f04f 0c00 	mov.w	ip, #0
 80077ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80077ee:	2f09      	cmp	r7, #9
 80077f0:	d97c      	bls.n	80078ec <_strtod_l+0x294>
 80077f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80077f4:	f04f 0e00 	mov.w	lr, #0
 80077f8:	e09a      	b.n	8007930 <_strtod_l+0x2d8>
 80077fa:	2300      	movs	r3, #0
 80077fc:	e7c7      	b.n	800778e <_strtod_l+0x136>
 80077fe:	9904      	ldr	r1, [sp, #16]
 8007800:	3001      	adds	r0, #1
 8007802:	2908      	cmp	r1, #8
 8007804:	bfd7      	itett	le
 8007806:	9906      	ldrle	r1, [sp, #24]
 8007808:	fb02 3505 	mlagt	r5, r2, r5, r3
 800780c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007810:	9306      	strle	r3, [sp, #24]
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	901b      	str	r0, [sp, #108]	; 0x6c
 8007816:	3301      	adds	r3, #1
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	e7bf      	b.n	800779c <_strtod_l+0x144>
 800781c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800781e:	191a      	adds	r2, r3, r4
 8007820:	921b      	str	r2, [sp, #108]	; 0x6c
 8007822:	9a04      	ldr	r2, [sp, #16]
 8007824:	5d1b      	ldrb	r3, [r3, r4]
 8007826:	2a00      	cmp	r2, #0
 8007828:	d037      	beq.n	800789a <_strtod_l+0x242>
 800782a:	4602      	mov	r2, r0
 800782c:	9c04      	ldr	r4, [sp, #16]
 800782e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007832:	2909      	cmp	r1, #9
 8007834:	d913      	bls.n	800785e <_strtod_l+0x206>
 8007836:	2101      	movs	r1, #1
 8007838:	9105      	str	r1, [sp, #20]
 800783a:	e7c2      	b.n	80077c2 <_strtod_l+0x16a>
 800783c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800783e:	3001      	adds	r0, #1
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	921b      	str	r2, [sp, #108]	; 0x6c
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b30      	cmp	r3, #48	; 0x30
 8007848:	d0f8      	beq.n	800783c <_strtod_l+0x1e4>
 800784a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800784e:	2a08      	cmp	r2, #8
 8007850:	f200 84f0 	bhi.w	8008234 <_strtod_l+0xbdc>
 8007854:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007856:	9208      	str	r2, [sp, #32]
 8007858:	4602      	mov	r2, r0
 800785a:	2000      	movs	r0, #0
 800785c:	4604      	mov	r4, r0
 800785e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007862:	f100 0101 	add.w	r1, r0, #1
 8007866:	d012      	beq.n	800788e <_strtod_l+0x236>
 8007868:	440a      	add	r2, r1
 800786a:	270a      	movs	r7, #10
 800786c:	4621      	mov	r1, r4
 800786e:	eb00 0c04 	add.w	ip, r0, r4
 8007872:	458c      	cmp	ip, r1
 8007874:	d113      	bne.n	800789e <_strtod_l+0x246>
 8007876:	1821      	adds	r1, r4, r0
 8007878:	2908      	cmp	r1, #8
 800787a:	f104 0401 	add.w	r4, r4, #1
 800787e:	4404      	add	r4, r0
 8007880:	dc19      	bgt.n	80078b6 <_strtod_l+0x25e>
 8007882:	210a      	movs	r1, #10
 8007884:	9b06      	ldr	r3, [sp, #24]
 8007886:	fb01 e303 	mla	r3, r1, r3, lr
 800788a:	9306      	str	r3, [sp, #24]
 800788c:	2100      	movs	r1, #0
 800788e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007890:	1c58      	adds	r0, r3, #1
 8007892:	901b      	str	r0, [sp, #108]	; 0x6c
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	4608      	mov	r0, r1
 8007898:	e7c9      	b.n	800782e <_strtod_l+0x1d6>
 800789a:	9804      	ldr	r0, [sp, #16]
 800789c:	e7d3      	b.n	8007846 <_strtod_l+0x1ee>
 800789e:	2908      	cmp	r1, #8
 80078a0:	f101 0101 	add.w	r1, r1, #1
 80078a4:	dc03      	bgt.n	80078ae <_strtod_l+0x256>
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	437b      	muls	r3, r7
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	e7e1      	b.n	8007872 <_strtod_l+0x21a>
 80078ae:	2910      	cmp	r1, #16
 80078b0:	bfd8      	it	le
 80078b2:	437d      	mulle	r5, r7
 80078b4:	e7dd      	b.n	8007872 <_strtod_l+0x21a>
 80078b6:	2c10      	cmp	r4, #16
 80078b8:	bfdc      	itt	le
 80078ba:	210a      	movle	r1, #10
 80078bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80078c0:	e7e4      	b.n	800788c <_strtod_l+0x234>
 80078c2:	2301      	movs	r3, #1
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	e781      	b.n	80077cc <_strtod_l+0x174>
 80078c8:	f04f 0c01 	mov.w	ip, #1
 80078cc:	1cb3      	adds	r3, r6, #2
 80078ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80078d0:	78b3      	ldrb	r3, [r6, #2]
 80078d2:	e78a      	b.n	80077ea <_strtod_l+0x192>
 80078d4:	f04f 0c00 	mov.w	ip, #0
 80078d8:	e7f8      	b.n	80078cc <_strtod_l+0x274>
 80078da:	bf00      	nop
 80078dc:	08009b70 	.word	0x08009b70
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078e6:	1c5f      	adds	r7, r3, #1
 80078e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b30      	cmp	r3, #48	; 0x30
 80078ee:	d0f9      	beq.n	80078e4 <_strtod_l+0x28c>
 80078f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80078f4:	2f08      	cmp	r7, #8
 80078f6:	f63f af7d 	bhi.w	80077f4 <_strtod_l+0x19c>
 80078fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80078fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007900:	9309      	str	r3, [sp, #36]	; 0x24
 8007902:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007904:	1c5f      	adds	r7, r3, #1
 8007906:	971b      	str	r7, [sp, #108]	; 0x6c
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800790e:	f1b8 0f09 	cmp.w	r8, #9
 8007912:	d937      	bls.n	8007984 <_strtod_l+0x32c>
 8007914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007916:	1a7f      	subs	r7, r7, r1
 8007918:	2f08      	cmp	r7, #8
 800791a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800791e:	dc37      	bgt.n	8007990 <_strtod_l+0x338>
 8007920:	45be      	cmp	lr, r7
 8007922:	bfa8      	it	ge
 8007924:	46be      	movge	lr, r7
 8007926:	f1bc 0f00 	cmp.w	ip, #0
 800792a:	d001      	beq.n	8007930 <_strtod_l+0x2d8>
 800792c:	f1ce 0e00 	rsb	lr, lr, #0
 8007930:	2c00      	cmp	r4, #0
 8007932:	d151      	bne.n	80079d8 <_strtod_l+0x380>
 8007934:	2800      	cmp	r0, #0
 8007936:	f47f aece 	bne.w	80076d6 <_strtod_l+0x7e>
 800793a:	9a07      	ldr	r2, [sp, #28]
 800793c:	2a00      	cmp	r2, #0
 800793e:	f47f aeca 	bne.w	80076d6 <_strtod_l+0x7e>
 8007942:	9a05      	ldr	r2, [sp, #20]
 8007944:	2a00      	cmp	r2, #0
 8007946:	f47f aee4 	bne.w	8007712 <_strtod_l+0xba>
 800794a:	2b4e      	cmp	r3, #78	; 0x4e
 800794c:	d027      	beq.n	800799e <_strtod_l+0x346>
 800794e:	dc21      	bgt.n	8007994 <_strtod_l+0x33c>
 8007950:	2b49      	cmp	r3, #73	; 0x49
 8007952:	f47f aede 	bne.w	8007712 <_strtod_l+0xba>
 8007956:	49a4      	ldr	r1, [pc, #656]	; (8007be8 <_strtod_l+0x590>)
 8007958:	a81b      	add	r0, sp, #108	; 0x6c
 800795a:	f001 f809 	bl	8008970 <__match>
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f aed7 	beq.w	8007712 <_strtod_l+0xba>
 8007964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007966:	49a1      	ldr	r1, [pc, #644]	; (8007bec <_strtod_l+0x594>)
 8007968:	3b01      	subs	r3, #1
 800796a:	a81b      	add	r0, sp, #108	; 0x6c
 800796c:	931b      	str	r3, [sp, #108]	; 0x6c
 800796e:	f000 ffff 	bl	8008970 <__match>
 8007972:	b910      	cbnz	r0, 800797a <_strtod_l+0x322>
 8007974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007976:	3301      	adds	r3, #1
 8007978:	931b      	str	r3, [sp, #108]	; 0x6c
 800797a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007c00 <_strtod_l+0x5a8>
 800797e:	f04f 0900 	mov.w	r9, #0
 8007982:	e6a8      	b.n	80076d6 <_strtod_l+0x7e>
 8007984:	210a      	movs	r1, #10
 8007986:	fb01 3e0e 	mla	lr, r1, lr, r3
 800798a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800798e:	e7b8      	b.n	8007902 <_strtod_l+0x2aa>
 8007990:	46be      	mov	lr, r7
 8007992:	e7c8      	b.n	8007926 <_strtod_l+0x2ce>
 8007994:	2b69      	cmp	r3, #105	; 0x69
 8007996:	d0de      	beq.n	8007956 <_strtod_l+0x2fe>
 8007998:	2b6e      	cmp	r3, #110	; 0x6e
 800799a:	f47f aeba 	bne.w	8007712 <_strtod_l+0xba>
 800799e:	4994      	ldr	r1, [pc, #592]	; (8007bf0 <_strtod_l+0x598>)
 80079a0:	a81b      	add	r0, sp, #108	; 0x6c
 80079a2:	f000 ffe5 	bl	8008970 <__match>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	f43f aeb3 	beq.w	8007712 <_strtod_l+0xba>
 80079ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b28      	cmp	r3, #40	; 0x28
 80079b2:	d10e      	bne.n	80079d2 <_strtod_l+0x37a>
 80079b4:	aa1e      	add	r2, sp, #120	; 0x78
 80079b6:	498f      	ldr	r1, [pc, #572]	; (8007bf4 <_strtod_l+0x59c>)
 80079b8:	a81b      	add	r0, sp, #108	; 0x6c
 80079ba:	f000 ffed 	bl	8008998 <__hexnan>
 80079be:	2805      	cmp	r0, #5
 80079c0:	d107      	bne.n	80079d2 <_strtod_l+0x37a>
 80079c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079c4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80079c8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80079cc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80079d0:	e681      	b.n	80076d6 <_strtod_l+0x7e>
 80079d2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007c08 <_strtod_l+0x5b0>
 80079d6:	e7d2      	b.n	800797e <_strtod_l+0x326>
 80079d8:	ebae 0302 	sub.w	r3, lr, r2
 80079dc:	9307      	str	r3, [sp, #28]
 80079de:	9b04      	ldr	r3, [sp, #16]
 80079e0:	9806      	ldr	r0, [sp, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf08      	it	eq
 80079e6:	4623      	moveq	r3, r4
 80079e8:	2c10      	cmp	r4, #16
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	46a0      	mov	r8, r4
 80079ee:	bfa8      	it	ge
 80079f0:	f04f 0810 	movge.w	r8, #16
 80079f4:	f7f8 fcf6 	bl	80003e4 <__aeabi_ui2d>
 80079f8:	2c09      	cmp	r4, #9
 80079fa:	4681      	mov	r9, r0
 80079fc:	468a      	mov	sl, r1
 80079fe:	dc13      	bgt.n	8007a28 <_strtod_l+0x3d0>
 8007a00:	9b07      	ldr	r3, [sp, #28]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f43f ae67 	beq.w	80076d6 <_strtod_l+0x7e>
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	dd7e      	ble.n	8007b0a <_strtod_l+0x4b2>
 8007a0c:	2b16      	cmp	r3, #22
 8007a0e:	dc65      	bgt.n	8007adc <_strtod_l+0x484>
 8007a10:	4a79      	ldr	r2, [pc, #484]	; (8007bf8 <_strtod_l+0x5a0>)
 8007a12:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007a16:	464a      	mov	r2, r9
 8007a18:	e9de 0100 	ldrd	r0, r1, [lr]
 8007a1c:	4653      	mov	r3, sl
 8007a1e:	f7f8 fd5b 	bl	80004d8 <__aeabi_dmul>
 8007a22:	4681      	mov	r9, r0
 8007a24:	468a      	mov	sl, r1
 8007a26:	e656      	b.n	80076d6 <_strtod_l+0x7e>
 8007a28:	4b73      	ldr	r3, [pc, #460]	; (8007bf8 <_strtod_l+0x5a0>)
 8007a2a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a32:	f7f8 fd51 	bl	80004d8 <__aeabi_dmul>
 8007a36:	4606      	mov	r6, r0
 8007a38:	4628      	mov	r0, r5
 8007a3a:	460f      	mov	r7, r1
 8007a3c:	f7f8 fcd2 	bl	80003e4 <__aeabi_ui2d>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4630      	mov	r0, r6
 8007a46:	4639      	mov	r1, r7
 8007a48:	f7f8 fb90 	bl	800016c <__adddf3>
 8007a4c:	2c0f      	cmp	r4, #15
 8007a4e:	4681      	mov	r9, r0
 8007a50:	468a      	mov	sl, r1
 8007a52:	ddd5      	ble.n	8007a00 <_strtod_l+0x3a8>
 8007a54:	9b07      	ldr	r3, [sp, #28]
 8007a56:	eba4 0808 	sub.w	r8, r4, r8
 8007a5a:	4498      	add	r8, r3
 8007a5c:	f1b8 0f00 	cmp.w	r8, #0
 8007a60:	f340 809a 	ble.w	8007b98 <_strtod_l+0x540>
 8007a64:	f018 030f 	ands.w	r3, r8, #15
 8007a68:	d00a      	beq.n	8007a80 <_strtod_l+0x428>
 8007a6a:	4963      	ldr	r1, [pc, #396]	; (8007bf8 <_strtod_l+0x5a0>)
 8007a6c:	464a      	mov	r2, r9
 8007a6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a76:	4653      	mov	r3, sl
 8007a78:	f7f8 fd2e 	bl	80004d8 <__aeabi_dmul>
 8007a7c:	4681      	mov	r9, r0
 8007a7e:	468a      	mov	sl, r1
 8007a80:	f038 080f 	bics.w	r8, r8, #15
 8007a84:	d077      	beq.n	8007b76 <_strtod_l+0x51e>
 8007a86:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a8a:	dd4b      	ble.n	8007b24 <_strtod_l+0x4cc>
 8007a8c:	f04f 0800 	mov.w	r8, #0
 8007a90:	f8cd 8010 	str.w	r8, [sp, #16]
 8007a94:	f8cd 8020 	str.w	r8, [sp, #32]
 8007a98:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a9c:	2322      	movs	r3, #34	; 0x22
 8007a9e:	f04f 0900 	mov.w	r9, #0
 8007aa2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007c00 <_strtod_l+0x5a8>
 8007aa6:	f8cb 3000 	str.w	r3, [fp]
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f43f ae12 	beq.w	80076d6 <_strtod_l+0x7e>
 8007ab2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ab4:	4658      	mov	r0, fp
 8007ab6:	f001 f853 	bl	8008b60 <_Bfree>
 8007aba:	9906      	ldr	r1, [sp, #24]
 8007abc:	4658      	mov	r0, fp
 8007abe:	f001 f84f 	bl	8008b60 <_Bfree>
 8007ac2:	9904      	ldr	r1, [sp, #16]
 8007ac4:	4658      	mov	r0, fp
 8007ac6:	f001 f84b 	bl	8008b60 <_Bfree>
 8007aca:	9908      	ldr	r1, [sp, #32]
 8007acc:	4658      	mov	r0, fp
 8007ace:	f001 f847 	bl	8008b60 <_Bfree>
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f001 f843 	bl	8008b60 <_Bfree>
 8007ada:	e5fc      	b.n	80076d6 <_strtod_l+0x7e>
 8007adc:	9a07      	ldr	r2, [sp, #28]
 8007ade:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	dbb6      	blt.n	8007a54 <_strtod_l+0x3fc>
 8007ae6:	4d44      	ldr	r5, [pc, #272]	; (8007bf8 <_strtod_l+0x5a0>)
 8007ae8:	f1c4 040f 	rsb	r4, r4, #15
 8007aec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007af0:	464a      	mov	r2, r9
 8007af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af6:	4653      	mov	r3, sl
 8007af8:	f7f8 fcee 	bl	80004d8 <__aeabi_dmul>
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	1b1c      	subs	r4, r3, r4
 8007b00:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007b04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b08:	e789      	b.n	8007a1e <_strtod_l+0x3c6>
 8007b0a:	f113 0f16 	cmn.w	r3, #22
 8007b0e:	dba1      	blt.n	8007a54 <_strtod_l+0x3fc>
 8007b10:	4a39      	ldr	r2, [pc, #228]	; (8007bf8 <_strtod_l+0x5a0>)
 8007b12:	4648      	mov	r0, r9
 8007b14:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007b18:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007b1c:	4651      	mov	r1, sl
 8007b1e:	f7f8 fe05 	bl	800072c <__aeabi_ddiv>
 8007b22:	e77e      	b.n	8007a22 <_strtod_l+0x3ca>
 8007b24:	2300      	movs	r3, #0
 8007b26:	4648      	mov	r0, r9
 8007b28:	4651      	mov	r1, sl
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	4e33      	ldr	r6, [pc, #204]	; (8007bfc <_strtod_l+0x5a4>)
 8007b2e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007b32:	f1b8 0f01 	cmp.w	r8, #1
 8007b36:	dc21      	bgt.n	8007b7c <_strtod_l+0x524>
 8007b38:	b10b      	cbz	r3, 8007b3e <_strtod_l+0x4e6>
 8007b3a:	4681      	mov	r9, r0
 8007b3c:	468a      	mov	sl, r1
 8007b3e:	4b2f      	ldr	r3, [pc, #188]	; (8007bfc <_strtod_l+0x5a4>)
 8007b40:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007b44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007b48:	464a      	mov	r2, r9
 8007b4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007b4e:	4653      	mov	r3, sl
 8007b50:	f7f8 fcc2 	bl	80004d8 <__aeabi_dmul>
 8007b54:	4b2a      	ldr	r3, [pc, #168]	; (8007c00 <_strtod_l+0x5a8>)
 8007b56:	460a      	mov	r2, r1
 8007b58:	400b      	ands	r3, r1
 8007b5a:	492a      	ldr	r1, [pc, #168]	; (8007c04 <_strtod_l+0x5ac>)
 8007b5c:	4681      	mov	r9, r0
 8007b5e:	428b      	cmp	r3, r1
 8007b60:	d894      	bhi.n	8007a8c <_strtod_l+0x434>
 8007b62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b66:	428b      	cmp	r3, r1
 8007b68:	bf86      	itte	hi
 8007b6a:	f04f 39ff 	movhi.w	r9, #4294967295
 8007b6e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8007c0c <_strtod_l+0x5b4>
 8007b72:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007b76:	2300      	movs	r3, #0
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	e07b      	b.n	8007c74 <_strtod_l+0x61c>
 8007b7c:	f018 0f01 	tst.w	r8, #1
 8007b80:	d006      	beq.n	8007b90 <_strtod_l+0x538>
 8007b82:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 fca5 	bl	80004d8 <__aeabi_dmul>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	3501      	adds	r5, #1
 8007b92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b96:	e7cc      	b.n	8007b32 <_strtod_l+0x4da>
 8007b98:	d0ed      	beq.n	8007b76 <_strtod_l+0x51e>
 8007b9a:	f1c8 0800 	rsb	r8, r8, #0
 8007b9e:	f018 020f 	ands.w	r2, r8, #15
 8007ba2:	d00a      	beq.n	8007bba <_strtod_l+0x562>
 8007ba4:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <_strtod_l+0x5a0>)
 8007ba6:	4648      	mov	r0, r9
 8007ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bac:	4651      	mov	r1, sl
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fdbb 	bl	800072c <__aeabi_ddiv>
 8007bb6:	4681      	mov	r9, r0
 8007bb8:	468a      	mov	sl, r1
 8007bba:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007bbe:	d0da      	beq.n	8007b76 <_strtod_l+0x51e>
 8007bc0:	f1b8 0f1f 	cmp.w	r8, #31
 8007bc4:	dd24      	ble.n	8007c10 <_strtod_l+0x5b8>
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	f8cd 8010 	str.w	r8, [sp, #16]
 8007bce:	f8cd 8020 	str.w	r8, [sp, #32]
 8007bd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bd6:	2322      	movs	r3, #34	; 0x22
 8007bd8:	f04f 0900 	mov.w	r9, #0
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	f8cb 3000 	str.w	r3, [fp]
 8007be4:	e761      	b.n	8007aaa <_strtod_l+0x452>
 8007be6:	bf00      	nop
 8007be8:	08009b61 	.word	0x08009b61
 8007bec:	08009b64 	.word	0x08009b64
 8007bf0:	08009b6a 	.word	0x08009b6a
 8007bf4:	08009b84 	.word	0x08009b84
 8007bf8:	08009bf8 	.word	0x08009bf8
 8007bfc:	08009bd0 	.word	0x08009bd0
 8007c00:	7ff00000 	.word	0x7ff00000
 8007c04:	7ca00000 	.word	0x7ca00000
 8007c08:	fff80000 	.word	0xfff80000
 8007c0c:	7fefffff 	.word	0x7fefffff
 8007c10:	f018 0310 	ands.w	r3, r8, #16
 8007c14:	bf18      	it	ne
 8007c16:	236a      	movne	r3, #106	; 0x6a
 8007c18:	4648      	mov	r0, r9
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	4651      	mov	r1, sl
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4da1      	ldr	r5, [pc, #644]	; (8007ea8 <_strtod_l+0x850>)
 8007c22:	f1b8 0f00 	cmp.w	r8, #0
 8007c26:	f300 8113 	bgt.w	8007e50 <_strtod_l+0x7f8>
 8007c2a:	b10b      	cbz	r3, 8007c30 <_strtod_l+0x5d8>
 8007c2c:	4681      	mov	r9, r0
 8007c2e:	468a      	mov	sl, r1
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	b1bb      	cbz	r3, 8007c64 <_strtod_l+0x60c>
 8007c34:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007c38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	4651      	mov	r1, sl
 8007c40:	dd10      	ble.n	8007c64 <_strtod_l+0x60c>
 8007c42:	2b1f      	cmp	r3, #31
 8007c44:	f340 8110 	ble.w	8007e68 <_strtod_l+0x810>
 8007c48:	2b34      	cmp	r3, #52	; 0x34
 8007c4a:	bfd8      	it	le
 8007c4c:	f04f 32ff 	movle.w	r2, #4294967295
 8007c50:	f04f 0900 	mov.w	r9, #0
 8007c54:	bfcf      	iteee	gt
 8007c56:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8007c5a:	3b20      	suble	r3, #32
 8007c5c:	fa02 f303 	lslle.w	r3, r2, r3
 8007c60:	ea03 0a01 	andle.w	sl, r3, r1
 8007c64:	2200      	movs	r2, #0
 8007c66:	2300      	movs	r3, #0
 8007c68:	4648      	mov	r0, r9
 8007c6a:	4651      	mov	r1, sl
 8007c6c:	f7f8 fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1a8      	bne.n	8007bc6 <_strtod_l+0x56e>
 8007c74:	9b06      	ldr	r3, [sp, #24]
 8007c76:	9a04      	ldr	r2, [sp, #16]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	9908      	ldr	r1, [sp, #32]
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	4658      	mov	r0, fp
 8007c80:	f000 ffc0 	bl	8008c04 <__s2b>
 8007c84:	9008      	str	r0, [sp, #32]
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f43f af00 	beq.w	8007a8c <_strtod_l+0x434>
 8007c8c:	9a07      	ldr	r2, [sp, #28]
 8007c8e:	9b07      	ldr	r3, [sp, #28]
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	f1c3 0300 	rsb	r3, r3, #0
 8007c96:	bfa8      	it	ge
 8007c98:	2300      	movge	r3, #0
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	930e      	str	r3, [sp, #56]	; 0x38
 8007ca0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ca4:	9316      	str	r3, [sp, #88]	; 0x58
 8007ca6:	f8cd 8010 	str.w	r8, [sp, #16]
 8007caa:	9b08      	ldr	r3, [sp, #32]
 8007cac:	4658      	mov	r0, fp
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	f000 ff22 	bl	8008af8 <_Balloc>
 8007cb4:	9006      	str	r0, [sp, #24]
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f43f aef0 	beq.w	8007a9c <_strtod_l+0x444>
 8007cbc:	9b08      	ldr	r3, [sp, #32]
 8007cbe:	300c      	adds	r0, #12
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	f103 010c 	add.w	r1, r3, #12
 8007cc6:	3202      	adds	r2, #2
 8007cc8:	0092      	lsls	r2, r2, #2
 8007cca:	f7ff fa77 	bl	80071bc <memcpy>
 8007cce:	ab1e      	add	r3, sp, #120	; 0x78
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	464a      	mov	r2, r9
 8007cd8:	4653      	mov	r3, sl
 8007cda:	4658      	mov	r0, fp
 8007cdc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007ce0:	f001 fa4a 	bl	8009178 <__d2b>
 8007ce4:	901c      	str	r0, [sp, #112]	; 0x70
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f43f aed8 	beq.w	8007a9c <_strtod_l+0x444>
 8007cec:	2101      	movs	r1, #1
 8007cee:	4658      	mov	r0, fp
 8007cf0:	f001 f814 	bl	8008d1c <__i2b>
 8007cf4:	9004      	str	r0, [sp, #16]
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f43f aecf 	beq.w	8007a9c <_strtod_l+0x444>
 8007cfe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007d00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	bfab      	itete	ge
 8007d06:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007d08:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007d0a:	18ee      	addge	r6, r5, r3
 8007d0c:	1b5c      	sublt	r4, r3, r5
 8007d0e:	9b05      	ldr	r3, [sp, #20]
 8007d10:	bfa8      	it	ge
 8007d12:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007d14:	eba5 0503 	sub.w	r5, r5, r3
 8007d18:	4415      	add	r5, r2
 8007d1a:	4b64      	ldr	r3, [pc, #400]	; (8007eac <_strtod_l+0x854>)
 8007d1c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007d20:	bfb8      	it	lt
 8007d22:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007d24:	429d      	cmp	r5, r3
 8007d26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d2a:	f280 80af 	bge.w	8007e8c <_strtod_l+0x834>
 8007d2e:	1b5b      	subs	r3, r3, r5
 8007d30:	2b1f      	cmp	r3, #31
 8007d32:	eba2 0203 	sub.w	r2, r2, r3
 8007d36:	f04f 0701 	mov.w	r7, #1
 8007d3a:	f300 809c 	bgt.w	8007e76 <_strtod_l+0x81e>
 8007d3e:	2500      	movs	r5, #0
 8007d40:	fa07 f303 	lsl.w	r3, r7, r3
 8007d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d46:	18b7      	adds	r7, r6, r2
 8007d48:	9b05      	ldr	r3, [sp, #20]
 8007d4a:	42be      	cmp	r6, r7
 8007d4c:	4414      	add	r4, r2
 8007d4e:	441c      	add	r4, r3
 8007d50:	4633      	mov	r3, r6
 8007d52:	bfa8      	it	ge
 8007d54:	463b      	movge	r3, r7
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	bfa8      	it	ge
 8007d5a:	4623      	movge	r3, r4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfc2      	ittt	gt
 8007d60:	1aff      	subgt	r7, r7, r3
 8007d62:	1ae4      	subgt	r4, r4, r3
 8007d64:	1af6      	subgt	r6, r6, r3
 8007d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d68:	b1bb      	cbz	r3, 8007d9a <_strtod_l+0x742>
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	9904      	ldr	r1, [sp, #16]
 8007d6e:	4658      	mov	r0, fp
 8007d70:	f001 f872 	bl	8008e58 <__pow5mult>
 8007d74:	9004      	str	r0, [sp, #16]
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f ae90 	beq.w	8007a9c <_strtod_l+0x444>
 8007d7c:	4601      	mov	r1, r0
 8007d7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d80:	4658      	mov	r0, fp
 8007d82:	f000 ffd4 	bl	8008d2e <__multiply>
 8007d86:	9009      	str	r0, [sp, #36]	; 0x24
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f43f ae87 	beq.w	8007a9c <_strtod_l+0x444>
 8007d8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d90:	4658      	mov	r0, fp
 8007d92:	f000 fee5 	bl	8008b60 <_Bfree>
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	931c      	str	r3, [sp, #112]	; 0x70
 8007d9a:	2f00      	cmp	r7, #0
 8007d9c:	dc7a      	bgt.n	8007e94 <_strtod_l+0x83c>
 8007d9e:	9b07      	ldr	r3, [sp, #28]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd08      	ble.n	8007db6 <_strtod_l+0x75e>
 8007da4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007da6:	9906      	ldr	r1, [sp, #24]
 8007da8:	4658      	mov	r0, fp
 8007daa:	f001 f855 	bl	8008e58 <__pow5mult>
 8007dae:	9006      	str	r0, [sp, #24]
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f43f ae73 	beq.w	8007a9c <_strtod_l+0x444>
 8007db6:	2c00      	cmp	r4, #0
 8007db8:	dd08      	ble.n	8007dcc <_strtod_l+0x774>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	9906      	ldr	r1, [sp, #24]
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f001 f898 	bl	8008ef4 <__lshift>
 8007dc4:	9006      	str	r0, [sp, #24]
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f43f ae68 	beq.w	8007a9c <_strtod_l+0x444>
 8007dcc:	2e00      	cmp	r6, #0
 8007dce:	dd08      	ble.n	8007de2 <_strtod_l+0x78a>
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	9904      	ldr	r1, [sp, #16]
 8007dd4:	4658      	mov	r0, fp
 8007dd6:	f001 f88d 	bl	8008ef4 <__lshift>
 8007dda:	9004      	str	r0, [sp, #16]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f43f ae5d 	beq.w	8007a9c <_strtod_l+0x444>
 8007de2:	9a06      	ldr	r2, [sp, #24]
 8007de4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007de6:	4658      	mov	r0, fp
 8007de8:	f001 f8f2 	bl	8008fd0 <__mdiff>
 8007dec:	4680      	mov	r8, r0
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f ae54 	beq.w	8007a9c <_strtod_l+0x444>
 8007df4:	2400      	movs	r4, #0
 8007df6:	68c3      	ldr	r3, [r0, #12]
 8007df8:	9904      	ldr	r1, [sp, #16]
 8007dfa:	60c4      	str	r4, [r0, #12]
 8007dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8007dfe:	f001 f8cd 	bl	8008f9c <__mcmp>
 8007e02:	42a0      	cmp	r0, r4
 8007e04:	da54      	bge.n	8007eb0 <_strtod_l+0x858>
 8007e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e08:	b9f3      	cbnz	r3, 8007e48 <_strtod_l+0x7f0>
 8007e0a:	f1b9 0f00 	cmp.w	r9, #0
 8007e0e:	d11b      	bne.n	8007e48 <_strtod_l+0x7f0>
 8007e10:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007e14:	b9c3      	cbnz	r3, 8007e48 <_strtod_l+0x7f0>
 8007e16:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007e1a:	0d1b      	lsrs	r3, r3, #20
 8007e1c:	051b      	lsls	r3, r3, #20
 8007e1e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e22:	d911      	bls.n	8007e48 <_strtod_l+0x7f0>
 8007e24:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007e28:	b91b      	cbnz	r3, 8007e32 <_strtod_l+0x7da>
 8007e2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	dd0a      	ble.n	8007e48 <_strtod_l+0x7f0>
 8007e32:	4641      	mov	r1, r8
 8007e34:	2201      	movs	r2, #1
 8007e36:	4658      	mov	r0, fp
 8007e38:	f001 f85c 	bl	8008ef4 <__lshift>
 8007e3c:	9904      	ldr	r1, [sp, #16]
 8007e3e:	4680      	mov	r8, r0
 8007e40:	f001 f8ac 	bl	8008f9c <__mcmp>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	dc68      	bgt.n	8007f1a <_strtod_l+0x8c2>
 8007e48:	9b05      	ldr	r3, [sp, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d172      	bne.n	8007f34 <_strtod_l+0x8dc>
 8007e4e:	e630      	b.n	8007ab2 <_strtod_l+0x45a>
 8007e50:	f018 0f01 	tst.w	r8, #1
 8007e54:	d004      	beq.n	8007e60 <_strtod_l+0x808>
 8007e56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e5a:	f7f8 fb3d 	bl	80004d8 <__aeabi_dmul>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e64:	3508      	adds	r5, #8
 8007e66:	e6dc      	b.n	8007c22 <_strtod_l+0x5ca>
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	ea03 0909 	and.w	r9, r3, r9
 8007e74:	e6f6      	b.n	8007c64 <_strtod_l+0x60c>
 8007e76:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007e7a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007e7e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007e82:	35e2      	adds	r5, #226	; 0xe2
 8007e84:	fa07 f505 	lsl.w	r5, r7, r5
 8007e88:	970f      	str	r7, [sp, #60]	; 0x3c
 8007e8a:	e75c      	b.n	8007d46 <_strtod_l+0x6ee>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	2500      	movs	r5, #0
 8007e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e92:	e758      	b.n	8007d46 <_strtod_l+0x6ee>
 8007e94:	463a      	mov	r2, r7
 8007e96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e98:	4658      	mov	r0, fp
 8007e9a:	f001 f82b 	bl	8008ef4 <__lshift>
 8007e9e:	901c      	str	r0, [sp, #112]	; 0x70
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f47f af7c 	bne.w	8007d9e <_strtod_l+0x746>
 8007ea6:	e5f9      	b.n	8007a9c <_strtod_l+0x444>
 8007ea8:	08009b98 	.word	0x08009b98
 8007eac:	fffffc02 	.word	0xfffffc02
 8007eb0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007eb4:	f040 8089 	bne.w	8007fca <_strtod_l+0x972>
 8007eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eba:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007ebe:	b342      	cbz	r2, 8007f12 <_strtod_l+0x8ba>
 8007ec0:	4aaf      	ldr	r2, [pc, #700]	; (8008180 <_strtod_l+0xb28>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d156      	bne.n	8007f74 <_strtod_l+0x91c>
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	4648      	mov	r0, r9
 8007eca:	b1eb      	cbz	r3, 8007f08 <_strtod_l+0x8b0>
 8007ecc:	4653      	mov	r3, sl
 8007ece:	4aad      	ldr	r2, [pc, #692]	; (8008184 <_strtod_l+0xb2c>)
 8007ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed4:	401a      	ands	r2, r3
 8007ed6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007eda:	d818      	bhi.n	8007f0e <_strtod_l+0x8b6>
 8007edc:	0d12      	lsrs	r2, r2, #20
 8007ede:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee6:	4298      	cmp	r0, r3
 8007ee8:	d144      	bne.n	8007f74 <_strtod_l+0x91c>
 8007eea:	4ba7      	ldr	r3, [pc, #668]	; (8008188 <_strtod_l+0xb30>)
 8007eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d102      	bne.n	8007ef8 <_strtod_l+0x8a0>
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f add2 	beq.w	8007a9c <_strtod_l+0x444>
 8007ef8:	4ba2      	ldr	r3, [pc, #648]	; (8008184 <_strtod_l+0xb2c>)
 8007efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007efc:	f04f 0900 	mov.w	r9, #0
 8007f00:	401a      	ands	r2, r3
 8007f02:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007f06:	e79f      	b.n	8007e48 <_strtod_l+0x7f0>
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	e7eb      	b.n	8007ee6 <_strtod_l+0x88e>
 8007f0e:	460b      	mov	r3, r1
 8007f10:	e7e9      	b.n	8007ee6 <_strtod_l+0x88e>
 8007f12:	bb7b      	cbnz	r3, 8007f74 <_strtod_l+0x91c>
 8007f14:	f1b9 0f00 	cmp.w	r9, #0
 8007f18:	d12c      	bne.n	8007f74 <_strtod_l+0x91c>
 8007f1a:	9905      	ldr	r1, [sp, #20]
 8007f1c:	4653      	mov	r3, sl
 8007f1e:	4a99      	ldr	r2, [pc, #612]	; (8008184 <_strtod_l+0xb2c>)
 8007f20:	b1f1      	cbz	r1, 8007f60 <_strtod_l+0x908>
 8007f22:	ea02 010a 	and.w	r1, r2, sl
 8007f26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f2a:	dc19      	bgt.n	8007f60 <_strtod_l+0x908>
 8007f2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f30:	f77f ae51 	ble.w	8007bd6 <_strtod_l+0x57e>
 8007f34:	2300      	movs	r3, #0
 8007f36:	4a95      	ldr	r2, [pc, #596]	; (800818c <_strtod_l+0xb34>)
 8007f38:	4648      	mov	r0, r9
 8007f3a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007f3e:	4651      	mov	r1, sl
 8007f40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f44:	f7f8 fac8 	bl	80004d8 <__aeabi_dmul>
 8007f48:	4681      	mov	r9, r0
 8007f4a:	468a      	mov	sl, r1
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	f47f adb0 	bne.w	8007ab2 <_strtod_l+0x45a>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f47f adad 	bne.w	8007ab2 <_strtod_l+0x45a>
 8007f58:	2322      	movs	r3, #34	; 0x22
 8007f5a:	f8cb 3000 	str.w	r3, [fp]
 8007f5e:	e5a8      	b.n	8007ab2 <_strtod_l+0x45a>
 8007f60:	4013      	ands	r3, r2
 8007f62:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f66:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007f6a:	f04f 39ff 	mov.w	r9, #4294967295
 8007f6e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007f72:	e769      	b.n	8007e48 <_strtod_l+0x7f0>
 8007f74:	b19d      	cbz	r5, 8007f9e <_strtod_l+0x946>
 8007f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f78:	421d      	tst	r5, r3
 8007f7a:	f43f af65 	beq.w	8007e48 <_strtod_l+0x7f0>
 8007f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f80:	9a05      	ldr	r2, [sp, #20]
 8007f82:	4648      	mov	r0, r9
 8007f84:	4651      	mov	r1, sl
 8007f86:	b173      	cbz	r3, 8007fa6 <_strtod_l+0x94e>
 8007f88:	f7ff fb42 	bl	8007610 <sulp>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f94:	f7f8 f8ea 	bl	800016c <__adddf3>
 8007f98:	4681      	mov	r9, r0
 8007f9a:	468a      	mov	sl, r1
 8007f9c:	e754      	b.n	8007e48 <_strtod_l+0x7f0>
 8007f9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fa0:	ea13 0f09 	tst.w	r3, r9
 8007fa4:	e7e9      	b.n	8007f7a <_strtod_l+0x922>
 8007fa6:	f7ff fb33 	bl	8007610 <sulp>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fb2:	f7f8 f8d9 	bl	8000168 <__aeabi_dsub>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4681      	mov	r9, r0
 8007fbc:	468a      	mov	sl, r1
 8007fbe:	f7f8 fcf3 	bl	80009a8 <__aeabi_dcmpeq>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	f47f ae07 	bne.w	8007bd6 <_strtod_l+0x57e>
 8007fc8:	e73e      	b.n	8007e48 <_strtod_l+0x7f0>
 8007fca:	9904      	ldr	r1, [sp, #16]
 8007fcc:	4640      	mov	r0, r8
 8007fce:	f001 f922 	bl	8009216 <__ratio>
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fd8:	4606      	mov	r6, r0
 8007fda:	460f      	mov	r7, r1
 8007fdc:	f7f8 fcf8 	bl	80009d0 <__aeabi_dcmple>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d075      	beq.n	80080d0 <_strtod_l+0xa78>
 8007fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d047      	beq.n	800807a <_strtod_l+0xa22>
 8007fea:	2600      	movs	r6, #0
 8007fec:	4f68      	ldr	r7, [pc, #416]	; (8008190 <_strtod_l+0xb38>)
 8007fee:	4d68      	ldr	r5, [pc, #416]	; (8008190 <_strtod_l+0xb38>)
 8007ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff6:	0d1b      	lsrs	r3, r3, #20
 8007ff8:	051b      	lsls	r3, r3, #20
 8007ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ffe:	4b65      	ldr	r3, [pc, #404]	; (8008194 <_strtod_l+0xb3c>)
 8008000:	429a      	cmp	r2, r3
 8008002:	f040 80cf 	bne.w	80081a4 <_strtod_l+0xb4c>
 8008006:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800800a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800800e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008010:	4648      	mov	r0, r9
 8008012:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008016:	4651      	mov	r1, sl
 8008018:	f001 f838 	bl	800908c <__ulp>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4630      	mov	r0, r6
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 fa58 	bl	80004d8 <__aeabi_dmul>
 8008028:	464a      	mov	r2, r9
 800802a:	4653      	mov	r3, sl
 800802c:	f7f8 f89e 	bl	800016c <__adddf3>
 8008030:	460b      	mov	r3, r1
 8008032:	4954      	ldr	r1, [pc, #336]	; (8008184 <_strtod_l+0xb2c>)
 8008034:	4a58      	ldr	r2, [pc, #352]	; (8008198 <_strtod_l+0xb40>)
 8008036:	4019      	ands	r1, r3
 8008038:	4291      	cmp	r1, r2
 800803a:	4681      	mov	r9, r0
 800803c:	d95e      	bls.n	80080fc <_strtod_l+0xaa4>
 800803e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008040:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008044:	4293      	cmp	r3, r2
 8008046:	d103      	bne.n	8008050 <_strtod_l+0x9f8>
 8008048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800804a:	3301      	adds	r3, #1
 800804c:	f43f ad26 	beq.w	8007a9c <_strtod_l+0x444>
 8008050:	f04f 39ff 	mov.w	r9, #4294967295
 8008054:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008188 <_strtod_l+0xb30>
 8008058:	991c      	ldr	r1, [sp, #112]	; 0x70
 800805a:	4658      	mov	r0, fp
 800805c:	f000 fd80 	bl	8008b60 <_Bfree>
 8008060:	9906      	ldr	r1, [sp, #24]
 8008062:	4658      	mov	r0, fp
 8008064:	f000 fd7c 	bl	8008b60 <_Bfree>
 8008068:	9904      	ldr	r1, [sp, #16]
 800806a:	4658      	mov	r0, fp
 800806c:	f000 fd78 	bl	8008b60 <_Bfree>
 8008070:	4641      	mov	r1, r8
 8008072:	4658      	mov	r0, fp
 8008074:	f000 fd74 	bl	8008b60 <_Bfree>
 8008078:	e617      	b.n	8007caa <_strtod_l+0x652>
 800807a:	f1b9 0f00 	cmp.w	r9, #0
 800807e:	d119      	bne.n	80080b4 <_strtod_l+0xa5c>
 8008080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008086:	b9e3      	cbnz	r3, 80080c2 <_strtod_l+0xa6a>
 8008088:	2200      	movs	r2, #0
 800808a:	4b41      	ldr	r3, [pc, #260]	; (8008190 <_strtod_l+0xb38>)
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 fc94 	bl	80009bc <__aeabi_dcmplt>
 8008094:	b9c8      	cbnz	r0, 80080ca <_strtod_l+0xa72>
 8008096:	2200      	movs	r2, #0
 8008098:	4b40      	ldr	r3, [pc, #256]	; (800819c <_strtod_l+0xb44>)
 800809a:	4630      	mov	r0, r6
 800809c:	4639      	mov	r1, r7
 800809e:	f7f8 fa1b 	bl	80004d8 <__aeabi_dmul>
 80080a2:	4604      	mov	r4, r0
 80080a4:	460d      	mov	r5, r1
 80080a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80080aa:	9418      	str	r4, [sp, #96]	; 0x60
 80080ac:	9319      	str	r3, [sp, #100]	; 0x64
 80080ae:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80080b2:	e79d      	b.n	8007ff0 <_strtod_l+0x998>
 80080b4:	f1b9 0f01 	cmp.w	r9, #1
 80080b8:	d103      	bne.n	80080c2 <_strtod_l+0xa6a>
 80080ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f43f ad8a 	beq.w	8007bd6 <_strtod_l+0x57e>
 80080c2:	2600      	movs	r6, #0
 80080c4:	4f36      	ldr	r7, [pc, #216]	; (80081a0 <_strtod_l+0xb48>)
 80080c6:	2400      	movs	r4, #0
 80080c8:	e791      	b.n	8007fee <_strtod_l+0x996>
 80080ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80080cc:	4d33      	ldr	r5, [pc, #204]	; (800819c <_strtod_l+0xb44>)
 80080ce:	e7ea      	b.n	80080a6 <_strtod_l+0xa4e>
 80080d0:	4b32      	ldr	r3, [pc, #200]	; (800819c <_strtod_l+0xb44>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	4630      	mov	r0, r6
 80080d6:	4639      	mov	r1, r7
 80080d8:	f7f8 f9fe 	bl	80004d8 <__aeabi_dmul>
 80080dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	b933      	cbnz	r3, 80080f2 <_strtod_l+0xa9a>
 80080e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080e8:	9010      	str	r0, [sp, #64]	; 0x40
 80080ea:	9311      	str	r3, [sp, #68]	; 0x44
 80080ec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80080f0:	e77e      	b.n	8007ff0 <_strtod_l+0x998>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80080fa:	e7f7      	b.n	80080ec <_strtod_l+0xa94>
 80080fc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1a8      	bne.n	8008058 <_strtod_l+0xa00>
 8008106:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800810a:	0d1b      	lsrs	r3, r3, #20
 800810c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800810e:	051b      	lsls	r3, r3, #20
 8008110:	429a      	cmp	r2, r3
 8008112:	4656      	mov	r6, sl
 8008114:	d1a0      	bne.n	8008058 <_strtod_l+0xa00>
 8008116:	4629      	mov	r1, r5
 8008118:	4620      	mov	r0, r4
 800811a:	f7f8 fc8d 	bl	8000a38 <__aeabi_d2iz>
 800811e:	f7f8 f971 	bl	8000404 <__aeabi_i2d>
 8008122:	460b      	mov	r3, r1
 8008124:	4602      	mov	r2, r0
 8008126:	4629      	mov	r1, r5
 8008128:	4620      	mov	r0, r4
 800812a:	f7f8 f81d 	bl	8000168 <__aeabi_dsub>
 800812e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	b933      	cbnz	r3, 8008144 <_strtod_l+0xaec>
 8008136:	f1b9 0f00 	cmp.w	r9, #0
 800813a:	d103      	bne.n	8008144 <_strtod_l+0xaec>
 800813c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008140:	2e00      	cmp	r6, #0
 8008142:	d06a      	beq.n	800821a <_strtod_l+0xbc2>
 8008144:	a30a      	add	r3, pc, #40	; (adr r3, 8008170 <_strtod_l+0xb18>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fc35 	bl	80009bc <__aeabi_dcmplt>
 8008152:	2800      	cmp	r0, #0
 8008154:	f47f acad 	bne.w	8007ab2 <_strtod_l+0x45a>
 8008158:	a307      	add	r3, pc, #28	; (adr r3, 8008178 <_strtod_l+0xb20>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 fc49 	bl	80009f8 <__aeabi_dcmpgt>
 8008166:	2800      	cmp	r0, #0
 8008168:	f43f af76 	beq.w	8008058 <_strtod_l+0xa00>
 800816c:	e4a1      	b.n	8007ab2 <_strtod_l+0x45a>
 800816e:	bf00      	nop
 8008170:	94a03595 	.word	0x94a03595
 8008174:	3fdfffff 	.word	0x3fdfffff
 8008178:	35afe535 	.word	0x35afe535
 800817c:	3fe00000 	.word	0x3fe00000
 8008180:	000fffff 	.word	0x000fffff
 8008184:	7ff00000 	.word	0x7ff00000
 8008188:	7fefffff 	.word	0x7fefffff
 800818c:	39500000 	.word	0x39500000
 8008190:	3ff00000 	.word	0x3ff00000
 8008194:	7fe00000 	.word	0x7fe00000
 8008198:	7c9fffff 	.word	0x7c9fffff
 800819c:	3fe00000 	.word	0x3fe00000
 80081a0:	bff00000 	.word	0xbff00000
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	b313      	cbz	r3, 80081ee <_strtod_l+0xb96>
 80081a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081ae:	d81e      	bhi.n	80081ee <_strtod_l+0xb96>
 80081b0:	a325      	add	r3, pc, #148	; (adr r3, 8008248 <_strtod_l+0xbf0>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 fc09 	bl	80009d0 <__aeabi_dcmple>
 80081be:	b190      	cbz	r0, 80081e6 <_strtod_l+0xb8e>
 80081c0:	4629      	mov	r1, r5
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7f8 fc60 	bl	8000a88 <__aeabi_d2uiz>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	bf08      	it	eq
 80081cc:	2001      	moveq	r0, #1
 80081ce:	f7f8 f909 	bl	80003e4 <__aeabi_ui2d>
 80081d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	b9d3      	cbnz	r3, 8008210 <_strtod_l+0xbb8>
 80081da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081de:	9012      	str	r0, [sp, #72]	; 0x48
 80081e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80081e2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80081e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081e8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80081ec:	1a9f      	subs	r7, r3, r2
 80081ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081f2:	f000 ff4b 	bl	800908c <__ulp>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 f96b 	bl	80004d8 <__aeabi_dmul>
 8008202:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008206:	f7f7 ffb1 	bl	800016c <__adddf3>
 800820a:	4681      	mov	r9, r0
 800820c:	468a      	mov	sl, r1
 800820e:	e777      	b.n	8008100 <_strtod_l+0xaa8>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008218:	e7e3      	b.n	80081e2 <_strtod_l+0xb8a>
 800821a:	a30d      	add	r3, pc, #52	; (adr r3, 8008250 <_strtod_l+0xbf8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 fbcc 	bl	80009bc <__aeabi_dcmplt>
 8008224:	e79f      	b.n	8008166 <_strtod_l+0xb0e>
 8008226:	2300      	movs	r3, #0
 8008228:	930d      	str	r3, [sp, #52]	; 0x34
 800822a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800822c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	f7ff ba55 	b.w	80076de <_strtod_l+0x86>
 8008234:	2b65      	cmp	r3, #101	; 0x65
 8008236:	f04f 0200 	mov.w	r2, #0
 800823a:	f43f ab42 	beq.w	80078c2 <_strtod_l+0x26a>
 800823e:	2101      	movs	r1, #1
 8008240:	4614      	mov	r4, r2
 8008242:	9105      	str	r1, [sp, #20]
 8008244:	f7ff babf 	b.w	80077c6 <_strtod_l+0x16e>
 8008248:	ffc00000 	.word	0xffc00000
 800824c:	41dfffff 	.word	0x41dfffff
 8008250:	94a03595 	.word	0x94a03595
 8008254:	3fcfffff 	.word	0x3fcfffff

08008258 <_strtod_r>:
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <_strtod_r+0x18>)
 800825a:	b410      	push	{r4}
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4c05      	ldr	r4, [pc, #20]	; (8008274 <_strtod_r+0x1c>)
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	2b00      	cmp	r3, #0
 8008264:	bf08      	it	eq
 8008266:	4623      	moveq	r3, r4
 8008268:	bc10      	pop	{r4}
 800826a:	f7ff b9f5 	b.w	8007658 <_strtod_l>
 800826e:	bf00      	nop
 8008270:	20000044 	.word	0x20000044
 8008274:	200000a8 	.word	0x200000a8

08008278 <strtok>:
 8008278:	4b13      	ldr	r3, [pc, #76]	; (80082c8 <strtok+0x50>)
 800827a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827e:	681d      	ldr	r5, [r3, #0]
 8008280:	4606      	mov	r6, r0
 8008282:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008284:	460f      	mov	r7, r1
 8008286:	b9b4      	cbnz	r4, 80082b6 <strtok+0x3e>
 8008288:	2050      	movs	r0, #80	; 0x50
 800828a:	f000 fc1b 	bl	8008ac4 <malloc>
 800828e:	65a8      	str	r0, [r5, #88]	; 0x58
 8008290:	e9c0 4400 	strd	r4, r4, [r0]
 8008294:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008298:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800829c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80082a0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80082a4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80082a8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80082ac:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80082b0:	6184      	str	r4, [r0, #24]
 80082b2:	7704      	strb	r4, [r0, #28]
 80082b4:	6244      	str	r4, [r0, #36]	; 0x24
 80082b6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80082b8:	4639      	mov	r1, r7
 80082ba:	4630      	mov	r0, r6
 80082bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c0:	2301      	movs	r3, #1
 80082c2:	f000 b803 	b.w	80082cc <__strtok_r>
 80082c6:	bf00      	nop
 80082c8:	20000044 	.word	0x20000044

080082cc <__strtok_r>:
 80082cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ce:	b918      	cbnz	r0, 80082d8 <__strtok_r+0xc>
 80082d0:	6810      	ldr	r0, [r2, #0]
 80082d2:	b908      	cbnz	r0, 80082d8 <__strtok_r+0xc>
 80082d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d6:	4620      	mov	r0, r4
 80082d8:	4604      	mov	r4, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80082e0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80082e4:	b91e      	cbnz	r6, 80082ee <__strtok_r+0x22>
 80082e6:	b96d      	cbnz	r5, 8008304 <__strtok_r+0x38>
 80082e8:	6015      	str	r5, [r2, #0]
 80082ea:	4628      	mov	r0, r5
 80082ec:	e7f2      	b.n	80082d4 <__strtok_r+0x8>
 80082ee:	42b5      	cmp	r5, r6
 80082f0:	d1f6      	bne.n	80082e0 <__strtok_r+0x14>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1ef      	bne.n	80082d6 <__strtok_r+0xa>
 80082f6:	6014      	str	r4, [r2, #0]
 80082f8:	7003      	strb	r3, [r0, #0]
 80082fa:	e7eb      	b.n	80082d4 <__strtok_r+0x8>
 80082fc:	462b      	mov	r3, r5
 80082fe:	e00d      	b.n	800831c <__strtok_r+0x50>
 8008300:	b926      	cbnz	r6, 800830c <__strtok_r+0x40>
 8008302:	461c      	mov	r4, r3
 8008304:	4623      	mov	r3, r4
 8008306:	460f      	mov	r7, r1
 8008308:	f813 5b01 	ldrb.w	r5, [r3], #1
 800830c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008310:	42b5      	cmp	r5, r6
 8008312:	d1f5      	bne.n	8008300 <__strtok_r+0x34>
 8008314:	2d00      	cmp	r5, #0
 8008316:	d0f1      	beq.n	80082fc <__strtok_r+0x30>
 8008318:	2100      	movs	r1, #0
 800831a:	7021      	strb	r1, [r4, #0]
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	e7d9      	b.n	80082d4 <__strtok_r+0x8>

08008320 <_strtol_l.isra.0>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	4680      	mov	r8, r0
 8008326:	4689      	mov	r9, r1
 8008328:	4692      	mov	sl, r2
 800832a:	461e      	mov	r6, r3
 800832c:	460f      	mov	r7, r1
 800832e:	463d      	mov	r5, r7
 8008330:	9808      	ldr	r0, [sp, #32]
 8008332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008336:	f000 fbbf 	bl	8008ab8 <__locale_ctype_ptr_l>
 800833a:	4420      	add	r0, r4
 800833c:	7843      	ldrb	r3, [r0, #1]
 800833e:	f013 0308 	ands.w	r3, r3, #8
 8008342:	d132      	bne.n	80083aa <_strtol_l.isra.0+0x8a>
 8008344:	2c2d      	cmp	r4, #45	; 0x2d
 8008346:	d132      	bne.n	80083ae <_strtol_l.isra.0+0x8e>
 8008348:	2201      	movs	r2, #1
 800834a:	787c      	ldrb	r4, [r7, #1]
 800834c:	1cbd      	adds	r5, r7, #2
 800834e:	2e00      	cmp	r6, #0
 8008350:	d05d      	beq.n	800840e <_strtol_l.isra.0+0xee>
 8008352:	2e10      	cmp	r6, #16
 8008354:	d109      	bne.n	800836a <_strtol_l.isra.0+0x4a>
 8008356:	2c30      	cmp	r4, #48	; 0x30
 8008358:	d107      	bne.n	800836a <_strtol_l.isra.0+0x4a>
 800835a:	782b      	ldrb	r3, [r5, #0]
 800835c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008360:	2b58      	cmp	r3, #88	; 0x58
 8008362:	d14f      	bne.n	8008404 <_strtol_l.isra.0+0xe4>
 8008364:	2610      	movs	r6, #16
 8008366:	786c      	ldrb	r4, [r5, #1]
 8008368:	3502      	adds	r5, #2
 800836a:	2a00      	cmp	r2, #0
 800836c:	bf14      	ite	ne
 800836e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008372:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008376:	2700      	movs	r7, #0
 8008378:	fbb1 fcf6 	udiv	ip, r1, r6
 800837c:	4638      	mov	r0, r7
 800837e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008382:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008386:	2b09      	cmp	r3, #9
 8008388:	d817      	bhi.n	80083ba <_strtol_l.isra.0+0x9a>
 800838a:	461c      	mov	r4, r3
 800838c:	42a6      	cmp	r6, r4
 800838e:	dd23      	ble.n	80083d8 <_strtol_l.isra.0+0xb8>
 8008390:	1c7b      	adds	r3, r7, #1
 8008392:	d007      	beq.n	80083a4 <_strtol_l.isra.0+0x84>
 8008394:	4584      	cmp	ip, r0
 8008396:	d31c      	bcc.n	80083d2 <_strtol_l.isra.0+0xb2>
 8008398:	d101      	bne.n	800839e <_strtol_l.isra.0+0x7e>
 800839a:	45a6      	cmp	lr, r4
 800839c:	db19      	blt.n	80083d2 <_strtol_l.isra.0+0xb2>
 800839e:	2701      	movs	r7, #1
 80083a0:	fb00 4006 	mla	r0, r0, r6, r4
 80083a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083a8:	e7eb      	b.n	8008382 <_strtol_l.isra.0+0x62>
 80083aa:	462f      	mov	r7, r5
 80083ac:	e7bf      	b.n	800832e <_strtol_l.isra.0+0xe>
 80083ae:	2c2b      	cmp	r4, #43	; 0x2b
 80083b0:	bf04      	itt	eq
 80083b2:	1cbd      	addeq	r5, r7, #2
 80083b4:	787c      	ldrbeq	r4, [r7, #1]
 80083b6:	461a      	mov	r2, r3
 80083b8:	e7c9      	b.n	800834e <_strtol_l.isra.0+0x2e>
 80083ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80083be:	2b19      	cmp	r3, #25
 80083c0:	d801      	bhi.n	80083c6 <_strtol_l.isra.0+0xa6>
 80083c2:	3c37      	subs	r4, #55	; 0x37
 80083c4:	e7e2      	b.n	800838c <_strtol_l.isra.0+0x6c>
 80083c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80083ca:	2b19      	cmp	r3, #25
 80083cc:	d804      	bhi.n	80083d8 <_strtol_l.isra.0+0xb8>
 80083ce:	3c57      	subs	r4, #87	; 0x57
 80083d0:	e7dc      	b.n	800838c <_strtol_l.isra.0+0x6c>
 80083d2:	f04f 37ff 	mov.w	r7, #4294967295
 80083d6:	e7e5      	b.n	80083a4 <_strtol_l.isra.0+0x84>
 80083d8:	1c7b      	adds	r3, r7, #1
 80083da:	d108      	bne.n	80083ee <_strtol_l.isra.0+0xce>
 80083dc:	2322      	movs	r3, #34	; 0x22
 80083de:	4608      	mov	r0, r1
 80083e0:	f8c8 3000 	str.w	r3, [r8]
 80083e4:	f1ba 0f00 	cmp.w	sl, #0
 80083e8:	d107      	bne.n	80083fa <_strtol_l.isra.0+0xda>
 80083ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ee:	b102      	cbz	r2, 80083f2 <_strtol_l.isra.0+0xd2>
 80083f0:	4240      	negs	r0, r0
 80083f2:	f1ba 0f00 	cmp.w	sl, #0
 80083f6:	d0f8      	beq.n	80083ea <_strtol_l.isra.0+0xca>
 80083f8:	b10f      	cbz	r7, 80083fe <_strtol_l.isra.0+0xde>
 80083fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80083fe:	f8ca 9000 	str.w	r9, [sl]
 8008402:	e7f2      	b.n	80083ea <_strtol_l.isra.0+0xca>
 8008404:	2430      	movs	r4, #48	; 0x30
 8008406:	2e00      	cmp	r6, #0
 8008408:	d1af      	bne.n	800836a <_strtol_l.isra.0+0x4a>
 800840a:	2608      	movs	r6, #8
 800840c:	e7ad      	b.n	800836a <_strtol_l.isra.0+0x4a>
 800840e:	2c30      	cmp	r4, #48	; 0x30
 8008410:	d0a3      	beq.n	800835a <_strtol_l.isra.0+0x3a>
 8008412:	260a      	movs	r6, #10
 8008414:	e7a9      	b.n	800836a <_strtol_l.isra.0+0x4a>
	...

08008418 <_strtol_r>:
 8008418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800841a:	4c06      	ldr	r4, [pc, #24]	; (8008434 <_strtol_r+0x1c>)
 800841c:	4d06      	ldr	r5, [pc, #24]	; (8008438 <_strtol_r+0x20>)
 800841e:	6824      	ldr	r4, [r4, #0]
 8008420:	6a24      	ldr	r4, [r4, #32]
 8008422:	2c00      	cmp	r4, #0
 8008424:	bf08      	it	eq
 8008426:	462c      	moveq	r4, r5
 8008428:	9400      	str	r4, [sp, #0]
 800842a:	f7ff ff79 	bl	8008320 <_strtol_l.isra.0>
 800842e:	b003      	add	sp, #12
 8008430:	bd30      	pop	{r4, r5, pc}
 8008432:	bf00      	nop
 8008434:	20000044 	.word	0x20000044
 8008438:	200000a8 	.word	0x200000a8

0800843c <strtol>:
 800843c:	4b08      	ldr	r3, [pc, #32]	; (8008460 <strtol+0x24>)
 800843e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008440:	681c      	ldr	r4, [r3, #0]
 8008442:	4d08      	ldr	r5, [pc, #32]	; (8008464 <strtol+0x28>)
 8008444:	6a23      	ldr	r3, [r4, #32]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bf08      	it	eq
 800844a:	462b      	moveq	r3, r5
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	4613      	mov	r3, r2
 8008450:	460a      	mov	r2, r1
 8008452:	4601      	mov	r1, r0
 8008454:	4620      	mov	r0, r4
 8008456:	f7ff ff63 	bl	8008320 <_strtol_l.isra.0>
 800845a:	b003      	add	sp, #12
 800845c:	bd30      	pop	{r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	20000044 	.word	0x20000044
 8008464:	200000a8 	.word	0x200000a8

08008468 <rshift>:
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846a:	6906      	ldr	r6, [r0, #16]
 800846c:	114b      	asrs	r3, r1, #5
 800846e:	429e      	cmp	r6, r3
 8008470:	f100 0414 	add.w	r4, r0, #20
 8008474:	dd31      	ble.n	80084da <rshift+0x72>
 8008476:	f011 011f 	ands.w	r1, r1, #31
 800847a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800847e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008482:	d108      	bne.n	8008496 <rshift+0x2e>
 8008484:	4621      	mov	r1, r4
 8008486:	42b2      	cmp	r2, r6
 8008488:	460b      	mov	r3, r1
 800848a:	d211      	bcs.n	80084b0 <rshift+0x48>
 800848c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008490:	f841 3b04 	str.w	r3, [r1], #4
 8008494:	e7f7      	b.n	8008486 <rshift+0x1e>
 8008496:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800849a:	4623      	mov	r3, r4
 800849c:	f1c1 0c20 	rsb	ip, r1, #32
 80084a0:	40cd      	lsrs	r5, r1
 80084a2:	3204      	adds	r2, #4
 80084a4:	42b2      	cmp	r2, r6
 80084a6:	4617      	mov	r7, r2
 80084a8:	d30d      	bcc.n	80084c6 <rshift+0x5e>
 80084aa:	601d      	str	r5, [r3, #0]
 80084ac:	b105      	cbz	r5, 80084b0 <rshift+0x48>
 80084ae:	3304      	adds	r3, #4
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	eba3 0204 	sub.w	r2, r3, r4
 80084b6:	bf08      	it	eq
 80084b8:	2300      	moveq	r3, #0
 80084ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084be:	6102      	str	r2, [r0, #16]
 80084c0:	bf08      	it	eq
 80084c2:	6143      	streq	r3, [r0, #20]
 80084c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c6:	683f      	ldr	r7, [r7, #0]
 80084c8:	fa07 f70c 	lsl.w	r7, r7, ip
 80084cc:	433d      	orrs	r5, r7
 80084ce:	f843 5b04 	str.w	r5, [r3], #4
 80084d2:	f852 5b04 	ldr.w	r5, [r2], #4
 80084d6:	40cd      	lsrs	r5, r1
 80084d8:	e7e4      	b.n	80084a4 <rshift+0x3c>
 80084da:	4623      	mov	r3, r4
 80084dc:	e7e8      	b.n	80084b0 <rshift+0x48>

080084de <__hexdig_fun>:
 80084de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084e2:	2b09      	cmp	r3, #9
 80084e4:	d802      	bhi.n	80084ec <__hexdig_fun+0xe>
 80084e6:	3820      	subs	r0, #32
 80084e8:	b2c0      	uxtb	r0, r0
 80084ea:	4770      	bx	lr
 80084ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084f0:	2b05      	cmp	r3, #5
 80084f2:	d801      	bhi.n	80084f8 <__hexdig_fun+0x1a>
 80084f4:	3847      	subs	r0, #71	; 0x47
 80084f6:	e7f7      	b.n	80084e8 <__hexdig_fun+0xa>
 80084f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	d801      	bhi.n	8008504 <__hexdig_fun+0x26>
 8008500:	3827      	subs	r0, #39	; 0x27
 8008502:	e7f1      	b.n	80084e8 <__hexdig_fun+0xa>
 8008504:	2000      	movs	r0, #0
 8008506:	4770      	bx	lr

08008508 <__gethex>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	b08b      	sub	sp, #44	; 0x2c
 800850e:	9002      	str	r0, [sp, #8]
 8008510:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008512:	468a      	mov	sl, r1
 8008514:	4690      	mov	r8, r2
 8008516:	9306      	str	r3, [sp, #24]
 8008518:	f000 fad1 	bl	8008abe <__localeconv_l>
 800851c:	6803      	ldr	r3, [r0, #0]
 800851e:	f04f 0b00 	mov.w	fp, #0
 8008522:	4618      	mov	r0, r3
 8008524:	9303      	str	r3, [sp, #12]
 8008526:	f7f7 fe13 	bl	8000150 <strlen>
 800852a:	9b03      	ldr	r3, [sp, #12]
 800852c:	9001      	str	r0, [sp, #4]
 800852e:	4403      	add	r3, r0
 8008530:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	f8da 3000 	ldr.w	r3, [sl]
 800853a:	3302      	adds	r3, #2
 800853c:	461f      	mov	r7, r3
 800853e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008542:	2830      	cmp	r0, #48	; 0x30
 8008544:	d06c      	beq.n	8008620 <__gethex+0x118>
 8008546:	f7ff ffca 	bl	80084de <__hexdig_fun>
 800854a:	4604      	mov	r4, r0
 800854c:	2800      	cmp	r0, #0
 800854e:	d16a      	bne.n	8008626 <__gethex+0x11e>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	9903      	ldr	r1, [sp, #12]
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff f849 	bl	80075ec <strncmp>
 800855a:	2800      	cmp	r0, #0
 800855c:	d166      	bne.n	800862c <__gethex+0x124>
 800855e:	9b01      	ldr	r3, [sp, #4]
 8008560:	5cf8      	ldrb	r0, [r7, r3]
 8008562:	18fe      	adds	r6, r7, r3
 8008564:	f7ff ffbb 	bl	80084de <__hexdig_fun>
 8008568:	2800      	cmp	r0, #0
 800856a:	d062      	beq.n	8008632 <__gethex+0x12a>
 800856c:	4633      	mov	r3, r6
 800856e:	7818      	ldrb	r0, [r3, #0]
 8008570:	461f      	mov	r7, r3
 8008572:	2830      	cmp	r0, #48	; 0x30
 8008574:	f103 0301 	add.w	r3, r3, #1
 8008578:	d0f9      	beq.n	800856e <__gethex+0x66>
 800857a:	f7ff ffb0 	bl	80084de <__hexdig_fun>
 800857e:	fab0 f580 	clz	r5, r0
 8008582:	4634      	mov	r4, r6
 8008584:	f04f 0b01 	mov.w	fp, #1
 8008588:	096d      	lsrs	r5, r5, #5
 800858a:	463a      	mov	r2, r7
 800858c:	4616      	mov	r6, r2
 800858e:	7830      	ldrb	r0, [r6, #0]
 8008590:	3201      	adds	r2, #1
 8008592:	f7ff ffa4 	bl	80084de <__hexdig_fun>
 8008596:	2800      	cmp	r0, #0
 8008598:	d1f8      	bne.n	800858c <__gethex+0x84>
 800859a:	9a01      	ldr	r2, [sp, #4]
 800859c:	9903      	ldr	r1, [sp, #12]
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff f824 	bl	80075ec <strncmp>
 80085a4:	b950      	cbnz	r0, 80085bc <__gethex+0xb4>
 80085a6:	b954      	cbnz	r4, 80085be <__gethex+0xb6>
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	18f4      	adds	r4, r6, r3
 80085ac:	4622      	mov	r2, r4
 80085ae:	4616      	mov	r6, r2
 80085b0:	7830      	ldrb	r0, [r6, #0]
 80085b2:	3201      	adds	r2, #1
 80085b4:	f7ff ff93 	bl	80084de <__hexdig_fun>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d1f8      	bne.n	80085ae <__gethex+0xa6>
 80085bc:	b10c      	cbz	r4, 80085c2 <__gethex+0xba>
 80085be:	1ba4      	subs	r4, r4, r6
 80085c0:	00a4      	lsls	r4, r4, #2
 80085c2:	7833      	ldrb	r3, [r6, #0]
 80085c4:	2b50      	cmp	r3, #80	; 0x50
 80085c6:	d001      	beq.n	80085cc <__gethex+0xc4>
 80085c8:	2b70      	cmp	r3, #112	; 0x70
 80085ca:	d140      	bne.n	800864e <__gethex+0x146>
 80085cc:	7873      	ldrb	r3, [r6, #1]
 80085ce:	2b2b      	cmp	r3, #43	; 0x2b
 80085d0:	d031      	beq.n	8008636 <__gethex+0x12e>
 80085d2:	2b2d      	cmp	r3, #45	; 0x2d
 80085d4:	d033      	beq.n	800863e <__gethex+0x136>
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	1c71      	adds	r1, r6, #1
 80085dc:	7808      	ldrb	r0, [r1, #0]
 80085de:	f7ff ff7e 	bl	80084de <__hexdig_fun>
 80085e2:	1e43      	subs	r3, r0, #1
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b18      	cmp	r3, #24
 80085e8:	d831      	bhi.n	800864e <__gethex+0x146>
 80085ea:	f1a0 0210 	sub.w	r2, r0, #16
 80085ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085f2:	f7ff ff74 	bl	80084de <__hexdig_fun>
 80085f6:	1e43      	subs	r3, r0, #1
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b18      	cmp	r3, #24
 80085fc:	d922      	bls.n	8008644 <__gethex+0x13c>
 80085fe:	f1b9 0f00 	cmp.w	r9, #0
 8008602:	d000      	beq.n	8008606 <__gethex+0xfe>
 8008604:	4252      	negs	r2, r2
 8008606:	4414      	add	r4, r2
 8008608:	f8ca 1000 	str.w	r1, [sl]
 800860c:	b30d      	cbz	r5, 8008652 <__gethex+0x14a>
 800860e:	f1bb 0f00 	cmp.w	fp, #0
 8008612:	bf0c      	ite	eq
 8008614:	2706      	moveq	r7, #6
 8008616:	2700      	movne	r7, #0
 8008618:	4638      	mov	r0, r7
 800861a:	b00b      	add	sp, #44	; 0x2c
 800861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008620:	f10b 0b01 	add.w	fp, fp, #1
 8008624:	e78a      	b.n	800853c <__gethex+0x34>
 8008626:	2500      	movs	r5, #0
 8008628:	462c      	mov	r4, r5
 800862a:	e7ae      	b.n	800858a <__gethex+0x82>
 800862c:	463e      	mov	r6, r7
 800862e:	2501      	movs	r5, #1
 8008630:	e7c7      	b.n	80085c2 <__gethex+0xba>
 8008632:	4604      	mov	r4, r0
 8008634:	e7fb      	b.n	800862e <__gethex+0x126>
 8008636:	f04f 0900 	mov.w	r9, #0
 800863a:	1cb1      	adds	r1, r6, #2
 800863c:	e7ce      	b.n	80085dc <__gethex+0xd4>
 800863e:	f04f 0901 	mov.w	r9, #1
 8008642:	e7fa      	b.n	800863a <__gethex+0x132>
 8008644:	230a      	movs	r3, #10
 8008646:	fb03 0202 	mla	r2, r3, r2, r0
 800864a:	3a10      	subs	r2, #16
 800864c:	e7cf      	b.n	80085ee <__gethex+0xe6>
 800864e:	4631      	mov	r1, r6
 8008650:	e7da      	b.n	8008608 <__gethex+0x100>
 8008652:	4629      	mov	r1, r5
 8008654:	1bf3      	subs	r3, r6, r7
 8008656:	3b01      	subs	r3, #1
 8008658:	2b07      	cmp	r3, #7
 800865a:	dc49      	bgt.n	80086f0 <__gethex+0x1e8>
 800865c:	9802      	ldr	r0, [sp, #8]
 800865e:	f000 fa4b 	bl	8008af8 <_Balloc>
 8008662:	f04f 0b00 	mov.w	fp, #0
 8008666:	4605      	mov	r5, r0
 8008668:	46da      	mov	sl, fp
 800866a:	9b01      	ldr	r3, [sp, #4]
 800866c:	f100 0914 	add.w	r9, r0, #20
 8008670:	f1c3 0301 	rsb	r3, r3, #1
 8008674:	f8cd 9010 	str.w	r9, [sp, #16]
 8008678:	9308      	str	r3, [sp, #32]
 800867a:	42b7      	cmp	r7, r6
 800867c:	d33b      	bcc.n	80086f6 <__gethex+0x1ee>
 800867e:	9804      	ldr	r0, [sp, #16]
 8008680:	f840 ab04 	str.w	sl, [r0], #4
 8008684:	eba0 0009 	sub.w	r0, r0, r9
 8008688:	1080      	asrs	r0, r0, #2
 800868a:	6128      	str	r0, [r5, #16]
 800868c:	0147      	lsls	r7, r0, #5
 800868e:	4650      	mov	r0, sl
 8008690:	f000 faf6 	bl	8008c80 <__hi0bits>
 8008694:	f8d8 6000 	ldr.w	r6, [r8]
 8008698:	1a3f      	subs	r7, r7, r0
 800869a:	42b7      	cmp	r7, r6
 800869c:	dd64      	ble.n	8008768 <__gethex+0x260>
 800869e:	1bbf      	subs	r7, r7, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 fdff 	bl	80092a6 <__any_on>
 80086a8:	4682      	mov	sl, r0
 80086aa:	b178      	cbz	r0, 80086cc <__gethex+0x1c4>
 80086ac:	f04f 0a01 	mov.w	sl, #1
 80086b0:	1e7b      	subs	r3, r7, #1
 80086b2:	1159      	asrs	r1, r3, #5
 80086b4:	f003 021f 	and.w	r2, r3, #31
 80086b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086bc:	fa0a f202 	lsl.w	r2, sl, r2
 80086c0:	420a      	tst	r2, r1
 80086c2:	d003      	beq.n	80086cc <__gethex+0x1c4>
 80086c4:	4553      	cmp	r3, sl
 80086c6:	dc46      	bgt.n	8008756 <__gethex+0x24e>
 80086c8:	f04f 0a02 	mov.w	sl, #2
 80086cc:	4639      	mov	r1, r7
 80086ce:	4628      	mov	r0, r5
 80086d0:	f7ff feca 	bl	8008468 <rshift>
 80086d4:	443c      	add	r4, r7
 80086d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086da:	42a3      	cmp	r3, r4
 80086dc:	da52      	bge.n	8008784 <__gethex+0x27c>
 80086de:	4629      	mov	r1, r5
 80086e0:	9802      	ldr	r0, [sp, #8]
 80086e2:	f000 fa3d 	bl	8008b60 <_Bfree>
 80086e6:	2300      	movs	r3, #0
 80086e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086ea:	27a3      	movs	r7, #163	; 0xa3
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e793      	b.n	8008618 <__gethex+0x110>
 80086f0:	3101      	adds	r1, #1
 80086f2:	105b      	asrs	r3, r3, #1
 80086f4:	e7b0      	b.n	8008658 <__gethex+0x150>
 80086f6:	1e73      	subs	r3, r6, #1
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	9a07      	ldr	r2, [sp, #28]
 80086fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008700:	4293      	cmp	r3, r2
 8008702:	d018      	beq.n	8008736 <__gethex+0x22e>
 8008704:	f1bb 0f20 	cmp.w	fp, #32
 8008708:	d107      	bne.n	800871a <__gethex+0x212>
 800870a:	9b04      	ldr	r3, [sp, #16]
 800870c:	f8c3 a000 	str.w	sl, [r3]
 8008710:	f04f 0a00 	mov.w	sl, #0
 8008714:	46d3      	mov	fp, sl
 8008716:	3304      	adds	r3, #4
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800871e:	f7ff fede 	bl	80084de <__hexdig_fun>
 8008722:	f000 000f 	and.w	r0, r0, #15
 8008726:	fa00 f00b 	lsl.w	r0, r0, fp
 800872a:	ea4a 0a00 	orr.w	sl, sl, r0
 800872e:	f10b 0b04 	add.w	fp, fp, #4
 8008732:	9b05      	ldr	r3, [sp, #20]
 8008734:	e00d      	b.n	8008752 <__gethex+0x24a>
 8008736:	9b05      	ldr	r3, [sp, #20]
 8008738:	9a08      	ldr	r2, [sp, #32]
 800873a:	4413      	add	r3, r2
 800873c:	42bb      	cmp	r3, r7
 800873e:	d3e1      	bcc.n	8008704 <__gethex+0x1fc>
 8008740:	4618      	mov	r0, r3
 8008742:	9a01      	ldr	r2, [sp, #4]
 8008744:	9903      	ldr	r1, [sp, #12]
 8008746:	9309      	str	r3, [sp, #36]	; 0x24
 8008748:	f7fe ff50 	bl	80075ec <strncmp>
 800874c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874e:	2800      	cmp	r0, #0
 8008750:	d1d8      	bne.n	8008704 <__gethex+0x1fc>
 8008752:	461e      	mov	r6, r3
 8008754:	e791      	b.n	800867a <__gethex+0x172>
 8008756:	1eb9      	subs	r1, r7, #2
 8008758:	4628      	mov	r0, r5
 800875a:	f000 fda4 	bl	80092a6 <__any_on>
 800875e:	2800      	cmp	r0, #0
 8008760:	d0b2      	beq.n	80086c8 <__gethex+0x1c0>
 8008762:	f04f 0a03 	mov.w	sl, #3
 8008766:	e7b1      	b.n	80086cc <__gethex+0x1c4>
 8008768:	da09      	bge.n	800877e <__gethex+0x276>
 800876a:	1bf7      	subs	r7, r6, r7
 800876c:	4629      	mov	r1, r5
 800876e:	463a      	mov	r2, r7
 8008770:	9802      	ldr	r0, [sp, #8]
 8008772:	f000 fbbf 	bl	8008ef4 <__lshift>
 8008776:	4605      	mov	r5, r0
 8008778:	1be4      	subs	r4, r4, r7
 800877a:	f100 0914 	add.w	r9, r0, #20
 800877e:	f04f 0a00 	mov.w	sl, #0
 8008782:	e7a8      	b.n	80086d6 <__gethex+0x1ce>
 8008784:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008788:	42a0      	cmp	r0, r4
 800878a:	dd6b      	ble.n	8008864 <__gethex+0x35c>
 800878c:	1b04      	subs	r4, r0, r4
 800878e:	42a6      	cmp	r6, r4
 8008790:	dc2e      	bgt.n	80087f0 <__gethex+0x2e8>
 8008792:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d022      	beq.n	80087e0 <__gethex+0x2d8>
 800879a:	2b03      	cmp	r3, #3
 800879c:	d024      	beq.n	80087e8 <__gethex+0x2e0>
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d115      	bne.n	80087ce <__gethex+0x2c6>
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d113      	bne.n	80087ce <__gethex+0x2c6>
 80087a6:	2e01      	cmp	r6, #1
 80087a8:	dc0b      	bgt.n	80087c2 <__gethex+0x2ba>
 80087aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087ae:	9a06      	ldr	r2, [sp, #24]
 80087b0:	2762      	movs	r7, #98	; 0x62
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	2301      	movs	r3, #1
 80087b6:	612b      	str	r3, [r5, #16]
 80087b8:	f8c9 3000 	str.w	r3, [r9]
 80087bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087be:	601d      	str	r5, [r3, #0]
 80087c0:	e72a      	b.n	8008618 <__gethex+0x110>
 80087c2:	1e71      	subs	r1, r6, #1
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 fd6e 	bl	80092a6 <__any_on>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d1ed      	bne.n	80087aa <__gethex+0x2a2>
 80087ce:	4629      	mov	r1, r5
 80087d0:	9802      	ldr	r0, [sp, #8]
 80087d2:	f000 f9c5 	bl	8008b60 <_Bfree>
 80087d6:	2300      	movs	r3, #0
 80087d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087da:	2750      	movs	r7, #80	; 0x50
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	e71b      	b.n	8008618 <__gethex+0x110>
 80087e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0e1      	beq.n	80087aa <__gethex+0x2a2>
 80087e6:	e7f2      	b.n	80087ce <__gethex+0x2c6>
 80087e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1dd      	bne.n	80087aa <__gethex+0x2a2>
 80087ee:	e7ee      	b.n	80087ce <__gethex+0x2c6>
 80087f0:	1e67      	subs	r7, r4, #1
 80087f2:	f1ba 0f00 	cmp.w	sl, #0
 80087f6:	d132      	bne.n	800885e <__gethex+0x356>
 80087f8:	b127      	cbz	r7, 8008804 <__gethex+0x2fc>
 80087fa:	4639      	mov	r1, r7
 80087fc:	4628      	mov	r0, r5
 80087fe:	f000 fd52 	bl	80092a6 <__any_on>
 8008802:	4682      	mov	sl, r0
 8008804:	2301      	movs	r3, #1
 8008806:	117a      	asrs	r2, r7, #5
 8008808:	f007 071f 	and.w	r7, r7, #31
 800880c:	fa03 f707 	lsl.w	r7, r3, r7
 8008810:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008814:	4621      	mov	r1, r4
 8008816:	421f      	tst	r7, r3
 8008818:	f04f 0702 	mov.w	r7, #2
 800881c:	4628      	mov	r0, r5
 800881e:	bf18      	it	ne
 8008820:	f04a 0a02 	orrne.w	sl, sl, #2
 8008824:	1b36      	subs	r6, r6, r4
 8008826:	f7ff fe1f 	bl	8008468 <rshift>
 800882a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800882e:	f1ba 0f00 	cmp.w	sl, #0
 8008832:	d048      	beq.n	80088c6 <__gethex+0x3be>
 8008834:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d015      	beq.n	8008868 <__gethex+0x360>
 800883c:	2b03      	cmp	r3, #3
 800883e:	d017      	beq.n	8008870 <__gethex+0x368>
 8008840:	2b01      	cmp	r3, #1
 8008842:	d109      	bne.n	8008858 <__gethex+0x350>
 8008844:	f01a 0f02 	tst.w	sl, #2
 8008848:	d006      	beq.n	8008858 <__gethex+0x350>
 800884a:	f8d9 3000 	ldr.w	r3, [r9]
 800884e:	ea4a 0a03 	orr.w	sl, sl, r3
 8008852:	f01a 0f01 	tst.w	sl, #1
 8008856:	d10e      	bne.n	8008876 <__gethex+0x36e>
 8008858:	f047 0710 	orr.w	r7, r7, #16
 800885c:	e033      	b.n	80088c6 <__gethex+0x3be>
 800885e:	f04f 0a01 	mov.w	sl, #1
 8008862:	e7cf      	b.n	8008804 <__gethex+0x2fc>
 8008864:	2701      	movs	r7, #1
 8008866:	e7e2      	b.n	800882e <__gethex+0x326>
 8008868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800886a:	f1c3 0301 	rsb	r3, r3, #1
 800886e:	9315      	str	r3, [sp, #84]	; 0x54
 8008870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0f0      	beq.n	8008858 <__gethex+0x350>
 8008876:	f04f 0c00 	mov.w	ip, #0
 800887a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800887e:	f105 0314 	add.w	r3, r5, #20
 8008882:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008886:	eb03 010a 	add.w	r1, r3, sl
 800888a:	4618      	mov	r0, r3
 800888c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008890:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008894:	d01c      	beq.n	80088d0 <__gethex+0x3c8>
 8008896:	3201      	adds	r2, #1
 8008898:	6002      	str	r2, [r0, #0]
 800889a:	2f02      	cmp	r7, #2
 800889c:	f105 0314 	add.w	r3, r5, #20
 80088a0:	d138      	bne.n	8008914 <__gethex+0x40c>
 80088a2:	f8d8 2000 	ldr.w	r2, [r8]
 80088a6:	3a01      	subs	r2, #1
 80088a8:	42b2      	cmp	r2, r6
 80088aa:	d10a      	bne.n	80088c2 <__gethex+0x3ba>
 80088ac:	2201      	movs	r2, #1
 80088ae:	1171      	asrs	r1, r6, #5
 80088b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088b4:	f006 061f 	and.w	r6, r6, #31
 80088b8:	fa02 f606 	lsl.w	r6, r2, r6
 80088bc:	421e      	tst	r6, r3
 80088be:	bf18      	it	ne
 80088c0:	4617      	movne	r7, r2
 80088c2:	f047 0720 	orr.w	r7, r7, #32
 80088c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088c8:	601d      	str	r5, [r3, #0]
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	601c      	str	r4, [r3, #0]
 80088ce:	e6a3      	b.n	8008618 <__gethex+0x110>
 80088d0:	4299      	cmp	r1, r3
 80088d2:	f843 cc04 	str.w	ip, [r3, #-4]
 80088d6:	d8d8      	bhi.n	800888a <__gethex+0x382>
 80088d8:	68ab      	ldr	r3, [r5, #8]
 80088da:	4599      	cmp	r9, r3
 80088dc:	db12      	blt.n	8008904 <__gethex+0x3fc>
 80088de:	6869      	ldr	r1, [r5, #4]
 80088e0:	9802      	ldr	r0, [sp, #8]
 80088e2:	3101      	adds	r1, #1
 80088e4:	f000 f908 	bl	8008af8 <_Balloc>
 80088e8:	4683      	mov	fp, r0
 80088ea:	692a      	ldr	r2, [r5, #16]
 80088ec:	f105 010c 	add.w	r1, r5, #12
 80088f0:	3202      	adds	r2, #2
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	300c      	adds	r0, #12
 80088f6:	f7fe fc61 	bl	80071bc <memcpy>
 80088fa:	4629      	mov	r1, r5
 80088fc:	9802      	ldr	r0, [sp, #8]
 80088fe:	f000 f92f 	bl	8008b60 <_Bfree>
 8008902:	465d      	mov	r5, fp
 8008904:	692b      	ldr	r3, [r5, #16]
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	612a      	str	r2, [r5, #16]
 800890a:	2201      	movs	r2, #1
 800890c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008910:	615a      	str	r2, [r3, #20]
 8008912:	e7c2      	b.n	800889a <__gethex+0x392>
 8008914:	692a      	ldr	r2, [r5, #16]
 8008916:	454a      	cmp	r2, r9
 8008918:	dd0b      	ble.n	8008932 <__gethex+0x42a>
 800891a:	2101      	movs	r1, #1
 800891c:	4628      	mov	r0, r5
 800891e:	f7ff fda3 	bl	8008468 <rshift>
 8008922:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008926:	3401      	adds	r4, #1
 8008928:	42a3      	cmp	r3, r4
 800892a:	f6ff aed8 	blt.w	80086de <__gethex+0x1d6>
 800892e:	2701      	movs	r7, #1
 8008930:	e7c7      	b.n	80088c2 <__gethex+0x3ba>
 8008932:	f016 061f 	ands.w	r6, r6, #31
 8008936:	d0fa      	beq.n	800892e <__gethex+0x426>
 8008938:	449a      	add	sl, r3
 800893a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800893e:	f000 f99f 	bl	8008c80 <__hi0bits>
 8008942:	f1c6 0620 	rsb	r6, r6, #32
 8008946:	42b0      	cmp	r0, r6
 8008948:	dbe7      	blt.n	800891a <__gethex+0x412>
 800894a:	e7f0      	b.n	800892e <__gethex+0x426>

0800894c <L_shift>:
 800894c:	f1c2 0208 	rsb	r2, r2, #8
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	b570      	push	{r4, r5, r6, lr}
 8008954:	f1c2 0620 	rsb	r6, r2, #32
 8008958:	6843      	ldr	r3, [r0, #4]
 800895a:	6804      	ldr	r4, [r0, #0]
 800895c:	fa03 f506 	lsl.w	r5, r3, r6
 8008960:	432c      	orrs	r4, r5
 8008962:	40d3      	lsrs	r3, r2
 8008964:	6004      	str	r4, [r0, #0]
 8008966:	f840 3f04 	str.w	r3, [r0, #4]!
 800896a:	4288      	cmp	r0, r1
 800896c:	d3f4      	bcc.n	8008958 <L_shift+0xc>
 800896e:	bd70      	pop	{r4, r5, r6, pc}

08008970 <__match>:
 8008970:	b530      	push	{r4, r5, lr}
 8008972:	6803      	ldr	r3, [r0, #0]
 8008974:	3301      	adds	r3, #1
 8008976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897a:	b914      	cbnz	r4, 8008982 <__match+0x12>
 800897c:	6003      	str	r3, [r0, #0]
 800897e:	2001      	movs	r0, #1
 8008980:	bd30      	pop	{r4, r5, pc}
 8008982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008986:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800898a:	2d19      	cmp	r5, #25
 800898c:	bf98      	it	ls
 800898e:	3220      	addls	r2, #32
 8008990:	42a2      	cmp	r2, r4
 8008992:	d0f0      	beq.n	8008976 <__match+0x6>
 8008994:	2000      	movs	r0, #0
 8008996:	e7f3      	b.n	8008980 <__match+0x10>

08008998 <__hexnan>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	2500      	movs	r5, #0
 800899e:	680b      	ldr	r3, [r1, #0]
 80089a0:	4682      	mov	sl, r0
 80089a2:	115f      	asrs	r7, r3, #5
 80089a4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80089a8:	f013 031f 	ands.w	r3, r3, #31
 80089ac:	bf18      	it	ne
 80089ae:	3704      	addne	r7, #4
 80089b0:	1f3e      	subs	r6, r7, #4
 80089b2:	4690      	mov	r8, r2
 80089b4:	46b1      	mov	r9, r6
 80089b6:	4634      	mov	r4, r6
 80089b8:	46ab      	mov	fp, r5
 80089ba:	b087      	sub	sp, #28
 80089bc:	6801      	ldr	r1, [r0, #0]
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	f847 5c04 	str.w	r5, [r7, #-4]
 80089c4:	9502      	str	r5, [sp, #8]
 80089c6:	784a      	ldrb	r2, [r1, #1]
 80089c8:	1c4b      	adds	r3, r1, #1
 80089ca:	9303      	str	r3, [sp, #12]
 80089cc:	b342      	cbz	r2, 8008a20 <__hexnan+0x88>
 80089ce:	4610      	mov	r0, r2
 80089d0:	9105      	str	r1, [sp, #20]
 80089d2:	9204      	str	r2, [sp, #16]
 80089d4:	f7ff fd83 	bl	80084de <__hexdig_fun>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d143      	bne.n	8008a64 <__hexnan+0xcc>
 80089dc:	9a04      	ldr	r2, [sp, #16]
 80089de:	9905      	ldr	r1, [sp, #20]
 80089e0:	2a20      	cmp	r2, #32
 80089e2:	d818      	bhi.n	8008a16 <__hexnan+0x7e>
 80089e4:	9b02      	ldr	r3, [sp, #8]
 80089e6:	459b      	cmp	fp, r3
 80089e8:	dd13      	ble.n	8008a12 <__hexnan+0x7a>
 80089ea:	454c      	cmp	r4, r9
 80089ec:	d206      	bcs.n	80089fc <__hexnan+0x64>
 80089ee:	2d07      	cmp	r5, #7
 80089f0:	dc04      	bgt.n	80089fc <__hexnan+0x64>
 80089f2:	462a      	mov	r2, r5
 80089f4:	4649      	mov	r1, r9
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7ff ffa8 	bl	800894c <L_shift>
 80089fc:	4544      	cmp	r4, r8
 80089fe:	d944      	bls.n	8008a8a <__hexnan+0xf2>
 8008a00:	2300      	movs	r3, #0
 8008a02:	f1a4 0904 	sub.w	r9, r4, #4
 8008a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a0a:	461d      	mov	r5, r3
 8008a0c:	464c      	mov	r4, r9
 8008a0e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a12:	9903      	ldr	r1, [sp, #12]
 8008a14:	e7d7      	b.n	80089c6 <__hexnan+0x2e>
 8008a16:	2a29      	cmp	r2, #41	; 0x29
 8008a18:	d14a      	bne.n	8008ab0 <__hexnan+0x118>
 8008a1a:	3102      	adds	r1, #2
 8008a1c:	f8ca 1000 	str.w	r1, [sl]
 8008a20:	f1bb 0f00 	cmp.w	fp, #0
 8008a24:	d044      	beq.n	8008ab0 <__hexnan+0x118>
 8008a26:	454c      	cmp	r4, r9
 8008a28:	d206      	bcs.n	8008a38 <__hexnan+0xa0>
 8008a2a:	2d07      	cmp	r5, #7
 8008a2c:	dc04      	bgt.n	8008a38 <__hexnan+0xa0>
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4649      	mov	r1, r9
 8008a32:	4620      	mov	r0, r4
 8008a34:	f7ff ff8a 	bl	800894c <L_shift>
 8008a38:	4544      	cmp	r4, r8
 8008a3a:	d928      	bls.n	8008a8e <__hexnan+0xf6>
 8008a3c:	4643      	mov	r3, r8
 8008a3e:	f854 2b04 	ldr.w	r2, [r4], #4
 8008a42:	42a6      	cmp	r6, r4
 8008a44:	f843 2b04 	str.w	r2, [r3], #4
 8008a48:	d2f9      	bcs.n	8008a3e <__hexnan+0xa6>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f843 2b04 	str.w	r2, [r3], #4
 8008a50:	429e      	cmp	r6, r3
 8008a52:	d2fb      	bcs.n	8008a4c <__hexnan+0xb4>
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	b91b      	cbnz	r3, 8008a60 <__hexnan+0xc8>
 8008a58:	4546      	cmp	r6, r8
 8008a5a:	d127      	bne.n	8008aac <__hexnan+0x114>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	6033      	str	r3, [r6, #0]
 8008a60:	2005      	movs	r0, #5
 8008a62:	e026      	b.n	8008ab2 <__hexnan+0x11a>
 8008a64:	3501      	adds	r5, #1
 8008a66:	2d08      	cmp	r5, #8
 8008a68:	f10b 0b01 	add.w	fp, fp, #1
 8008a6c:	dd06      	ble.n	8008a7c <__hexnan+0xe4>
 8008a6e:	4544      	cmp	r4, r8
 8008a70:	d9cf      	bls.n	8008a12 <__hexnan+0x7a>
 8008a72:	2300      	movs	r3, #0
 8008a74:	2501      	movs	r5, #1
 8008a76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a7a:	3c04      	subs	r4, #4
 8008a7c:	6822      	ldr	r2, [r4, #0]
 8008a7e:	f000 000f 	and.w	r0, r0, #15
 8008a82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008a86:	6020      	str	r0, [r4, #0]
 8008a88:	e7c3      	b.n	8008a12 <__hexnan+0x7a>
 8008a8a:	2508      	movs	r5, #8
 8008a8c:	e7c1      	b.n	8008a12 <__hexnan+0x7a>
 8008a8e:	9b01      	ldr	r3, [sp, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0df      	beq.n	8008a54 <__hexnan+0xbc>
 8008a94:	f04f 32ff 	mov.w	r2, #4294967295
 8008a98:	f1c3 0320 	rsb	r3, r3, #32
 8008a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008aa4:	401a      	ands	r2, r3
 8008aa6:	f847 2c04 	str.w	r2, [r7, #-4]
 8008aaa:	e7d3      	b.n	8008a54 <__hexnan+0xbc>
 8008aac:	3e04      	subs	r6, #4
 8008aae:	e7d1      	b.n	8008a54 <__hexnan+0xbc>
 8008ab0:	2004      	movs	r0, #4
 8008ab2:	b007      	add	sp, #28
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ab8 <__locale_ctype_ptr_l>:
 8008ab8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008abc:	4770      	bx	lr

08008abe <__localeconv_l>:
 8008abe:	30f0      	adds	r0, #240	; 0xf0
 8008ac0:	4770      	bx	lr
	...

08008ac4 <malloc>:
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <malloc+0xc>)
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f000 bc67 	b.w	800939c <_malloc_r>
 8008ace:	bf00      	nop
 8008ad0:	20000044 	.word	0x20000044

08008ad4 <__ascii_mbtowc>:
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	b901      	cbnz	r1, 8008ada <__ascii_mbtowc+0x6>
 8008ad8:	a901      	add	r1, sp, #4
 8008ada:	b142      	cbz	r2, 8008aee <__ascii_mbtowc+0x1a>
 8008adc:	b14b      	cbz	r3, 8008af2 <__ascii_mbtowc+0x1e>
 8008ade:	7813      	ldrb	r3, [r2, #0]
 8008ae0:	600b      	str	r3, [r1, #0]
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	1c10      	adds	r0, r2, #0
 8008ae6:	bf18      	it	ne
 8008ae8:	2001      	movne	r0, #1
 8008aea:	b002      	add	sp, #8
 8008aec:	4770      	bx	lr
 8008aee:	4610      	mov	r0, r2
 8008af0:	e7fb      	b.n	8008aea <__ascii_mbtowc+0x16>
 8008af2:	f06f 0001 	mvn.w	r0, #1
 8008af6:	e7f8      	b.n	8008aea <__ascii_mbtowc+0x16>

08008af8 <_Balloc>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008afc:	4604      	mov	r4, r0
 8008afe:	460e      	mov	r6, r1
 8008b00:	b93d      	cbnz	r5, 8008b12 <_Balloc+0x1a>
 8008b02:	2010      	movs	r0, #16
 8008b04:	f7ff ffde 	bl	8008ac4 <malloc>
 8008b08:	6260      	str	r0, [r4, #36]	; 0x24
 8008b0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b0e:	6005      	str	r5, [r0, #0]
 8008b10:	60c5      	str	r5, [r0, #12]
 8008b12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b14:	68eb      	ldr	r3, [r5, #12]
 8008b16:	b183      	cbz	r3, 8008b3a <_Balloc+0x42>
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b20:	b9b8      	cbnz	r0, 8008b52 <_Balloc+0x5a>
 8008b22:	2101      	movs	r1, #1
 8008b24:	fa01 f506 	lsl.w	r5, r1, r6
 8008b28:	1d6a      	adds	r2, r5, #5
 8008b2a:	0092      	lsls	r2, r2, #2
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fbdb 	bl	80092e8 <_calloc_r>
 8008b32:	b160      	cbz	r0, 8008b4e <_Balloc+0x56>
 8008b34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b38:	e00e      	b.n	8008b58 <_Balloc+0x60>
 8008b3a:	2221      	movs	r2, #33	; 0x21
 8008b3c:	2104      	movs	r1, #4
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 fbd2 	bl	80092e8 <_calloc_r>
 8008b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b46:	60e8      	str	r0, [r5, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e4      	bne.n	8008b18 <_Balloc+0x20>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	bd70      	pop	{r4, r5, r6, pc}
 8008b52:	6802      	ldr	r2, [r0, #0]
 8008b54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b5e:	e7f7      	b.n	8008b50 <_Balloc+0x58>

08008b60 <_Bfree>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b64:	4606      	mov	r6, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	b93c      	cbnz	r4, 8008b7a <_Bfree+0x1a>
 8008b6a:	2010      	movs	r0, #16
 8008b6c:	f7ff ffaa 	bl	8008ac4 <malloc>
 8008b70:	6270      	str	r0, [r6, #36]	; 0x24
 8008b72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b76:	6004      	str	r4, [r0, #0]
 8008b78:	60c4      	str	r4, [r0, #12]
 8008b7a:	b13d      	cbz	r5, 8008b8c <_Bfree+0x2c>
 8008b7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b7e:	686a      	ldr	r2, [r5, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b86:	6029      	str	r1, [r5, #0]
 8008b88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}

08008b8e <__multadd>:
 8008b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b92:	461f      	mov	r7, r3
 8008b94:	4606      	mov	r6, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	2300      	movs	r3, #0
 8008b9a:	690d      	ldr	r5, [r1, #16]
 8008b9c:	f101 0c14 	add.w	ip, r1, #20
 8008ba0:	f8dc 0000 	ldr.w	r0, [ip]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	b281      	uxth	r1, r0
 8008ba8:	fb02 7101 	mla	r1, r2, r1, r7
 8008bac:	0c00      	lsrs	r0, r0, #16
 8008bae:	0c0f      	lsrs	r7, r1, #16
 8008bb0:	fb02 7000 	mla	r0, r2, r0, r7
 8008bb4:	b289      	uxth	r1, r1
 8008bb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008bc0:	f84c 1b04 	str.w	r1, [ip], #4
 8008bc4:	dcec      	bgt.n	8008ba0 <__multadd+0x12>
 8008bc6:	b1d7      	cbz	r7, 8008bfe <__multadd+0x70>
 8008bc8:	68a3      	ldr	r3, [r4, #8]
 8008bca:	42ab      	cmp	r3, r5
 8008bcc:	dc12      	bgt.n	8008bf4 <__multadd+0x66>
 8008bce:	6861      	ldr	r1, [r4, #4]
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	3101      	adds	r1, #1
 8008bd4:	f7ff ff90 	bl	8008af8 <_Balloc>
 8008bd8:	4680      	mov	r8, r0
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	f104 010c 	add.w	r1, r4, #12
 8008be0:	3202      	adds	r2, #2
 8008be2:	0092      	lsls	r2, r2, #2
 8008be4:	300c      	adds	r0, #12
 8008be6:	f7fe fae9 	bl	80071bc <memcpy>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7ff ffb7 	bl	8008b60 <_Bfree>
 8008bf2:	4644      	mov	r4, r8
 8008bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bf8:	3501      	adds	r5, #1
 8008bfa:	615f      	str	r7, [r3, #20]
 8008bfc:	6125      	str	r5, [r4, #16]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c04 <__s2b>:
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c08:	4615      	mov	r5, r2
 8008c0a:	2209      	movs	r2, #9
 8008c0c:	461f      	mov	r7, r3
 8008c0e:	3308      	adds	r3, #8
 8008c10:	460c      	mov	r4, r1
 8008c12:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c16:	4606      	mov	r6, r0
 8008c18:	2201      	movs	r2, #1
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	db20      	blt.n	8008c62 <__s2b+0x5e>
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff ff69 	bl	8008af8 <_Balloc>
 8008c26:	9b08      	ldr	r3, [sp, #32]
 8008c28:	2d09      	cmp	r5, #9
 8008c2a:	6143      	str	r3, [r0, #20]
 8008c2c:	f04f 0301 	mov.w	r3, #1
 8008c30:	6103      	str	r3, [r0, #16]
 8008c32:	dd19      	ble.n	8008c68 <__s2b+0x64>
 8008c34:	f104 0809 	add.w	r8, r4, #9
 8008c38:	46c1      	mov	r9, r8
 8008c3a:	442c      	add	r4, r5
 8008c3c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008c40:	4601      	mov	r1, r0
 8008c42:	3b30      	subs	r3, #48	; 0x30
 8008c44:	220a      	movs	r2, #10
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ffa1 	bl	8008b8e <__multadd>
 8008c4c:	45a1      	cmp	r9, r4
 8008c4e:	d1f5      	bne.n	8008c3c <__s2b+0x38>
 8008c50:	eb08 0405 	add.w	r4, r8, r5
 8008c54:	3c08      	subs	r4, #8
 8008c56:	1b2d      	subs	r5, r5, r4
 8008c58:	1963      	adds	r3, r4, r5
 8008c5a:	42bb      	cmp	r3, r7
 8008c5c:	db07      	blt.n	8008c6e <__s2b+0x6a>
 8008c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c62:	0052      	lsls	r2, r2, #1
 8008c64:	3101      	adds	r1, #1
 8008c66:	e7d9      	b.n	8008c1c <__s2b+0x18>
 8008c68:	340a      	adds	r4, #10
 8008c6a:	2509      	movs	r5, #9
 8008c6c:	e7f3      	b.n	8008c56 <__s2b+0x52>
 8008c6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c72:	4601      	mov	r1, r0
 8008c74:	3b30      	subs	r3, #48	; 0x30
 8008c76:	220a      	movs	r2, #10
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff ff88 	bl	8008b8e <__multadd>
 8008c7e:	e7eb      	b.n	8008c58 <__s2b+0x54>

08008c80 <__hi0bits>:
 8008c80:	0c02      	lsrs	r2, r0, #16
 8008c82:	0412      	lsls	r2, r2, #16
 8008c84:	4603      	mov	r3, r0
 8008c86:	b9b2      	cbnz	r2, 8008cb6 <__hi0bits+0x36>
 8008c88:	0403      	lsls	r3, r0, #16
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c90:	bf04      	itt	eq
 8008c92:	021b      	lsleq	r3, r3, #8
 8008c94:	3008      	addeq	r0, #8
 8008c96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c9a:	bf04      	itt	eq
 8008c9c:	011b      	lsleq	r3, r3, #4
 8008c9e:	3004      	addeq	r0, #4
 8008ca0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ca4:	bf04      	itt	eq
 8008ca6:	009b      	lsleq	r3, r3, #2
 8008ca8:	3002      	addeq	r0, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	db06      	blt.n	8008cbc <__hi0bits+0x3c>
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	d503      	bpl.n	8008cba <__hi0bits+0x3a>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	4770      	bx	lr
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	e7e8      	b.n	8008c8c <__hi0bits+0xc>
 8008cba:	2020      	movs	r0, #32
 8008cbc:	4770      	bx	lr

08008cbe <__lo0bits>:
 8008cbe:	6803      	ldr	r3, [r0, #0]
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	f013 0207 	ands.w	r2, r3, #7
 8008cc6:	d00b      	beq.n	8008ce0 <__lo0bits+0x22>
 8008cc8:	07da      	lsls	r2, r3, #31
 8008cca:	d423      	bmi.n	8008d14 <__lo0bits+0x56>
 8008ccc:	0798      	lsls	r0, r3, #30
 8008cce:	bf49      	itett	mi
 8008cd0:	085b      	lsrmi	r3, r3, #1
 8008cd2:	089b      	lsrpl	r3, r3, #2
 8008cd4:	2001      	movmi	r0, #1
 8008cd6:	600b      	strmi	r3, [r1, #0]
 8008cd8:	bf5c      	itt	pl
 8008cda:	600b      	strpl	r3, [r1, #0]
 8008cdc:	2002      	movpl	r0, #2
 8008cde:	4770      	bx	lr
 8008ce0:	b298      	uxth	r0, r3
 8008ce2:	b9a8      	cbnz	r0, 8008d10 <__lo0bits+0x52>
 8008ce4:	2010      	movs	r0, #16
 8008ce6:	0c1b      	lsrs	r3, r3, #16
 8008ce8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cec:	bf04      	itt	eq
 8008cee:	0a1b      	lsreq	r3, r3, #8
 8008cf0:	3008      	addeq	r0, #8
 8008cf2:	071a      	lsls	r2, r3, #28
 8008cf4:	bf04      	itt	eq
 8008cf6:	091b      	lsreq	r3, r3, #4
 8008cf8:	3004      	addeq	r0, #4
 8008cfa:	079a      	lsls	r2, r3, #30
 8008cfc:	bf04      	itt	eq
 8008cfe:	089b      	lsreq	r3, r3, #2
 8008d00:	3002      	addeq	r0, #2
 8008d02:	07da      	lsls	r2, r3, #31
 8008d04:	d402      	bmi.n	8008d0c <__lo0bits+0x4e>
 8008d06:	085b      	lsrs	r3, r3, #1
 8008d08:	d006      	beq.n	8008d18 <__lo0bits+0x5a>
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	600b      	str	r3, [r1, #0]
 8008d0e:	4770      	bx	lr
 8008d10:	4610      	mov	r0, r2
 8008d12:	e7e9      	b.n	8008ce8 <__lo0bits+0x2a>
 8008d14:	2000      	movs	r0, #0
 8008d16:	4770      	bx	lr
 8008d18:	2020      	movs	r0, #32
 8008d1a:	4770      	bx	lr

08008d1c <__i2b>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	460c      	mov	r4, r1
 8008d20:	2101      	movs	r1, #1
 8008d22:	f7ff fee9 	bl	8008af8 <_Balloc>
 8008d26:	2201      	movs	r2, #1
 8008d28:	6144      	str	r4, [r0, #20]
 8008d2a:	6102      	str	r2, [r0, #16]
 8008d2c:	bd10      	pop	{r4, pc}

08008d2e <__multiply>:
 8008d2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d32:	4614      	mov	r4, r2
 8008d34:	690a      	ldr	r2, [r1, #16]
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	4688      	mov	r8, r1
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	bfbe      	ittt	lt
 8008d3e:	460b      	movlt	r3, r1
 8008d40:	46a0      	movlt	r8, r4
 8008d42:	461c      	movlt	r4, r3
 8008d44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d54:	eb07 0609 	add.w	r6, r7, r9
 8008d58:	42b3      	cmp	r3, r6
 8008d5a:	bfb8      	it	lt
 8008d5c:	3101      	addlt	r1, #1
 8008d5e:	f7ff fecb 	bl	8008af8 <_Balloc>
 8008d62:	f100 0514 	add.w	r5, r0, #20
 8008d66:	462b      	mov	r3, r5
 8008d68:	2200      	movs	r2, #0
 8008d6a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d6e:	4573      	cmp	r3, lr
 8008d70:	d316      	bcc.n	8008da0 <__multiply+0x72>
 8008d72:	f104 0214 	add.w	r2, r4, #20
 8008d76:	f108 0114 	add.w	r1, r8, #20
 8008d7a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d7e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	9201      	str	r2, [sp, #4]
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d80c      	bhi.n	8008da6 <__multiply+0x78>
 8008d8c:	2e00      	cmp	r6, #0
 8008d8e:	dd03      	ble.n	8008d98 <__multiply+0x6a>
 8008d90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d05d      	beq.n	8008e54 <__multiply+0x126>
 8008d98:	6106      	str	r6, [r0, #16]
 8008d9a:	b003      	add	sp, #12
 8008d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da0:	f843 2b04 	str.w	r2, [r3], #4
 8008da4:	e7e3      	b.n	8008d6e <__multiply+0x40>
 8008da6:	f8b2 b000 	ldrh.w	fp, [r2]
 8008daa:	f1bb 0f00 	cmp.w	fp, #0
 8008dae:	d023      	beq.n	8008df8 <__multiply+0xca>
 8008db0:	4689      	mov	r9, r1
 8008db2:	46ac      	mov	ip, r5
 8008db4:	f04f 0800 	mov.w	r8, #0
 8008db8:	f859 4b04 	ldr.w	r4, [r9], #4
 8008dbc:	f8dc a000 	ldr.w	sl, [ip]
 8008dc0:	b2a3      	uxth	r3, r4
 8008dc2:	fa1f fa8a 	uxth.w	sl, sl
 8008dc6:	fb0b a303 	mla	r3, fp, r3, sl
 8008dca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dce:	f8dc 4000 	ldr.w	r4, [ip]
 8008dd2:	4443      	add	r3, r8
 8008dd4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dd8:	fb0b 840a 	mla	r4, fp, sl, r8
 8008ddc:	46e2      	mov	sl, ip
 8008dde:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008de8:	454f      	cmp	r7, r9
 8008dea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dee:	f84a 3b04 	str.w	r3, [sl], #4
 8008df2:	d82b      	bhi.n	8008e4c <__multiply+0x11e>
 8008df4:	f8cc 8004 	str.w	r8, [ip, #4]
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	3204      	adds	r2, #4
 8008dfc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008e00:	f1ba 0f00 	cmp.w	sl, #0
 8008e04:	d020      	beq.n	8008e48 <__multiply+0x11a>
 8008e06:	4689      	mov	r9, r1
 8008e08:	46a8      	mov	r8, r5
 8008e0a:	f04f 0b00 	mov.w	fp, #0
 8008e0e:	682b      	ldr	r3, [r5, #0]
 8008e10:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e14:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e1e:	46c4      	mov	ip, r8
 8008e20:	445c      	add	r4, fp
 8008e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e26:	f84c 3b04 	str.w	r3, [ip], #4
 8008e2a:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e2e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	fb0a b303 	mla	r3, sl, r3, fp
 8008e38:	454f      	cmp	r7, r9
 8008e3a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e3e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e42:	d805      	bhi.n	8008e50 <__multiply+0x122>
 8008e44:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e48:	3504      	adds	r5, #4
 8008e4a:	e79b      	b.n	8008d84 <__multiply+0x56>
 8008e4c:	46d4      	mov	ip, sl
 8008e4e:	e7b3      	b.n	8008db8 <__multiply+0x8a>
 8008e50:	46e0      	mov	r8, ip
 8008e52:	e7dd      	b.n	8008e10 <__multiply+0xe2>
 8008e54:	3e01      	subs	r6, #1
 8008e56:	e799      	b.n	8008d8c <__multiply+0x5e>

08008e58 <__pow5mult>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	f012 0203 	ands.w	r2, r2, #3
 8008e62:	4606      	mov	r6, r0
 8008e64:	460f      	mov	r7, r1
 8008e66:	d007      	beq.n	8008e78 <__pow5mult+0x20>
 8008e68:	4c21      	ldr	r4, [pc, #132]	; (8008ef0 <__pow5mult+0x98>)
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e72:	f7ff fe8c 	bl	8008b8e <__multadd>
 8008e76:	4607      	mov	r7, r0
 8008e78:	10ad      	asrs	r5, r5, #2
 8008e7a:	d035      	beq.n	8008ee8 <__pow5mult+0x90>
 8008e7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e7e:	b93c      	cbnz	r4, 8008e90 <__pow5mult+0x38>
 8008e80:	2010      	movs	r0, #16
 8008e82:	f7ff fe1f 	bl	8008ac4 <malloc>
 8008e86:	6270      	str	r0, [r6, #36]	; 0x24
 8008e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e8c:	6004      	str	r4, [r0, #0]
 8008e8e:	60c4      	str	r4, [r0, #12]
 8008e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e98:	b94c      	cbnz	r4, 8008eae <__pow5mult+0x56>
 8008e9a:	f240 2171 	movw	r1, #625	; 0x271
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ff3c 	bl	8008d1c <__i2b>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	f8c8 0008 	str.w	r0, [r8, #8]
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	f04f 0800 	mov.w	r8, #0
 8008eb2:	07eb      	lsls	r3, r5, #31
 8008eb4:	d50a      	bpl.n	8008ecc <__pow5mult+0x74>
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff ff37 	bl	8008d2e <__multiply>
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7ff fe4b 	bl	8008b60 <_Bfree>
 8008eca:	464f      	mov	r7, r9
 8008ecc:	106d      	asrs	r5, r5, #1
 8008ece:	d00b      	beq.n	8008ee8 <__pow5mult+0x90>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	b938      	cbnz	r0, 8008ee4 <__pow5mult+0x8c>
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff ff28 	bl	8008d2e <__multiply>
 8008ede:	6020      	str	r0, [r4, #0]
 8008ee0:	f8c0 8000 	str.w	r8, [r0]
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	e7e4      	b.n	8008eb2 <__pow5mult+0x5a>
 8008ee8:	4638      	mov	r0, r7
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eee:	bf00      	nop
 8008ef0:	08009cc0 	.word	0x08009cc0

08008ef4 <__lshift>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	460c      	mov	r4, r1
 8008efa:	4607      	mov	r7, r0
 8008efc:	4616      	mov	r6, r2
 8008efe:	6923      	ldr	r3, [r4, #16]
 8008f00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f04:	eb0a 0903 	add.w	r9, sl, r3
 8008f08:	6849      	ldr	r1, [r1, #4]
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	f109 0501 	add.w	r5, r9, #1
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	db32      	blt.n	8008f7a <__lshift+0x86>
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff fdef 	bl	8008af8 <_Balloc>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f100 0114 	add.w	r1, r0, #20
 8008f24:	4553      	cmp	r3, sl
 8008f26:	db2b      	blt.n	8008f80 <__lshift+0x8c>
 8008f28:	6920      	ldr	r0, [r4, #16]
 8008f2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f2e:	f104 0314 	add.w	r3, r4, #20
 8008f32:	f016 021f 	ands.w	r2, r6, #31
 8008f36:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f3e:	d025      	beq.n	8008f8c <__lshift+0x98>
 8008f40:	2000      	movs	r0, #0
 8008f42:	f1c2 0e20 	rsb	lr, r2, #32
 8008f46:	468a      	mov	sl, r1
 8008f48:	681e      	ldr	r6, [r3, #0]
 8008f4a:	4096      	lsls	r6, r2
 8008f4c:	4330      	orrs	r0, r6
 8008f4e:	f84a 0b04 	str.w	r0, [sl], #4
 8008f52:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f56:	459c      	cmp	ip, r3
 8008f58:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f5c:	d814      	bhi.n	8008f88 <__lshift+0x94>
 8008f5e:	6048      	str	r0, [r1, #4]
 8008f60:	b108      	cbz	r0, 8008f66 <__lshift+0x72>
 8008f62:	f109 0502 	add.w	r5, r9, #2
 8008f66:	3d01      	subs	r5, #1
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	f7ff fdf6 	bl	8008b60 <_Bfree>
 8008f74:	4640      	mov	r0, r8
 8008f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7a:	3101      	adds	r1, #1
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	e7c7      	b.n	8008f10 <__lshift+0x1c>
 8008f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f84:	3301      	adds	r3, #1
 8008f86:	e7cd      	b.n	8008f24 <__lshift+0x30>
 8008f88:	4651      	mov	r1, sl
 8008f8a:	e7dc      	b.n	8008f46 <__lshift+0x52>
 8008f8c:	3904      	subs	r1, #4
 8008f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f92:	459c      	cmp	ip, r3
 8008f94:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f98:	d8f9      	bhi.n	8008f8e <__lshift+0x9a>
 8008f9a:	e7e4      	b.n	8008f66 <__lshift+0x72>

08008f9c <__mcmp>:
 8008f9c:	6903      	ldr	r3, [r0, #16]
 8008f9e:	690a      	ldr	r2, [r1, #16]
 8008fa0:	b530      	push	{r4, r5, lr}
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	d10c      	bne.n	8008fc0 <__mcmp+0x24>
 8008fa6:	0092      	lsls	r2, r2, #2
 8008fa8:	3014      	adds	r0, #20
 8008faa:	3114      	adds	r1, #20
 8008fac:	1884      	adds	r4, r0, r2
 8008fae:	4411      	add	r1, r2
 8008fb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fb8:	4295      	cmp	r5, r2
 8008fba:	d003      	beq.n	8008fc4 <__mcmp+0x28>
 8008fbc:	d305      	bcc.n	8008fca <__mcmp+0x2e>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd30      	pop	{r4, r5, pc}
 8008fc4:	42a0      	cmp	r0, r4
 8008fc6:	d3f3      	bcc.n	8008fb0 <__mcmp+0x14>
 8008fc8:	e7fa      	b.n	8008fc0 <__mcmp+0x24>
 8008fca:	f04f 33ff 	mov.w	r3, #4294967295
 8008fce:	e7f7      	b.n	8008fc0 <__mcmp+0x24>

08008fd0 <__mdiff>:
 8008fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4628      	mov	r0, r5
 8008fdc:	4614      	mov	r4, r2
 8008fde:	f7ff ffdd 	bl	8008f9c <__mcmp>
 8008fe2:	1e06      	subs	r6, r0, #0
 8008fe4:	d108      	bne.n	8008ff8 <__mdiff+0x28>
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4638      	mov	r0, r7
 8008fea:	f7ff fd85 	bl	8008af8 <_Balloc>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff8:	bfa4      	itt	ge
 8008ffa:	4623      	movge	r3, r4
 8008ffc:	462c      	movge	r4, r5
 8008ffe:	4638      	mov	r0, r7
 8009000:	6861      	ldr	r1, [r4, #4]
 8009002:	bfa6      	itte	ge
 8009004:	461d      	movge	r5, r3
 8009006:	2600      	movge	r6, #0
 8009008:	2601      	movlt	r6, #1
 800900a:	f7ff fd75 	bl	8008af8 <_Balloc>
 800900e:	f04f 0e00 	mov.w	lr, #0
 8009012:	60c6      	str	r6, [r0, #12]
 8009014:	692b      	ldr	r3, [r5, #16]
 8009016:	6926      	ldr	r6, [r4, #16]
 8009018:	f104 0214 	add.w	r2, r4, #20
 800901c:	f105 0914 	add.w	r9, r5, #20
 8009020:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009024:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009028:	f100 0114 	add.w	r1, r0, #20
 800902c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009030:	f859 5b04 	ldr.w	r5, [r9], #4
 8009034:	fa1f f38a 	uxth.w	r3, sl
 8009038:	4473      	add	r3, lr
 800903a:	b2ac      	uxth	r4, r5
 800903c:	1b1b      	subs	r3, r3, r4
 800903e:	0c2c      	lsrs	r4, r5, #16
 8009040:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009044:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009048:	b29b      	uxth	r3, r3
 800904a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800904e:	45c8      	cmp	r8, r9
 8009050:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009054:	4694      	mov	ip, r2
 8009056:	f841 4b04 	str.w	r4, [r1], #4
 800905a:	d8e7      	bhi.n	800902c <__mdiff+0x5c>
 800905c:	45bc      	cmp	ip, r7
 800905e:	d304      	bcc.n	800906a <__mdiff+0x9a>
 8009060:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009064:	b183      	cbz	r3, 8009088 <__mdiff+0xb8>
 8009066:	6106      	str	r6, [r0, #16]
 8009068:	e7c4      	b.n	8008ff4 <__mdiff+0x24>
 800906a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800906e:	b2a2      	uxth	r2, r4
 8009070:	4472      	add	r2, lr
 8009072:	1413      	asrs	r3, r2, #16
 8009074:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009078:	b292      	uxth	r2, r2
 800907a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800907e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009082:	f841 2b04 	str.w	r2, [r1], #4
 8009086:	e7e9      	b.n	800905c <__mdiff+0x8c>
 8009088:	3e01      	subs	r6, #1
 800908a:	e7e9      	b.n	8009060 <__mdiff+0x90>

0800908c <__ulp>:
 800908c:	4b10      	ldr	r3, [pc, #64]	; (80090d0 <__ulp+0x44>)
 800908e:	400b      	ands	r3, r1
 8009090:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009094:	2b00      	cmp	r3, #0
 8009096:	dd02      	ble.n	800909e <__ulp+0x12>
 8009098:	2000      	movs	r0, #0
 800909a:	4619      	mov	r1, r3
 800909c:	4770      	bx	lr
 800909e:	425b      	negs	r3, r3
 80090a0:	151b      	asrs	r3, r3, #20
 80090a2:	2b13      	cmp	r3, #19
 80090a4:	f04f 0000 	mov.w	r0, #0
 80090a8:	f04f 0100 	mov.w	r1, #0
 80090ac:	dc04      	bgt.n	80090b8 <__ulp+0x2c>
 80090ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80090b2:	fa42 f103 	asr.w	r1, r2, r3
 80090b6:	4770      	bx	lr
 80090b8:	2201      	movs	r2, #1
 80090ba:	3b14      	subs	r3, #20
 80090bc:	2b1e      	cmp	r3, #30
 80090be:	bfce      	itee	gt
 80090c0:	4613      	movgt	r3, r2
 80090c2:	f1c3 031f 	rsble	r3, r3, #31
 80090c6:	fa02 f303 	lslle.w	r3, r2, r3
 80090ca:	4618      	mov	r0, r3
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	7ff00000 	.word	0x7ff00000

080090d4 <__b2d>:
 80090d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d8:	6907      	ldr	r7, [r0, #16]
 80090da:	f100 0914 	add.w	r9, r0, #20
 80090de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80090e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80090e6:	f1a7 0804 	sub.w	r8, r7, #4
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7ff fdc8 	bl	8008c80 <__hi0bits>
 80090f0:	f1c0 0320 	rsb	r3, r0, #32
 80090f4:	280a      	cmp	r0, #10
 80090f6:	600b      	str	r3, [r1, #0]
 80090f8:	491e      	ldr	r1, [pc, #120]	; (8009174 <__b2d+0xa0>)
 80090fa:	dc17      	bgt.n	800912c <__b2d+0x58>
 80090fc:	45c1      	cmp	r9, r8
 80090fe:	bf28      	it	cs
 8009100:	2200      	movcs	r2, #0
 8009102:	f1c0 0c0b 	rsb	ip, r0, #11
 8009106:	fa26 f30c 	lsr.w	r3, r6, ip
 800910a:	bf38      	it	cc
 800910c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009110:	ea43 0501 	orr.w	r5, r3, r1
 8009114:	f100 0315 	add.w	r3, r0, #21
 8009118:	fa06 f303 	lsl.w	r3, r6, r3
 800911c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009120:	ea43 0402 	orr.w	r4, r3, r2
 8009124:	4620      	mov	r0, r4
 8009126:	4629      	mov	r1, r5
 8009128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800912c:	45c1      	cmp	r9, r8
 800912e:	bf3a      	itte	cc
 8009130:	f1a7 0808 	subcc.w	r8, r7, #8
 8009134:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009138:	2200      	movcs	r2, #0
 800913a:	f1b0 030b 	subs.w	r3, r0, #11
 800913e:	d015      	beq.n	800916c <__b2d+0x98>
 8009140:	409e      	lsls	r6, r3
 8009142:	f1c3 0720 	rsb	r7, r3, #32
 8009146:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800914a:	fa22 f107 	lsr.w	r1, r2, r7
 800914e:	45c8      	cmp	r8, r9
 8009150:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009154:	ea46 0501 	orr.w	r5, r6, r1
 8009158:	bf94      	ite	ls
 800915a:	2100      	movls	r1, #0
 800915c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009160:	fa02 f003 	lsl.w	r0, r2, r3
 8009164:	40f9      	lsrs	r1, r7
 8009166:	ea40 0401 	orr.w	r4, r0, r1
 800916a:	e7db      	b.n	8009124 <__b2d+0x50>
 800916c:	ea46 0501 	orr.w	r5, r6, r1
 8009170:	4614      	mov	r4, r2
 8009172:	e7d7      	b.n	8009124 <__b2d+0x50>
 8009174:	3ff00000 	.word	0x3ff00000

08009178 <__d2b>:
 8009178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800917c:	461c      	mov	r4, r3
 800917e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009182:	2101      	movs	r1, #1
 8009184:	4690      	mov	r8, r2
 8009186:	f7ff fcb7 	bl	8008af8 <_Balloc>
 800918a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800918e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009192:	4607      	mov	r7, r0
 8009194:	bb34      	cbnz	r4, 80091e4 <__d2b+0x6c>
 8009196:	9201      	str	r2, [sp, #4]
 8009198:	f1b8 0200 	subs.w	r2, r8, #0
 800919c:	d027      	beq.n	80091ee <__d2b+0x76>
 800919e:	a802      	add	r0, sp, #8
 80091a0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80091a4:	f7ff fd8b 	bl	8008cbe <__lo0bits>
 80091a8:	9900      	ldr	r1, [sp, #0]
 80091aa:	b1f0      	cbz	r0, 80091ea <__d2b+0x72>
 80091ac:	9a01      	ldr	r2, [sp, #4]
 80091ae:	f1c0 0320 	rsb	r3, r0, #32
 80091b2:	fa02 f303 	lsl.w	r3, r2, r3
 80091b6:	430b      	orrs	r3, r1
 80091b8:	40c2      	lsrs	r2, r0
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	9201      	str	r2, [sp, #4]
 80091be:	9b01      	ldr	r3, [sp, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bf14      	ite	ne
 80091c4:	2102      	movne	r1, #2
 80091c6:	2101      	moveq	r1, #1
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	6139      	str	r1, [r7, #16]
 80091cc:	b1c4      	cbz	r4, 8009200 <__d2b+0x88>
 80091ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80091d2:	4404      	add	r4, r0
 80091d4:	6034      	str	r4, [r6, #0]
 80091d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091da:	6028      	str	r0, [r5, #0]
 80091dc:	4638      	mov	r0, r7
 80091de:	b002      	add	sp, #8
 80091e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80091e8:	e7d5      	b.n	8009196 <__d2b+0x1e>
 80091ea:	6179      	str	r1, [r7, #20]
 80091ec:	e7e7      	b.n	80091be <__d2b+0x46>
 80091ee:	a801      	add	r0, sp, #4
 80091f0:	f7ff fd65 	bl	8008cbe <__lo0bits>
 80091f4:	2101      	movs	r1, #1
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	6139      	str	r1, [r7, #16]
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	3020      	adds	r0, #32
 80091fe:	e7e5      	b.n	80091cc <__d2b+0x54>
 8009200:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009204:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009208:	6030      	str	r0, [r6, #0]
 800920a:	6918      	ldr	r0, [r3, #16]
 800920c:	f7ff fd38 	bl	8008c80 <__hi0bits>
 8009210:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009214:	e7e1      	b.n	80091da <__d2b+0x62>

08009216 <__ratio>:
 8009216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	4688      	mov	r8, r1
 800921c:	4669      	mov	r1, sp
 800921e:	4681      	mov	r9, r0
 8009220:	f7ff ff58 	bl	80090d4 <__b2d>
 8009224:	468b      	mov	fp, r1
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	4640      	mov	r0, r8
 800922c:	a901      	add	r1, sp, #4
 800922e:	f7ff ff51 	bl	80090d4 <__b2d>
 8009232:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009236:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800923a:	460d      	mov	r5, r1
 800923c:	eba3 0c02 	sub.w	ip, r3, r2
 8009240:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800924a:	2b00      	cmp	r3, #0
 800924c:	bfd5      	itete	le
 800924e:	460a      	movle	r2, r1
 8009250:	463a      	movgt	r2, r7
 8009252:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009256:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800925a:	bfd8      	it	le
 800925c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009260:	462b      	mov	r3, r5
 8009262:	4602      	mov	r2, r0
 8009264:	4659      	mov	r1, fp
 8009266:	4630      	mov	r0, r6
 8009268:	f7f7 fa60 	bl	800072c <__aeabi_ddiv>
 800926c:	b003      	add	sp, #12
 800926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009272 <__copybits>:
 8009272:	3901      	subs	r1, #1
 8009274:	b510      	push	{r4, lr}
 8009276:	1149      	asrs	r1, r1, #5
 8009278:	6914      	ldr	r4, [r2, #16]
 800927a:	3101      	adds	r1, #1
 800927c:	f102 0314 	add.w	r3, r2, #20
 8009280:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009284:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009288:	42a3      	cmp	r3, r4
 800928a:	4602      	mov	r2, r0
 800928c:	d303      	bcc.n	8009296 <__copybits+0x24>
 800928e:	2300      	movs	r3, #0
 8009290:	428a      	cmp	r2, r1
 8009292:	d305      	bcc.n	80092a0 <__copybits+0x2e>
 8009294:	bd10      	pop	{r4, pc}
 8009296:	f853 2b04 	ldr.w	r2, [r3], #4
 800929a:	f840 2b04 	str.w	r2, [r0], #4
 800929e:	e7f3      	b.n	8009288 <__copybits+0x16>
 80092a0:	f842 3b04 	str.w	r3, [r2], #4
 80092a4:	e7f4      	b.n	8009290 <__copybits+0x1e>

080092a6 <__any_on>:
 80092a6:	f100 0214 	add.w	r2, r0, #20
 80092aa:	6900      	ldr	r0, [r0, #16]
 80092ac:	114b      	asrs	r3, r1, #5
 80092ae:	4298      	cmp	r0, r3
 80092b0:	b510      	push	{r4, lr}
 80092b2:	db11      	blt.n	80092d8 <__any_on+0x32>
 80092b4:	dd0a      	ble.n	80092cc <__any_on+0x26>
 80092b6:	f011 011f 	ands.w	r1, r1, #31
 80092ba:	d007      	beq.n	80092cc <__any_on+0x26>
 80092bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092c0:	fa24 f001 	lsr.w	r0, r4, r1
 80092c4:	fa00 f101 	lsl.w	r1, r0, r1
 80092c8:	428c      	cmp	r4, r1
 80092ca:	d10b      	bne.n	80092e4 <__any_on+0x3e>
 80092cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d803      	bhi.n	80092dc <__any_on+0x36>
 80092d4:	2000      	movs	r0, #0
 80092d6:	bd10      	pop	{r4, pc}
 80092d8:	4603      	mov	r3, r0
 80092da:	e7f7      	b.n	80092cc <__any_on+0x26>
 80092dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092e0:	2900      	cmp	r1, #0
 80092e2:	d0f5      	beq.n	80092d0 <__any_on+0x2a>
 80092e4:	2001      	movs	r0, #1
 80092e6:	e7f6      	b.n	80092d6 <__any_on+0x30>

080092e8 <_calloc_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	fb02 f401 	mul.w	r4, r2, r1
 80092ee:	4621      	mov	r1, r4
 80092f0:	f000 f854 	bl	800939c <_malloc_r>
 80092f4:	4605      	mov	r5, r0
 80092f6:	b118      	cbz	r0, 8009300 <_calloc_r+0x18>
 80092f8:	4622      	mov	r2, r4
 80092fa:	2100      	movs	r1, #0
 80092fc:	f7fd ff69 	bl	80071d2 <memset>
 8009300:	4628      	mov	r0, r5
 8009302:	bd38      	pop	{r3, r4, r5, pc}

08009304 <_free_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4605      	mov	r5, r0
 8009308:	2900      	cmp	r1, #0
 800930a:	d043      	beq.n	8009394 <_free_r+0x90>
 800930c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009310:	1f0c      	subs	r4, r1, #4
 8009312:	2b00      	cmp	r3, #0
 8009314:	bfb8      	it	lt
 8009316:	18e4      	addlt	r4, r4, r3
 8009318:	f000 fbb8 	bl	8009a8c <__malloc_lock>
 800931c:	4a1e      	ldr	r2, [pc, #120]	; (8009398 <_free_r+0x94>)
 800931e:	6813      	ldr	r3, [r2, #0]
 8009320:	4610      	mov	r0, r2
 8009322:	b933      	cbnz	r3, 8009332 <_free_r+0x2e>
 8009324:	6063      	str	r3, [r4, #4]
 8009326:	6014      	str	r4, [r2, #0]
 8009328:	4628      	mov	r0, r5
 800932a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800932e:	f000 bbae 	b.w	8009a8e <__malloc_unlock>
 8009332:	42a3      	cmp	r3, r4
 8009334:	d90b      	bls.n	800934e <_free_r+0x4a>
 8009336:	6821      	ldr	r1, [r4, #0]
 8009338:	1862      	adds	r2, r4, r1
 800933a:	4293      	cmp	r3, r2
 800933c:	bf01      	itttt	eq
 800933e:	681a      	ldreq	r2, [r3, #0]
 8009340:	685b      	ldreq	r3, [r3, #4]
 8009342:	1852      	addeq	r2, r2, r1
 8009344:	6022      	streq	r2, [r4, #0]
 8009346:	6063      	str	r3, [r4, #4]
 8009348:	6004      	str	r4, [r0, #0]
 800934a:	e7ed      	b.n	8009328 <_free_r+0x24>
 800934c:	4613      	mov	r3, r2
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	b10a      	cbz	r2, 8009356 <_free_r+0x52>
 8009352:	42a2      	cmp	r2, r4
 8009354:	d9fa      	bls.n	800934c <_free_r+0x48>
 8009356:	6819      	ldr	r1, [r3, #0]
 8009358:	1858      	adds	r0, r3, r1
 800935a:	42a0      	cmp	r0, r4
 800935c:	d10b      	bne.n	8009376 <_free_r+0x72>
 800935e:	6820      	ldr	r0, [r4, #0]
 8009360:	4401      	add	r1, r0
 8009362:	1858      	adds	r0, r3, r1
 8009364:	4282      	cmp	r2, r0
 8009366:	6019      	str	r1, [r3, #0]
 8009368:	d1de      	bne.n	8009328 <_free_r+0x24>
 800936a:	6810      	ldr	r0, [r2, #0]
 800936c:	6852      	ldr	r2, [r2, #4]
 800936e:	4401      	add	r1, r0
 8009370:	6019      	str	r1, [r3, #0]
 8009372:	605a      	str	r2, [r3, #4]
 8009374:	e7d8      	b.n	8009328 <_free_r+0x24>
 8009376:	d902      	bls.n	800937e <_free_r+0x7a>
 8009378:	230c      	movs	r3, #12
 800937a:	602b      	str	r3, [r5, #0]
 800937c:	e7d4      	b.n	8009328 <_free_r+0x24>
 800937e:	6820      	ldr	r0, [r4, #0]
 8009380:	1821      	adds	r1, r4, r0
 8009382:	428a      	cmp	r2, r1
 8009384:	bf01      	itttt	eq
 8009386:	6811      	ldreq	r1, [r2, #0]
 8009388:	6852      	ldreq	r2, [r2, #4]
 800938a:	1809      	addeq	r1, r1, r0
 800938c:	6021      	streq	r1, [r4, #0]
 800938e:	6062      	str	r2, [r4, #4]
 8009390:	605c      	str	r4, [r3, #4]
 8009392:	e7c9      	b.n	8009328 <_free_r+0x24>
 8009394:	bd38      	pop	{r3, r4, r5, pc}
 8009396:	bf00      	nop
 8009398:	20000298 	.word	0x20000298

0800939c <_malloc_r>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	1ccd      	adds	r5, r1, #3
 80093a0:	f025 0503 	bic.w	r5, r5, #3
 80093a4:	3508      	adds	r5, #8
 80093a6:	2d0c      	cmp	r5, #12
 80093a8:	bf38      	it	cc
 80093aa:	250c      	movcc	r5, #12
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	4606      	mov	r6, r0
 80093b0:	db01      	blt.n	80093b6 <_malloc_r+0x1a>
 80093b2:	42a9      	cmp	r1, r5
 80093b4:	d903      	bls.n	80093be <_malloc_r+0x22>
 80093b6:	230c      	movs	r3, #12
 80093b8:	6033      	str	r3, [r6, #0]
 80093ba:	2000      	movs	r0, #0
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
 80093be:	f000 fb65 	bl	8009a8c <__malloc_lock>
 80093c2:	4a21      	ldr	r2, [pc, #132]	; (8009448 <_malloc_r+0xac>)
 80093c4:	6814      	ldr	r4, [r2, #0]
 80093c6:	4621      	mov	r1, r4
 80093c8:	b991      	cbnz	r1, 80093f0 <_malloc_r+0x54>
 80093ca:	4c20      	ldr	r4, [pc, #128]	; (800944c <_malloc_r+0xb0>)
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	b91b      	cbnz	r3, 80093d8 <_malloc_r+0x3c>
 80093d0:	4630      	mov	r0, r6
 80093d2:	f000 fb17 	bl	8009a04 <_sbrk_r>
 80093d6:	6020      	str	r0, [r4, #0]
 80093d8:	4629      	mov	r1, r5
 80093da:	4630      	mov	r0, r6
 80093dc:	f000 fb12 	bl	8009a04 <_sbrk_r>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d124      	bne.n	800942e <_malloc_r+0x92>
 80093e4:	230c      	movs	r3, #12
 80093e6:	4630      	mov	r0, r6
 80093e8:	6033      	str	r3, [r6, #0]
 80093ea:	f000 fb50 	bl	8009a8e <__malloc_unlock>
 80093ee:	e7e4      	b.n	80093ba <_malloc_r+0x1e>
 80093f0:	680b      	ldr	r3, [r1, #0]
 80093f2:	1b5b      	subs	r3, r3, r5
 80093f4:	d418      	bmi.n	8009428 <_malloc_r+0x8c>
 80093f6:	2b0b      	cmp	r3, #11
 80093f8:	d90f      	bls.n	800941a <_malloc_r+0x7e>
 80093fa:	600b      	str	r3, [r1, #0]
 80093fc:	18cc      	adds	r4, r1, r3
 80093fe:	50cd      	str	r5, [r1, r3]
 8009400:	4630      	mov	r0, r6
 8009402:	f000 fb44 	bl	8009a8e <__malloc_unlock>
 8009406:	f104 000b 	add.w	r0, r4, #11
 800940a:	1d23      	adds	r3, r4, #4
 800940c:	f020 0007 	bic.w	r0, r0, #7
 8009410:	1ac3      	subs	r3, r0, r3
 8009412:	d0d3      	beq.n	80093bc <_malloc_r+0x20>
 8009414:	425a      	negs	r2, r3
 8009416:	50e2      	str	r2, [r4, r3]
 8009418:	e7d0      	b.n	80093bc <_malloc_r+0x20>
 800941a:	684b      	ldr	r3, [r1, #4]
 800941c:	428c      	cmp	r4, r1
 800941e:	bf16      	itet	ne
 8009420:	6063      	strne	r3, [r4, #4]
 8009422:	6013      	streq	r3, [r2, #0]
 8009424:	460c      	movne	r4, r1
 8009426:	e7eb      	b.n	8009400 <_malloc_r+0x64>
 8009428:	460c      	mov	r4, r1
 800942a:	6849      	ldr	r1, [r1, #4]
 800942c:	e7cc      	b.n	80093c8 <_malloc_r+0x2c>
 800942e:	1cc4      	adds	r4, r0, #3
 8009430:	f024 0403 	bic.w	r4, r4, #3
 8009434:	42a0      	cmp	r0, r4
 8009436:	d005      	beq.n	8009444 <_malloc_r+0xa8>
 8009438:	1a21      	subs	r1, r4, r0
 800943a:	4630      	mov	r0, r6
 800943c:	f000 fae2 	bl	8009a04 <_sbrk_r>
 8009440:	3001      	adds	r0, #1
 8009442:	d0cf      	beq.n	80093e4 <_malloc_r+0x48>
 8009444:	6025      	str	r5, [r4, #0]
 8009446:	e7db      	b.n	8009400 <_malloc_r+0x64>
 8009448:	20000298 	.word	0x20000298
 800944c:	2000029c 	.word	0x2000029c

08009450 <__ssputs_r>:
 8009450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009454:	688e      	ldr	r6, [r1, #8]
 8009456:	4682      	mov	sl, r0
 8009458:	429e      	cmp	r6, r3
 800945a:	460c      	mov	r4, r1
 800945c:	4690      	mov	r8, r2
 800945e:	4699      	mov	r9, r3
 8009460:	d837      	bhi.n	80094d2 <__ssputs_r+0x82>
 8009462:	898a      	ldrh	r2, [r1, #12]
 8009464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009468:	d031      	beq.n	80094ce <__ssputs_r+0x7e>
 800946a:	2302      	movs	r3, #2
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	6909      	ldr	r1, [r1, #16]
 8009470:	1a6f      	subs	r7, r5, r1
 8009472:	6965      	ldr	r5, [r4, #20]
 8009474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009478:	fb95 f5f3 	sdiv	r5, r5, r3
 800947c:	f109 0301 	add.w	r3, r9, #1
 8009480:	443b      	add	r3, r7
 8009482:	429d      	cmp	r5, r3
 8009484:	bf38      	it	cc
 8009486:	461d      	movcc	r5, r3
 8009488:	0553      	lsls	r3, r2, #21
 800948a:	d530      	bpl.n	80094ee <__ssputs_r+0x9e>
 800948c:	4629      	mov	r1, r5
 800948e:	f7ff ff85 	bl	800939c <_malloc_r>
 8009492:	4606      	mov	r6, r0
 8009494:	b950      	cbnz	r0, 80094ac <__ssputs_r+0x5c>
 8009496:	230c      	movs	r3, #12
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	f8ca 3000 	str.w	r3, [sl]
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ac:	463a      	mov	r2, r7
 80094ae:	6921      	ldr	r1, [r4, #16]
 80094b0:	f7fd fe84 	bl	80071bc <memcpy>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	6126      	str	r6, [r4, #16]
 80094c2:	443e      	add	r6, r7
 80094c4:	6026      	str	r6, [r4, #0]
 80094c6:	464e      	mov	r6, r9
 80094c8:	6165      	str	r5, [r4, #20]
 80094ca:	1bed      	subs	r5, r5, r7
 80094cc:	60a5      	str	r5, [r4, #8]
 80094ce:	454e      	cmp	r6, r9
 80094d0:	d900      	bls.n	80094d4 <__ssputs_r+0x84>
 80094d2:	464e      	mov	r6, r9
 80094d4:	4632      	mov	r2, r6
 80094d6:	4641      	mov	r1, r8
 80094d8:	6820      	ldr	r0, [r4, #0]
 80094da:	f000 fabe 	bl	8009a5a <memmove>
 80094de:	68a3      	ldr	r3, [r4, #8]
 80094e0:	2000      	movs	r0, #0
 80094e2:	1b9b      	subs	r3, r3, r6
 80094e4:	60a3      	str	r3, [r4, #8]
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	441e      	add	r6, r3
 80094ea:	6026      	str	r6, [r4, #0]
 80094ec:	e7dc      	b.n	80094a8 <__ssputs_r+0x58>
 80094ee:	462a      	mov	r2, r5
 80094f0:	f000 face 	bl	8009a90 <_realloc_r>
 80094f4:	4606      	mov	r6, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d1e2      	bne.n	80094c0 <__ssputs_r+0x70>
 80094fa:	6921      	ldr	r1, [r4, #16]
 80094fc:	4650      	mov	r0, sl
 80094fe:	f7ff ff01 	bl	8009304 <_free_r>
 8009502:	e7c8      	b.n	8009496 <__ssputs_r+0x46>

08009504 <_svfiprintf_r>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	461d      	mov	r5, r3
 800950a:	898b      	ldrh	r3, [r1, #12]
 800950c:	b09d      	sub	sp, #116	; 0x74
 800950e:	061f      	lsls	r7, r3, #24
 8009510:	4680      	mov	r8, r0
 8009512:	460c      	mov	r4, r1
 8009514:	4616      	mov	r6, r2
 8009516:	d50f      	bpl.n	8009538 <_svfiprintf_r+0x34>
 8009518:	690b      	ldr	r3, [r1, #16]
 800951a:	b96b      	cbnz	r3, 8009538 <_svfiprintf_r+0x34>
 800951c:	2140      	movs	r1, #64	; 0x40
 800951e:	f7ff ff3d 	bl	800939c <_malloc_r>
 8009522:	6020      	str	r0, [r4, #0]
 8009524:	6120      	str	r0, [r4, #16]
 8009526:	b928      	cbnz	r0, 8009534 <_svfiprintf_r+0x30>
 8009528:	230c      	movs	r3, #12
 800952a:	f8c8 3000 	str.w	r3, [r8]
 800952e:	f04f 30ff 	mov.w	r0, #4294967295
 8009532:	e0c8      	b.n	80096c6 <_svfiprintf_r+0x1c2>
 8009534:	2340      	movs	r3, #64	; 0x40
 8009536:	6163      	str	r3, [r4, #20]
 8009538:	2300      	movs	r3, #0
 800953a:	9309      	str	r3, [sp, #36]	; 0x24
 800953c:	2320      	movs	r3, #32
 800953e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009542:	2330      	movs	r3, #48	; 0x30
 8009544:	f04f 0b01 	mov.w	fp, #1
 8009548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800954c:	9503      	str	r5, [sp, #12]
 800954e:	4637      	mov	r7, r6
 8009550:	463d      	mov	r5, r7
 8009552:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009556:	b10b      	cbz	r3, 800955c <_svfiprintf_r+0x58>
 8009558:	2b25      	cmp	r3, #37	; 0x25
 800955a:	d13e      	bne.n	80095da <_svfiprintf_r+0xd6>
 800955c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009560:	d00b      	beq.n	800957a <_svfiprintf_r+0x76>
 8009562:	4653      	mov	r3, sl
 8009564:	4632      	mov	r2, r6
 8009566:	4621      	mov	r1, r4
 8009568:	4640      	mov	r0, r8
 800956a:	f7ff ff71 	bl	8009450 <__ssputs_r>
 800956e:	3001      	adds	r0, #1
 8009570:	f000 80a4 	beq.w	80096bc <_svfiprintf_r+0x1b8>
 8009574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009576:	4453      	add	r3, sl
 8009578:	9309      	str	r3, [sp, #36]	; 0x24
 800957a:	783b      	ldrb	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 809d 	beq.w	80096bc <_svfiprintf_r+0x1b8>
 8009582:	2300      	movs	r3, #0
 8009584:	f04f 32ff 	mov.w	r2, #4294967295
 8009588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800958c:	9304      	str	r3, [sp, #16]
 800958e:	9307      	str	r3, [sp, #28]
 8009590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009594:	931a      	str	r3, [sp, #104]	; 0x68
 8009596:	462f      	mov	r7, r5
 8009598:	2205      	movs	r2, #5
 800959a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800959e:	4850      	ldr	r0, [pc, #320]	; (80096e0 <_svfiprintf_r+0x1dc>)
 80095a0:	f000 fa4d 	bl	8009a3e <memchr>
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	b9d0      	cbnz	r0, 80095de <_svfiprintf_r+0xda>
 80095a8:	06d9      	lsls	r1, r3, #27
 80095aa:	bf44      	itt	mi
 80095ac:	2220      	movmi	r2, #32
 80095ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095b2:	071a      	lsls	r2, r3, #28
 80095b4:	bf44      	itt	mi
 80095b6:	222b      	movmi	r2, #43	; 0x2b
 80095b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095bc:	782a      	ldrb	r2, [r5, #0]
 80095be:	2a2a      	cmp	r2, #42	; 0x2a
 80095c0:	d015      	beq.n	80095ee <_svfiprintf_r+0xea>
 80095c2:	462f      	mov	r7, r5
 80095c4:	2000      	movs	r0, #0
 80095c6:	250a      	movs	r5, #10
 80095c8:	9a07      	ldr	r2, [sp, #28]
 80095ca:	4639      	mov	r1, r7
 80095cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095d0:	3b30      	subs	r3, #48	; 0x30
 80095d2:	2b09      	cmp	r3, #9
 80095d4:	d94d      	bls.n	8009672 <_svfiprintf_r+0x16e>
 80095d6:	b1b8      	cbz	r0, 8009608 <_svfiprintf_r+0x104>
 80095d8:	e00f      	b.n	80095fa <_svfiprintf_r+0xf6>
 80095da:	462f      	mov	r7, r5
 80095dc:	e7b8      	b.n	8009550 <_svfiprintf_r+0x4c>
 80095de:	4a40      	ldr	r2, [pc, #256]	; (80096e0 <_svfiprintf_r+0x1dc>)
 80095e0:	463d      	mov	r5, r7
 80095e2:	1a80      	subs	r0, r0, r2
 80095e4:	fa0b f000 	lsl.w	r0, fp, r0
 80095e8:	4318      	orrs	r0, r3
 80095ea:	9004      	str	r0, [sp, #16]
 80095ec:	e7d3      	b.n	8009596 <_svfiprintf_r+0x92>
 80095ee:	9a03      	ldr	r2, [sp, #12]
 80095f0:	1d11      	adds	r1, r2, #4
 80095f2:	6812      	ldr	r2, [r2, #0]
 80095f4:	9103      	str	r1, [sp, #12]
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	db01      	blt.n	80095fe <_svfiprintf_r+0xfa>
 80095fa:	9207      	str	r2, [sp, #28]
 80095fc:	e004      	b.n	8009608 <_svfiprintf_r+0x104>
 80095fe:	4252      	negs	r2, r2
 8009600:	f043 0302 	orr.w	r3, r3, #2
 8009604:	9207      	str	r2, [sp, #28]
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	783b      	ldrb	r3, [r7, #0]
 800960a:	2b2e      	cmp	r3, #46	; 0x2e
 800960c:	d10c      	bne.n	8009628 <_svfiprintf_r+0x124>
 800960e:	787b      	ldrb	r3, [r7, #1]
 8009610:	2b2a      	cmp	r3, #42	; 0x2a
 8009612:	d133      	bne.n	800967c <_svfiprintf_r+0x178>
 8009614:	9b03      	ldr	r3, [sp, #12]
 8009616:	3702      	adds	r7, #2
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	9203      	str	r2, [sp, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	bfb8      	it	lt
 8009622:	f04f 33ff 	movlt.w	r3, #4294967295
 8009626:	9305      	str	r3, [sp, #20]
 8009628:	4d2e      	ldr	r5, [pc, #184]	; (80096e4 <_svfiprintf_r+0x1e0>)
 800962a:	2203      	movs	r2, #3
 800962c:	7839      	ldrb	r1, [r7, #0]
 800962e:	4628      	mov	r0, r5
 8009630:	f000 fa05 	bl	8009a3e <memchr>
 8009634:	b138      	cbz	r0, 8009646 <_svfiprintf_r+0x142>
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	1b40      	subs	r0, r0, r5
 800963a:	fa03 f000 	lsl.w	r0, r3, r0
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	3701      	adds	r7, #1
 8009642:	4303      	orrs	r3, r0
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	7839      	ldrb	r1, [r7, #0]
 8009648:	2206      	movs	r2, #6
 800964a:	4827      	ldr	r0, [pc, #156]	; (80096e8 <_svfiprintf_r+0x1e4>)
 800964c:	1c7e      	adds	r6, r7, #1
 800964e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009652:	f000 f9f4 	bl	8009a3e <memchr>
 8009656:	2800      	cmp	r0, #0
 8009658:	d038      	beq.n	80096cc <_svfiprintf_r+0x1c8>
 800965a:	4b24      	ldr	r3, [pc, #144]	; (80096ec <_svfiprintf_r+0x1e8>)
 800965c:	bb13      	cbnz	r3, 80096a4 <_svfiprintf_r+0x1a0>
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	3307      	adds	r3, #7
 8009662:	f023 0307 	bic.w	r3, r3, #7
 8009666:	3308      	adds	r3, #8
 8009668:	9303      	str	r3, [sp, #12]
 800966a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966c:	444b      	add	r3, r9
 800966e:	9309      	str	r3, [sp, #36]	; 0x24
 8009670:	e76d      	b.n	800954e <_svfiprintf_r+0x4a>
 8009672:	fb05 3202 	mla	r2, r5, r2, r3
 8009676:	2001      	movs	r0, #1
 8009678:	460f      	mov	r7, r1
 800967a:	e7a6      	b.n	80095ca <_svfiprintf_r+0xc6>
 800967c:	2300      	movs	r3, #0
 800967e:	250a      	movs	r5, #10
 8009680:	4619      	mov	r1, r3
 8009682:	3701      	adds	r7, #1
 8009684:	9305      	str	r3, [sp, #20]
 8009686:	4638      	mov	r0, r7
 8009688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800968c:	3a30      	subs	r2, #48	; 0x30
 800968e:	2a09      	cmp	r2, #9
 8009690:	d903      	bls.n	800969a <_svfiprintf_r+0x196>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0c8      	beq.n	8009628 <_svfiprintf_r+0x124>
 8009696:	9105      	str	r1, [sp, #20]
 8009698:	e7c6      	b.n	8009628 <_svfiprintf_r+0x124>
 800969a:	fb05 2101 	mla	r1, r5, r1, r2
 800969e:	2301      	movs	r3, #1
 80096a0:	4607      	mov	r7, r0
 80096a2:	e7f0      	b.n	8009686 <_svfiprintf_r+0x182>
 80096a4:	ab03      	add	r3, sp, #12
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	4622      	mov	r2, r4
 80096aa:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <_svfiprintf_r+0x1ec>)
 80096ac:	a904      	add	r1, sp, #16
 80096ae:	4640      	mov	r0, r8
 80096b0:	f3af 8000 	nop.w
 80096b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096b8:	4681      	mov	r9, r0
 80096ba:	d1d6      	bne.n	800966a <_svfiprintf_r+0x166>
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	065b      	lsls	r3, r3, #25
 80096c0:	f53f af35 	bmi.w	800952e <_svfiprintf_r+0x2a>
 80096c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c6:	b01d      	add	sp, #116	; 0x74
 80096c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096cc:	ab03      	add	r3, sp, #12
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4622      	mov	r2, r4
 80096d2:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <_svfiprintf_r+0x1ec>)
 80096d4:	a904      	add	r1, sp, #16
 80096d6:	4640      	mov	r0, r8
 80096d8:	f000 f882 	bl	80097e0 <_printf_i>
 80096dc:	e7ea      	b.n	80096b4 <_svfiprintf_r+0x1b0>
 80096de:	bf00      	nop
 80096e0:	08009ccc 	.word	0x08009ccc
 80096e4:	08009cd2 	.word	0x08009cd2
 80096e8:	08009cd6 	.word	0x08009cd6
 80096ec:	00000000 	.word	0x00000000
 80096f0:	08009451 	.word	0x08009451

080096f4 <_printf_common>:
 80096f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f8:	4691      	mov	r9, r2
 80096fa:	461f      	mov	r7, r3
 80096fc:	688a      	ldr	r2, [r1, #8]
 80096fe:	690b      	ldr	r3, [r1, #16]
 8009700:	4606      	mov	r6, r0
 8009702:	4293      	cmp	r3, r2
 8009704:	bfb8      	it	lt
 8009706:	4613      	movlt	r3, r2
 8009708:	f8c9 3000 	str.w	r3, [r9]
 800970c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009710:	460c      	mov	r4, r1
 8009712:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009716:	b112      	cbz	r2, 800971e <_printf_common+0x2a>
 8009718:	3301      	adds	r3, #1
 800971a:	f8c9 3000 	str.w	r3, [r9]
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	0699      	lsls	r1, r3, #26
 8009722:	bf42      	ittt	mi
 8009724:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009728:	3302      	addmi	r3, #2
 800972a:	f8c9 3000 	strmi.w	r3, [r9]
 800972e:	6825      	ldr	r5, [r4, #0]
 8009730:	f015 0506 	ands.w	r5, r5, #6
 8009734:	d107      	bne.n	8009746 <_printf_common+0x52>
 8009736:	f104 0a19 	add.w	sl, r4, #25
 800973a:	68e3      	ldr	r3, [r4, #12]
 800973c:	f8d9 2000 	ldr.w	r2, [r9]
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	42ab      	cmp	r3, r5
 8009744:	dc29      	bgt.n	800979a <_printf_common+0xa6>
 8009746:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800974a:	6822      	ldr	r2, [r4, #0]
 800974c:	3300      	adds	r3, #0
 800974e:	bf18      	it	ne
 8009750:	2301      	movne	r3, #1
 8009752:	0692      	lsls	r2, r2, #26
 8009754:	d42e      	bmi.n	80097b4 <_printf_common+0xc0>
 8009756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800975a:	4639      	mov	r1, r7
 800975c:	4630      	mov	r0, r6
 800975e:	47c0      	blx	r8
 8009760:	3001      	adds	r0, #1
 8009762:	d021      	beq.n	80097a8 <_printf_common+0xb4>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	68e5      	ldr	r5, [r4, #12]
 8009768:	f003 0306 	and.w	r3, r3, #6
 800976c:	2b04      	cmp	r3, #4
 800976e:	bf18      	it	ne
 8009770:	2500      	movne	r5, #0
 8009772:	f8d9 2000 	ldr.w	r2, [r9]
 8009776:	f04f 0900 	mov.w	r9, #0
 800977a:	bf08      	it	eq
 800977c:	1aad      	subeq	r5, r5, r2
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	bf08      	it	eq
 8009784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009788:	4293      	cmp	r3, r2
 800978a:	bfc4      	itt	gt
 800978c:	1a9b      	subgt	r3, r3, r2
 800978e:	18ed      	addgt	r5, r5, r3
 8009790:	341a      	adds	r4, #26
 8009792:	454d      	cmp	r5, r9
 8009794:	d11a      	bne.n	80097cc <_printf_common+0xd8>
 8009796:	2000      	movs	r0, #0
 8009798:	e008      	b.n	80097ac <_printf_common+0xb8>
 800979a:	2301      	movs	r3, #1
 800979c:	4652      	mov	r2, sl
 800979e:	4639      	mov	r1, r7
 80097a0:	4630      	mov	r0, r6
 80097a2:	47c0      	blx	r8
 80097a4:	3001      	adds	r0, #1
 80097a6:	d103      	bne.n	80097b0 <_printf_common+0xbc>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b0:	3501      	adds	r5, #1
 80097b2:	e7c2      	b.n	800973a <_printf_common+0x46>
 80097b4:	2030      	movs	r0, #48	; 0x30
 80097b6:	18e1      	adds	r1, r4, r3
 80097b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097c2:	4422      	add	r2, r4
 80097c4:	3302      	adds	r3, #2
 80097c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097ca:	e7c4      	b.n	8009756 <_printf_common+0x62>
 80097cc:	2301      	movs	r3, #1
 80097ce:	4622      	mov	r2, r4
 80097d0:	4639      	mov	r1, r7
 80097d2:	4630      	mov	r0, r6
 80097d4:	47c0      	blx	r8
 80097d6:	3001      	adds	r0, #1
 80097d8:	d0e6      	beq.n	80097a8 <_printf_common+0xb4>
 80097da:	f109 0901 	add.w	r9, r9, #1
 80097de:	e7d8      	b.n	8009792 <_printf_common+0x9e>

080097e0 <_printf_i>:
 80097e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80097e8:	460c      	mov	r4, r1
 80097ea:	7e09      	ldrb	r1, [r1, #24]
 80097ec:	b085      	sub	sp, #20
 80097ee:	296e      	cmp	r1, #110	; 0x6e
 80097f0:	4617      	mov	r7, r2
 80097f2:	4606      	mov	r6, r0
 80097f4:	4698      	mov	r8, r3
 80097f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097f8:	f000 80b3 	beq.w	8009962 <_printf_i+0x182>
 80097fc:	d822      	bhi.n	8009844 <_printf_i+0x64>
 80097fe:	2963      	cmp	r1, #99	; 0x63
 8009800:	d036      	beq.n	8009870 <_printf_i+0x90>
 8009802:	d80a      	bhi.n	800981a <_printf_i+0x3a>
 8009804:	2900      	cmp	r1, #0
 8009806:	f000 80b9 	beq.w	800997c <_printf_i+0x19c>
 800980a:	2958      	cmp	r1, #88	; 0x58
 800980c:	f000 8083 	beq.w	8009916 <_printf_i+0x136>
 8009810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009814:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009818:	e032      	b.n	8009880 <_printf_i+0xa0>
 800981a:	2964      	cmp	r1, #100	; 0x64
 800981c:	d001      	beq.n	8009822 <_printf_i+0x42>
 800981e:	2969      	cmp	r1, #105	; 0x69
 8009820:	d1f6      	bne.n	8009810 <_printf_i+0x30>
 8009822:	6820      	ldr	r0, [r4, #0]
 8009824:	6813      	ldr	r3, [r2, #0]
 8009826:	0605      	lsls	r5, r0, #24
 8009828:	f103 0104 	add.w	r1, r3, #4
 800982c:	d52a      	bpl.n	8009884 <_printf_i+0xa4>
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6011      	str	r1, [r2, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	da03      	bge.n	800983e <_printf_i+0x5e>
 8009836:	222d      	movs	r2, #45	; 0x2d
 8009838:	425b      	negs	r3, r3
 800983a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800983e:	486f      	ldr	r0, [pc, #444]	; (80099fc <_printf_i+0x21c>)
 8009840:	220a      	movs	r2, #10
 8009842:	e039      	b.n	80098b8 <_printf_i+0xd8>
 8009844:	2973      	cmp	r1, #115	; 0x73
 8009846:	f000 809d 	beq.w	8009984 <_printf_i+0x1a4>
 800984a:	d808      	bhi.n	800985e <_printf_i+0x7e>
 800984c:	296f      	cmp	r1, #111	; 0x6f
 800984e:	d020      	beq.n	8009892 <_printf_i+0xb2>
 8009850:	2970      	cmp	r1, #112	; 0x70
 8009852:	d1dd      	bne.n	8009810 <_printf_i+0x30>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	f043 0320 	orr.w	r3, r3, #32
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	e003      	b.n	8009866 <_printf_i+0x86>
 800985e:	2975      	cmp	r1, #117	; 0x75
 8009860:	d017      	beq.n	8009892 <_printf_i+0xb2>
 8009862:	2978      	cmp	r1, #120	; 0x78
 8009864:	d1d4      	bne.n	8009810 <_printf_i+0x30>
 8009866:	2378      	movs	r3, #120	; 0x78
 8009868:	4865      	ldr	r0, [pc, #404]	; (8009a00 <_printf_i+0x220>)
 800986a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800986e:	e055      	b.n	800991c <_printf_i+0x13c>
 8009870:	6813      	ldr	r3, [r2, #0]
 8009872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009876:	1d19      	adds	r1, r3, #4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6011      	str	r1, [r2, #0]
 800987c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009880:	2301      	movs	r3, #1
 8009882:	e08c      	b.n	800999e <_printf_i+0x1be>
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f010 0f40 	tst.w	r0, #64	; 0x40
 800988a:	6011      	str	r1, [r2, #0]
 800988c:	bf18      	it	ne
 800988e:	b21b      	sxthne	r3, r3
 8009890:	e7cf      	b.n	8009832 <_printf_i+0x52>
 8009892:	6813      	ldr	r3, [r2, #0]
 8009894:	6825      	ldr	r5, [r4, #0]
 8009896:	1d18      	adds	r0, r3, #4
 8009898:	6010      	str	r0, [r2, #0]
 800989a:	0628      	lsls	r0, r5, #24
 800989c:	d501      	bpl.n	80098a2 <_printf_i+0xc2>
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	e002      	b.n	80098a8 <_printf_i+0xc8>
 80098a2:	0668      	lsls	r0, r5, #25
 80098a4:	d5fb      	bpl.n	800989e <_printf_i+0xbe>
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	296f      	cmp	r1, #111	; 0x6f
 80098aa:	bf14      	ite	ne
 80098ac:	220a      	movne	r2, #10
 80098ae:	2208      	moveq	r2, #8
 80098b0:	4852      	ldr	r0, [pc, #328]	; (80099fc <_printf_i+0x21c>)
 80098b2:	2100      	movs	r1, #0
 80098b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098b8:	6865      	ldr	r5, [r4, #4]
 80098ba:	2d00      	cmp	r5, #0
 80098bc:	60a5      	str	r5, [r4, #8]
 80098be:	f2c0 8095 	blt.w	80099ec <_printf_i+0x20c>
 80098c2:	6821      	ldr	r1, [r4, #0]
 80098c4:	f021 0104 	bic.w	r1, r1, #4
 80098c8:	6021      	str	r1, [r4, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d13d      	bne.n	800994a <_printf_i+0x16a>
 80098ce:	2d00      	cmp	r5, #0
 80098d0:	f040 808e 	bne.w	80099f0 <_printf_i+0x210>
 80098d4:	4665      	mov	r5, ip
 80098d6:	2a08      	cmp	r2, #8
 80098d8:	d10b      	bne.n	80098f2 <_printf_i+0x112>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	07db      	lsls	r3, r3, #31
 80098de:	d508      	bpl.n	80098f2 <_printf_i+0x112>
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	6862      	ldr	r2, [r4, #4]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	bfde      	ittt	le
 80098e8:	2330      	movle	r3, #48	; 0x30
 80098ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098f2:	ebac 0305 	sub.w	r3, ip, r5
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	f8cd 8000 	str.w	r8, [sp]
 80098fc:	463b      	mov	r3, r7
 80098fe:	aa03      	add	r2, sp, #12
 8009900:	4621      	mov	r1, r4
 8009902:	4630      	mov	r0, r6
 8009904:	f7ff fef6 	bl	80096f4 <_printf_common>
 8009908:	3001      	adds	r0, #1
 800990a:	d14d      	bne.n	80099a8 <_printf_i+0x1c8>
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	b005      	add	sp, #20
 8009912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009916:	4839      	ldr	r0, [pc, #228]	; (80099fc <_printf_i+0x21c>)
 8009918:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800991c:	6813      	ldr	r3, [r2, #0]
 800991e:	6821      	ldr	r1, [r4, #0]
 8009920:	1d1d      	adds	r5, r3, #4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6015      	str	r5, [r2, #0]
 8009926:	060a      	lsls	r2, r1, #24
 8009928:	d50b      	bpl.n	8009942 <_printf_i+0x162>
 800992a:	07ca      	lsls	r2, r1, #31
 800992c:	bf44      	itt	mi
 800992e:	f041 0120 	orrmi.w	r1, r1, #32
 8009932:	6021      	strmi	r1, [r4, #0]
 8009934:	b91b      	cbnz	r3, 800993e <_printf_i+0x15e>
 8009936:	6822      	ldr	r2, [r4, #0]
 8009938:	f022 0220 	bic.w	r2, r2, #32
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	2210      	movs	r2, #16
 8009940:	e7b7      	b.n	80098b2 <_printf_i+0xd2>
 8009942:	064d      	lsls	r5, r1, #25
 8009944:	bf48      	it	mi
 8009946:	b29b      	uxthmi	r3, r3
 8009948:	e7ef      	b.n	800992a <_printf_i+0x14a>
 800994a:	4665      	mov	r5, ip
 800994c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009950:	fb02 3311 	mls	r3, r2, r1, r3
 8009954:	5cc3      	ldrb	r3, [r0, r3]
 8009956:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800995a:	460b      	mov	r3, r1
 800995c:	2900      	cmp	r1, #0
 800995e:	d1f5      	bne.n	800994c <_printf_i+0x16c>
 8009960:	e7b9      	b.n	80098d6 <_printf_i+0xf6>
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	6825      	ldr	r5, [r4, #0]
 8009966:	1d18      	adds	r0, r3, #4
 8009968:	6961      	ldr	r1, [r4, #20]
 800996a:	6010      	str	r0, [r2, #0]
 800996c:	0628      	lsls	r0, r5, #24
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	d501      	bpl.n	8009976 <_printf_i+0x196>
 8009972:	6019      	str	r1, [r3, #0]
 8009974:	e002      	b.n	800997c <_printf_i+0x19c>
 8009976:	066a      	lsls	r2, r5, #25
 8009978:	d5fb      	bpl.n	8009972 <_printf_i+0x192>
 800997a:	8019      	strh	r1, [r3, #0]
 800997c:	2300      	movs	r3, #0
 800997e:	4665      	mov	r5, ip
 8009980:	6123      	str	r3, [r4, #16]
 8009982:	e7b9      	b.n	80098f8 <_printf_i+0x118>
 8009984:	6813      	ldr	r3, [r2, #0]
 8009986:	1d19      	adds	r1, r3, #4
 8009988:	6011      	str	r1, [r2, #0]
 800998a:	681d      	ldr	r5, [r3, #0]
 800998c:	6862      	ldr	r2, [r4, #4]
 800998e:	2100      	movs	r1, #0
 8009990:	4628      	mov	r0, r5
 8009992:	f000 f854 	bl	8009a3e <memchr>
 8009996:	b108      	cbz	r0, 800999c <_printf_i+0x1bc>
 8009998:	1b40      	subs	r0, r0, r5
 800999a:	6060      	str	r0, [r4, #4]
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	6123      	str	r3, [r4, #16]
 80099a0:	2300      	movs	r3, #0
 80099a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a6:	e7a7      	b.n	80098f8 <_printf_i+0x118>
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	462a      	mov	r2, r5
 80099ac:	4639      	mov	r1, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	47c0      	blx	r8
 80099b2:	3001      	adds	r0, #1
 80099b4:	d0aa      	beq.n	800990c <_printf_i+0x12c>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	079b      	lsls	r3, r3, #30
 80099ba:	d413      	bmi.n	80099e4 <_printf_i+0x204>
 80099bc:	68e0      	ldr	r0, [r4, #12]
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	4298      	cmp	r0, r3
 80099c2:	bfb8      	it	lt
 80099c4:	4618      	movlt	r0, r3
 80099c6:	e7a3      	b.n	8009910 <_printf_i+0x130>
 80099c8:	2301      	movs	r3, #1
 80099ca:	464a      	mov	r2, r9
 80099cc:	4639      	mov	r1, r7
 80099ce:	4630      	mov	r0, r6
 80099d0:	47c0      	blx	r8
 80099d2:	3001      	adds	r0, #1
 80099d4:	d09a      	beq.n	800990c <_printf_i+0x12c>
 80099d6:	3501      	adds	r5, #1
 80099d8:	68e3      	ldr	r3, [r4, #12]
 80099da:	9a03      	ldr	r2, [sp, #12]
 80099dc:	1a9b      	subs	r3, r3, r2
 80099de:	42ab      	cmp	r3, r5
 80099e0:	dcf2      	bgt.n	80099c8 <_printf_i+0x1e8>
 80099e2:	e7eb      	b.n	80099bc <_printf_i+0x1dc>
 80099e4:	2500      	movs	r5, #0
 80099e6:	f104 0919 	add.w	r9, r4, #25
 80099ea:	e7f5      	b.n	80099d8 <_printf_i+0x1f8>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1ac      	bne.n	800994a <_printf_i+0x16a>
 80099f0:	7803      	ldrb	r3, [r0, #0]
 80099f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099fa:	e76c      	b.n	80098d6 <_printf_i+0xf6>
 80099fc:	08009cdd 	.word	0x08009cdd
 8009a00:	08009cee 	.word	0x08009cee

08009a04 <_sbrk_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	2300      	movs	r3, #0
 8009a08:	4c05      	ldr	r4, [pc, #20]	; (8009a20 <_sbrk_r+0x1c>)
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	f7f8 fba0 	bl	8002154 <_sbrk>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_sbrk_r+0x1a>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_sbrk_r+0x1a>
 8009a1c:	602b      	str	r3, [r5, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20000800 	.word	0x20000800

08009a24 <__ascii_wctomb>:
 8009a24:	b149      	cbz	r1, 8009a3a <__ascii_wctomb+0x16>
 8009a26:	2aff      	cmp	r2, #255	; 0xff
 8009a28:	bf8b      	itete	hi
 8009a2a:	238a      	movhi	r3, #138	; 0x8a
 8009a2c:	700a      	strbls	r2, [r1, #0]
 8009a2e:	6003      	strhi	r3, [r0, #0]
 8009a30:	2001      	movls	r0, #1
 8009a32:	bf88      	it	hi
 8009a34:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a38:	4770      	bx	lr
 8009a3a:	4608      	mov	r0, r1
 8009a3c:	4770      	bx	lr

08009a3e <memchr>:
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	b2c9      	uxtb	r1, r1
 8009a42:	4402      	add	r2, r0
 8009a44:	4290      	cmp	r0, r2
 8009a46:	4603      	mov	r3, r0
 8009a48:	d101      	bne.n	8009a4e <memchr+0x10>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e003      	b.n	8009a56 <memchr+0x18>
 8009a4e:	781c      	ldrb	r4, [r3, #0]
 8009a50:	3001      	adds	r0, #1
 8009a52:	428c      	cmp	r4, r1
 8009a54:	d1f6      	bne.n	8009a44 <memchr+0x6>
 8009a56:	4618      	mov	r0, r3
 8009a58:	bd10      	pop	{r4, pc}

08009a5a <memmove>:
 8009a5a:	4288      	cmp	r0, r1
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	eb01 0302 	add.w	r3, r1, r2
 8009a62:	d807      	bhi.n	8009a74 <memmove+0x1a>
 8009a64:	1e42      	subs	r2, r0, #1
 8009a66:	4299      	cmp	r1, r3
 8009a68:	d00a      	beq.n	8009a80 <memmove+0x26>
 8009a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a72:	e7f8      	b.n	8009a66 <memmove+0xc>
 8009a74:	4283      	cmp	r3, r0
 8009a76:	d9f5      	bls.n	8009a64 <memmove+0xa>
 8009a78:	1881      	adds	r1, r0, r2
 8009a7a:	1ad2      	subs	r2, r2, r3
 8009a7c:	42d3      	cmn	r3, r2
 8009a7e:	d100      	bne.n	8009a82 <memmove+0x28>
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009a8a:	e7f7      	b.n	8009a7c <memmove+0x22>

08009a8c <__malloc_lock>:
 8009a8c:	4770      	bx	lr

08009a8e <__malloc_unlock>:
 8009a8e:	4770      	bx	lr

08009a90 <_realloc_r>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	4607      	mov	r7, r0
 8009a94:	4614      	mov	r4, r2
 8009a96:	460e      	mov	r6, r1
 8009a98:	b921      	cbnz	r1, 8009aa4 <_realloc_r+0x14>
 8009a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	f7ff bc7c 	b.w	800939c <_malloc_r>
 8009aa4:	b922      	cbnz	r2, 8009ab0 <_realloc_r+0x20>
 8009aa6:	f7ff fc2d 	bl	8009304 <_free_r>
 8009aaa:	4625      	mov	r5, r4
 8009aac:	4628      	mov	r0, r5
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab0:	f000 f814 	bl	8009adc <_malloc_usable_size_r>
 8009ab4:	42a0      	cmp	r0, r4
 8009ab6:	d20f      	bcs.n	8009ad8 <_realloc_r+0x48>
 8009ab8:	4621      	mov	r1, r4
 8009aba:	4638      	mov	r0, r7
 8009abc:	f7ff fc6e 	bl	800939c <_malloc_r>
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d0f2      	beq.n	8009aac <_realloc_r+0x1c>
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4622      	mov	r2, r4
 8009aca:	f7fd fb77 	bl	80071bc <memcpy>
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff fc17 	bl	8009304 <_free_r>
 8009ad6:	e7e9      	b.n	8009aac <_realloc_r+0x1c>
 8009ad8:	4635      	mov	r5, r6
 8009ada:	e7e7      	b.n	8009aac <_realloc_r+0x1c>

08009adc <_malloc_usable_size_r>:
 8009adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae0:	1f18      	subs	r0, r3, #4
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfbc      	itt	lt
 8009ae6:	580b      	ldrlt	r3, [r1, r0]
 8009ae8:	18c0      	addlt	r0, r0, r3
 8009aea:	4770      	bx	lr

08009aec <_init>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	bf00      	nop
 8009af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af2:	bc08      	pop	{r3}
 8009af4:	469e      	mov	lr, r3
 8009af6:	4770      	bx	lr

08009af8 <_fini>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	bf00      	nop
 8009afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afe:	bc08      	pop	{r3}
 8009b00:	469e      	mov	lr, r3
 8009b02:	4770      	bx	lr
